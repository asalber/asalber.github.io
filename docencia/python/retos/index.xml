<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Retos de Programación con Python | Aprende con Alf</title><link>/docencia/python/retos/</link><atom:link href="/docencia/python/retos/index.xml" rel="self" type="application/rss+xml"/><description>Retos de Programación con Python</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>es-es</language><image><url>/images/logo_hude38443eeb2faa5fa84365aba7d86a77_3514_300x300_fit_lanczos_2.png</url><title>Retos de Programación con Python</title><link>/docencia/python/retos/</link></image><item><title>Ajedrez</title><link>/docencia/python/retos/ajedrez/</link><pubDate>Thu, 01 Jan 1970 00:33:39 +0000</pubDate><guid>/docencia/python/retos/ajedrez/</guid><description>&lt;h2 id="tarea-1">Tarea 1&lt;/h2>
&lt;p>La primera tarea consiste en escribir un programa que guarde en un fichero la secuencia de tableros de una partida de ajedrez. Partiremos del tablero inicial donde las filas del tablero están separadas por cambios de línea y las columnas por tabuladores.&lt;/p>
&lt;p>El programa debe guardar el tablero inicial en un fichero con el nombre que elija el usuario. Después debe preguntar al usuario si quiere hacer un movimiento o terminar la partida. Cada vez que el usuario quiera hacer un nuevo movimiento debe preguntar la fila y la columna de la pieza que quiere mover y la fila y la columna a la que la quiere mover. Tras ello añadirá el tablero resultante al final del fichero anterior.&lt;/p>
&lt;p>El fichero
&lt;a href="doc/partida-ajedrez.txt">partida-ajedrez.txt&lt;/a> contiene un ejemplo con el fichero resultante de una partida con 3 movimientos.&lt;/p>
&lt;h2 id="tarea-2">Tarea 2&lt;/h2>
&lt;p>Una vez generado el fichero con los tableros sucesivos de una partida de ajedrez, el programa preguntará por un movimiento y mostrará por pantalla el tablero correspondiente ese movimiento.
Por ejemplo, utilizando el fichero
&lt;a href="doc/partida-ajedrez.txt">partida-ajedrez.txt&lt;/a>, si el usuario introduce el movimiento 2, debería mostrar por pantalla el siguiente tablero:&lt;/p>
&lt;pre>&lt;code class="language-sh">♜ ♞ ♝ ♛ ♚ ♝ ♞ ♜
♟ ♟ ♟ ♟ ♟ ♟ ♟
♟
♙
♙ ♙ ♙ ♙ ♙ ♙ ♙
♖ ♘ ♗ ♕ ♔ ♗ ♘ ♖
&lt;/code>&lt;/pre>
&lt;h2 id="solución">Solución&lt;/h2>
&lt;p>&lt;a href="https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/retos/soluciones/ajedrez.ipynb" class="btn btn-info" target="_blank">Solución&lt;/a>&lt;/p></description></item><item><title>Estrellas regulares</title><link>/docencia/python/retos/estrellas-regulares/</link><pubDate>Thu, 01 Jan 1970 00:33:39 +0000</pubDate><guid>/docencia/python/retos/estrellas-regulares/</guid><description>&lt;h2 id="tarea">Tarea&lt;/h2>
&lt;p>El reto consiste en programar una función que dibuje estrellas como la que aparece a continuación con un número de puntas dado.&lt;/p>
&lt;p>&lt;img src="../img/estrella.png" alt="Estrella">&lt;/p>
&lt;p>Para ello hay que utilizar el módulo de Python
&lt;a href="https://docs.python.org/3/library/turtle.html" target="_blank" rel="noopener">Turtle&lt;/a> que permite realizar trazos sencillos en una ventana gráfica.&lt;/p>
&lt;p>En el siguiente video hay una introducción básica al módulo Turtle.&lt;/p>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/cX9efszLbJw" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;p>Y también dispones de una
&lt;a href="doc/PythonTurtle-cheatsheet.pdf">hoja de resumen con las principales funciones de Turtle&lt;/a>.&lt;/p>
&lt;h2 id="solución">Solución&lt;/h2>
&lt;p>&lt;a href="https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/retos/soluciones/dibujo-estrellas-turtle.ipynb" class="btn btn-info" target="_blank">Solución&lt;/a>&lt;/p></description></item><item><title>Laberinto</title><link>/docencia/python/retos/laberinto/</link><pubDate>Thu, 01 Jan 1970 00:33:39 +0000</pubDate><guid>/docencia/python/retos/laberinto/</guid><description>&lt;h2 id="tarea-1">Tarea 1&lt;/h2>
&lt;p>La primera tarea consiste en construir un laberinto como el de la siguiente figura.&lt;/p>
&lt;p>&lt;img src="../img/laberinto.png" alt="Laberinto">&lt;/p>
&lt;p>El laberinto se representará como una una lista de listas, donde cada lista es una fila del laberinto y cada casilla se representará con un espacio ' ' si hay paso o con la letra &amp;lsquo;X&amp;rsquo; si hay un muro, tal y como se muestra a continuación:&lt;/p>
&lt;pre>&lt;code class="language-Python">laberinto = [
[' ', 'X', 'X', 'X', 'X'],
[' ', 'X', ' ', ' ', ' '],
[' ', 'X', ' ', 'X', ' '],
[' ', ' ', ' ', 'X', ' '],
['X', 'X', 'X', 'X', 'S']
]
&lt;/code>&lt;/pre>
&lt;p>El laberinto se debe crear a partir de una tupla con las coordenadas de las casillas donde hay muro, como la siguiente:&lt;/p>
&lt;pre>&lt;code class="language-Python">muro = ((0,1), (0,2), (0,3), (0,4), (1,1), (2,1), (2,3), (3,3), (4,0), (4,1), (4,2), (4,3))
&lt;/code>&lt;/pre>
&lt;h2 id="tarea-2">Tarea 2&lt;/h2>
&lt;p>La segunda tarea a resolver consiste en construir un programa para recorrer el laberinto desde la entrada a la salida. La entrada siempre está en la esquina superior izquierda y la salida en la esquina inferior derecha.&lt;/p>
&lt;p>El programa debe devolver una lista con la secuencia de movimientos para ir de la entrada a la salida del laberinto, tal y como se muestra a continuación:&lt;/p>
&lt;pre>&lt;code class="language-Python">['Abajo', 'Abajo', 'Abajo', 'Abajo', 'Derecha', 'Derecha', 'Arriba', 'Arriba', 'Derecha', 'Derecha', 'Abajo', 'Abajo', 'Abajo']
&lt;/code>&lt;/pre>
&lt;h2 id="solución">Solución&lt;/h2>
&lt;p>&lt;a href="https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/retos/soluciones/laberinto.ipynb" class="btn btn-info" target="_blank">Solución&lt;/a>&lt;/p></description></item></channel></rss>