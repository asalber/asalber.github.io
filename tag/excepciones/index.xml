<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Excepciones | Aprende con Alf</title><link>/tag/excepciones/</link><atom:link href="/tag/excepciones/index.xml" rel="self" type="application/rss+xml"/><description>Excepciones</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>es-es</language><image><url>/images/logo_hude38443eeb2faa5fa84365aba7d86a77_3514_300x300_fit_lanczos_2.png</url><title>Excepciones</title><link>/tag/excepciones/</link></image><item><title>Excepciones</title><link>/docencia/python/manual/excepciones/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docencia/python/manual/excepciones/</guid><description>&lt;h2 id="control-de-errores-mediante-excepciones">Control de errores mediante excepciones&lt;/h2>
&lt;p>Python utiliza un objeto especial llamado &lt;strong>excepción&lt;/strong> para controlar cualquier error que pueda ocurrir durante la ejecución de un programa.&lt;/p>
&lt;p>Cuando ocurre un error durante la ejecución de un programa, Python crea una excepción. Si no se controla esta excepción la ejecución del programa se detiene y se muestra el error (&lt;em>traceback&lt;/em>).&lt;/p>
&lt;pre>&lt;code class="language-python">&amp;gt;&amp;gt;&amp;gt; print(1 / 0) # Error al intentar dividir por 0.
Traceback (most recent call last):
File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
ZeroDivisionError: division by zero
&lt;/code>&lt;/pre>
&lt;h3 id="tipos-de-excepciones">Tipos de excepciones&lt;/h3>
&lt;p>Los principales excepciones definidas en Python son:&lt;/p>
&lt;ul>
&lt;li>&lt;code>TypeError&lt;/code> : Ocurre cuando se aplica una operación o función a un dato del tipo inapropiado.&lt;/li>
&lt;li>&lt;code>ZeroDivisionError&lt;/code> : Ocurre cuando se itenta dividir por cero.&lt;/li>
&lt;li>&lt;code>OverflowError&lt;/code> : Ocurre cuando un cálculo excede el límite para un tipo de dato numérico.&lt;/li>
&lt;li>&lt;code>IndexError&lt;/code> : Ocurre cuando se intenta acceder a una secuencia con un índice que no existe.&lt;/li>
&lt;li>&lt;code>KeyError&lt;/code> : Ocurre cuando se intenta acceder a un diccionario con una clave que no existe.&lt;/li>
&lt;li>&lt;code>FileNotFoundError&lt;/code> : Ocurre cuando se intenta acceder a un fichero que no existe en la ruta indicada.&lt;/li>
&lt;li>&lt;code>ImportError&lt;/code> : Ocurre cuando falla la importación de un módulo.&lt;/li>
&lt;/ul>
&lt;p>Consultar la documentaciónde Python para ver la
&lt;a href="https://docs.python.org/3/library/exceptions.html" target="_blank" rel="noopener">lista de exepciones predefinidas&lt;/a>.&lt;/p>
&lt;h3 id="control-de-excepciones">Control de excepciones&lt;/h3>
&lt;h4 id="try---except---else">&lt;code>try - except - else&lt;/code>&lt;/h4>
&lt;p>Para evitar la interrución de la ejecución del programa cuando se produce un error, es posible controlar la exepción que se genera con la siguiente instrucción:&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>try:&lt;/code>&lt;br>
     &lt;em>bloque código 1&lt;/em>&lt;br>
&lt;code>except&lt;/code> &lt;em>excepción&lt;/em>&lt;code>:&lt;/code>&lt;br>
     &lt;em>bloque código 2&lt;/em>&lt;br>
&lt;code>else:&lt;/code>&lt;br>
     &lt;em>bloque código 3&lt;/em>&lt;/p>
&lt;/blockquote>
&lt;p>Esta instrucción ejecuta el primer bloque de código y si se produce un error que genera una excepción del tipo &lt;em>excepción&lt;/em> entonces ejecuta el segundo bloque de código, mientras que si no se produce ningún error, se ejecuta el tercer bloque de código.&lt;/p>
&lt;h3 id="control-de-excepciones-1">Control de excepciones&lt;/h3>
&lt;pre>&lt;code class="language-python">&amp;gt;&amp;gt;&amp;gt; def division(a, b):
... try:
... result = a / b
... except ZeroDivisionError:
... print('¡No se puede dividir por cero!')
... else:
... print(result)
...
&amp;gt;&amp;gt;&amp;gt; division(1, 0)
¡No se puede dividir por cero!
&amp;gt;&amp;gt;&amp;gt; division(1, 2)
0.5
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-python">&amp;gt;&amp;gt;&amp;gt; try:
... f = open('fichero.txt') # El fichero no existe
... except FileNotFoundError:
... print('¡El fichero no existe!')
... else:
... print(f.read())
¡El fichero no existe!
&lt;/code>&lt;/pre></description></item></channel></rss>