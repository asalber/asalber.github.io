<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programación Funcional | Aprende con Alf</title><link>/tag/programacion-funcional/</link><atom:link href="/tag/programacion-funcional/index.xml" rel="self" type="application/rss+xml"/><description>Programación Funcional</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>es-es</language><image><url>/images/logo_hude38443eeb2faa5fa84365aba7d86a77_3514_300x300_fit_lanczos_2.png</url><title>Programación Funcional</title><link>/tag/programacion-funcional/</link></image><item><title>Ejercicios de Programación Funcional</title><link>/docencia/python/ejercicios/programacion-funcional/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docencia/python/ejercicios/programacion-funcional/</guid><description>&lt;h2 id="ejercicio-1">Ejercicio 1&lt;/h2>
&lt;p>Escribir una función que aplique un descuento a un precio y otra que aplique el IVA a un precio. Escribir una tercera función que reciba un diccionario con los precios y porcentajes de una cesta de la compra, y una de las funciones anteriores, y utilice la función pasada para aplicar los descuentos o el IVA a los productos de la cesta y devolver el precio final de la cesta.&lt;/p>
&lt;p>&lt;a href="https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/programacion-funcional/ejercicio1.ipynb" class="btn btn-info">Solución&lt;/a>&lt;/p>
&lt;h2 id="ejercicio-2">Ejercicio 2&lt;/h2>
&lt;p>Escribir una función que simule una calculadora científica que permita calcular el seno, coseno, tangente, exponencial y logaritmo neperiano. La función preguntará al usuario el valor y la función a aplicar, y mostrará por pantalla una tabla con los enteros de 1 al valor introducido y el resultado de aplicar la función a esos enteros.&lt;/p>
&lt;p>&lt;a href="https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/programacion-funcional/ejercicio2.ipynb" class="btn btn-info">Solución&lt;/a>&lt;/p>
&lt;h2 id="ejercicio-3">Ejercicio 3&lt;/h2>
&lt;p>Escribir una función que reciba otra función y una lista, y devuelva otra lista con el resultado de aplicar la función dada a cada uno de los elementos de la lista.&lt;/p>
&lt;p>&lt;a href="https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/programacion-funcional/ejercicio3.ipynb" class="btn btn-info">Solución&lt;/a>&lt;/p>
&lt;h2 id="ejercicio-4">Ejercicio 4&lt;/h2>
&lt;p>Escribir una función que reciba otra función booleana y una lista, y devuelva otra lista con los elementos de la lista que devuelvan &lt;code>True&lt;/code> al aplicarles la función booleana.&lt;/p>
&lt;p>&lt;a href="https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/programacion-funcional/ejercicio4.ipynb" class="btn btn-info">Solución&lt;/a>&lt;/p>
&lt;h2 id="ejercicio-5">Ejercicio 5&lt;/h2>
&lt;p>Escribir una función que reciba una frase y devuelva un diccionario con las palabras que contiene y su longitud.&lt;/p>
&lt;p>&lt;a href="https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/programacion-funcional/ejercicio5.ipynb" class="btn btn-info">Solución&lt;/a>&lt;/p>
&lt;h2 id="ejercicio-6">Ejercicio 6&lt;/h2>
&lt;p>Escribir una función reciba una lista de notas y devuelva la lista de calificaciones correspondientes a esas notas.&lt;/p>
&lt;p>&lt;a href="https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/programacion-funcional/ejercicio6.ipynb" class="btn btn-info">Solución&lt;/a>&lt;/p>
&lt;h2 id="ejercicio-7">Ejercicio 7&lt;/h2>
&lt;p>Escribir una función reciba un diccionario con las asignaturas y las notas de un alumno y devuelva otro diccionario con las asignaturas en mayúsculas y las calificaciones correspondientes a las notas.&lt;/p>
&lt;p>&lt;a href="https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/programacion-funcional/ejercicio7.ipynb" class="btn btn-info">Solución&lt;/a>&lt;/p>
&lt;h2 id="ejercicio-8">Ejercicio 8&lt;/h2>
&lt;p>Escribir una función reciba un diccionario con las asignaturas y las notas de un alumno y devuelva otro diccionario con las asignaturas en mayúsculas y las calificaciones correspondientes a las notas aprobadas.&lt;/p>
&lt;p>&lt;a href="https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/programacion-funcional/ejercicio8.ipynb" class="btn btn-info">Solución&lt;/a>&lt;/p>
&lt;h2 id="ejercicio-9">Ejercicio 9&lt;/h2>
&lt;p>Escribir una función que calcule el módulo de un vector.&lt;/p>
&lt;p>&lt;a href="https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/programacion-funcional/ejercicio9.ipynb" class="btn btn-info">Solución&lt;/a>&lt;/p>
&lt;h2 id="ejercicio-10">Ejercicio 10&lt;/h2>
&lt;p>Una inmobiliaria de una ciudad maneja una lista de inmuebles como la siguiente:&lt;/p>
&lt;pre>&lt;code class="language-python">[{'año': 2000, 'metros': 100, 'habitaciones': 3, 'garaje': True, 'zona': 'A'},
{'año': 2012, 'metros': 60, 'habitaciones': 2, 'garaje': True, 'zona': 'B'},
{'año': 1980, 'metros': 120, 'habitaciones': 4, 'garaje': False, 'zona': 'A'},
{'año': 2005, 'metros': 75, 'habitaciones': 3, 'garaje': True, 'zona': 'B'},
{'año': 2015, 'metros': 90, 'habitaciones': 2, 'garaje': False, 'zona': 'A'}]
&lt;/code>&lt;/pre>
&lt;p>Construir una función que permita hacer búsqueda de inmuebles en función de un presupuesto dado. La función recibirá como entrada la lista de inmuebles y un precio, y devolverá otra lista con los inmuebles cuyo precio sea menor o igual que el dado. Los inmuebles de la lista que se devuelva deben incorporar un nuevo par a cada diccionario con el precio del inmueble, donde el precio de un inmueble se calcula con las siguiente fórmula en función de la zona:&lt;/p>
&lt;ul>
&lt;li>Zona A: precio = (metros * 1000 + habitaciones * 5000 + garaje * 15000) * (1-antiguedad/100)&lt;/li>
&lt;li>Zona B: precio = (metros * 1000 + habitaciones * 5000 + garaje * 15000) * (1-antiguedad/100) * 1.5&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/programacion-funcional/ejercicio10.ipynb" class="btn btn-info">Solución&lt;/a>&lt;/p>
&lt;h2 id="ejercicio-11">Ejercicio 11&lt;/h2>
&lt;p>Escribir una función que reciba una muestra de números y devuelva los valores atípicos, es decir, los valores cuya puntuación típica sea mayor que 3 o menor que -3.
Nota: La puntuación típica de un valor se obtiene restando la media y dividiendo por la desviación típica de la muestra.&lt;/p>
&lt;p>&lt;a href="https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/programacion-funcional/ejercicio11.ipynb" class="btn btn-info">Solución&lt;/a>&lt;/p></description></item><item><title>Programación funcional</title><link>/docencia/python/manual/programacion-funcional/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docencia/python/manual/programacion-funcional/</guid><description>&lt;h2 id="programación-funcional">Programación funcional&lt;/h2>
&lt;p>En Python las funciones son objetos de primera clase, es decir, que pueden pasarse como argumentos de una función, al igual que el resto de los tipos de datos.&lt;/p>
&lt;pre>&lt;code class="language-python">&amp;gt;&amp;gt;&amp;gt; def aplica(funcion, argumento):
... return funcion(argumento)
...
&amp;gt;&amp;gt;&amp;gt; def cuadrado(n):
... return n*n
...
&amp;gt;&amp;gt;&amp;gt; def cubo(n):
... return n**3
...
&amp;gt;&amp;gt;&amp;gt; aplica(cuadrado, 5)
25
&amp;gt;&amp;gt;&amp;gt; aplica(cubo, 5)
125
&lt;/code>&lt;/pre>
&lt;h3 id="funciones-anónimas-lambda">Funciones anónimas (&lt;code>lambda&lt;/code>)&lt;/h3>
&lt;p>Existe un tipo especial de funciones que no tienen nombre asociado y se conocen como &lt;strong>funciones anónimas&lt;/strong> o &lt;strong>funciones lambda&lt;/strong>.&lt;/p>
&lt;p>La sintaxis para definir una función anónima es&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>lambda &amp;lt;parámetros&amp;gt; : &amp;lt;expresión&amp;gt;&lt;/code>&lt;/p>
&lt;/blockquote>
&lt;p>Estas funciones se suelen asociar a una variable o parámetro desde la que hacer la llamada.&lt;/p>
&lt;pre>&lt;code class="language-python">&amp;gt;&amp;gt;&amp;gt; area = lambda base, altura : base * altura
&amp;gt;&amp;gt;&amp;gt; area(4, 5)
10
&lt;/code>&lt;/pre>
&lt;h3 id="aplicar-una-función-a-todos-los-elementos-de-una-colección-iterable-map">Aplicar una función a todos los elementos de una colección iterable (&lt;code>map&lt;/code>)&lt;/h3>
&lt;p>&lt;code>map(f, c)&lt;/code> : Devuelve una objeto iterable con los resultados de aplicar la función &lt;code>f&lt;/code> a los elementos de la colección &lt;code>c&lt;/code>. Si la función &lt;code>f&lt;/code> requiere &lt;code>n&lt;/code> argumentos entonces deben pasarse &lt;code>n&lt;/code> colecciones con los argumentos. Para convertir el objeto en una lista, tupla o diccionario hay que aplicar explícitamente las funciones &lt;code>list()&lt;/code>, &lt;code>tuple()&lt;/code> o &lt;code>dic()&lt;/code> respectivamente.&lt;/p>
&lt;pre>&lt;code class="language-python">&amp;gt;&amp;gt;&amp;gt; def cuadrado(n):
... return n * n
...
&amp;gt;&amp;gt;&amp;gt; list(map(cuadrado, [1, 2, 3])
[1, 4, 9]
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-python">&amp;gt;&amp;gt;&amp;gt; def rectangulo(a, b):
... return a * b
...
&amp;gt;&amp;gt;&amp;gt; tuple(map(rectangulo, (1, 2, 3), (4, 5, 6)))
(4, 10, 18)
&lt;/code>&lt;/pre>
&lt;h3 id="filtrar-los-elementos-de-una-colección-iterable-filter">Filtrar los elementos de una colección iterable (filter)&lt;/h3>
&lt;p>&lt;code>filter(f, c)&lt;/code> : Devuelve una objeto iterable con los elementos de la colección &lt;code>c&lt;/code> que devuelven &lt;code>True&lt;/code> al aplicarles la función &lt;code>f&lt;/code>. Para convertir el objeto en una lista, tupla o diccionario hay que aplicar explícitamente las funciones &lt;code>list()&lt;/code>, &lt;code>tuple()&lt;/code> o &lt;code>dic()&lt;/code> respectivamente.&lt;/p>
&lt;p>&lt;i class="fa fa-exclamation-triangle" style="color:red;">&lt;/i> &lt;code>f&lt;/code> debe ser una función que recibe un argumento y devuelve un valor booleano.&lt;/p>
&lt;pre>&lt;code class="language-python">&amp;gt;&amp;gt;&amp;gt; def par(n):
... return n % 2 == 0
...
&amp;gt;&amp;gt;&amp;gt; list(filter(par, range(10))
[0, 2, 4, 6, 8]
&lt;/code>&lt;/pre>
&lt;h3 id="combinar-los-elementos-de-varias-colecciones-iterables-zip">Combinar los elementos de varias colecciones iterables (&lt;code>zip&lt;/code>)&lt;/h3>
&lt;p>&lt;code>zip(c1, c2, ...)&lt;/code> : Devuelve un objeto iterable cuyos elementos son tuplas formadas por los elementos que ocupan la misma posición en las colecciones &lt;code>c1&lt;/code>, &lt;code>c2&lt;/code>, etc. El número de elementos de las tuplas es el número de colecciones que se pasen. Para convertir el objeto en una lista, tupla o diccionario hay que aplicar explícitamente las funciones &lt;code>list()&lt;/code>, &lt;code>tuple()&lt;/code> o &lt;code>dic()&lt;/code> respectivamente.&lt;/p>
&lt;pre>&lt;code class="language-python">&amp;gt;&amp;gt;&amp;gt; asignaturas = ['Matemáticas', 'Física', 'Química', 'Economía']
&amp;gt;&amp;gt;&amp;gt; notas = [6.0, 3.5, 7.5, 8.0]
&amp;gt;&amp;gt;&amp;gt; list(zip(asignaturas, notas))
[('Matemáticas', 6.0), ('Física', 3.5), ('Química', 7.5), ('Economía', 8.0)]
&amp;gt;&amp;gt;&amp;gt; dict(zip(asignaturas, notas[:3]))
{'Matemáticas': 6.0, 'Física': 3.5, 'Química': 7.5}
&lt;/code>&lt;/pre>
&lt;h3 id="operar-todos-los-elementos-de-una-colección-iterable-reduce">Operar todos los elementos de una colección iterable (&lt;code>reduce&lt;/code>)&lt;/h3>
&lt;p>&lt;code>reduce(f, l)&lt;/code> : Aplicar la función &lt;code>f&lt;/code> a los dos primeros elementos de la secuencia &lt;code>l&lt;/code>. Con el valor obtenido vuelve a aplicar la función &lt;code>f&lt;/code> a ese valor y el siguiente de la secuencia, y así hasta que no quedan más elementos en la lista. Devuelve el valor resultado de la última aplicación de la función &lt;code>f&lt;/code>.&lt;/p>
&lt;p>La función &lt;code>reduce&lt;/code> está definida en el módulo &lt;code>functools&lt;/code>.&lt;/p>
&lt;pre>&lt;code class="language-python">&amp;gt;&amp;gt;&amp;gt; from functools import reduce
&amp;gt;&amp;gt;&amp;gt; def producto(n, m):
... return n * m
...
&amp;gt;&amp;gt;&amp;gt; reduce(producto, range(1, 5))
24
&lt;/code>&lt;/pre></description></item></channel></rss>