<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Listas | Aprende con Alf</title>
    <link>/tag/listas/</link>
      <atom:link href="/tag/listas/index.xml" rel="self" type="application/rss+xml" />
    <description>Listas</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>es-es</language><lastBuildDate>Thu, 01 Jan 1970 01:33:39 +0100</lastBuildDate>
    <image>
      <url>/images/logo_hude38443eeb2faa5fa84365aba7d86a77_3514_300x300_fit_lanczos_3.png</url>
      <title>Listas</title>
      <link>/tag/listas/</link>
    </image>
    
    <item>
      <title>Ejercicios de Listas y Tuplas</title>
      <link>/docencia/python/ejercicios/listas-tuplas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/ejercicios/listas-tuplas/</guid>
      <description>&lt;h2 id=&#34;ejercicio-1&#34;&gt;Ejercicio 1&lt;/h2&gt;
&lt;p&gt;Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matemáticas, Física, Química, Historia y Lengua) en una lista y la muestre por pantalla.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/listas-tuplas/ejercicio1.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-2&#34;&gt;Ejercicio 2&lt;/h2&gt;
&lt;p&gt;Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matemáticas, Física, Química, Historia y Lengua) en una lista y la muestre por pantalla el mensaje &lt;code&gt;Yo estudio &amp;lt;asignatura&amp;gt;&lt;/code&gt;, donde &lt;code&gt;&amp;lt;asignatura&amp;gt;&lt;/code&gt; es cada una de las asignaturas de la lista.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/listas-tuplas/ejercicio2.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-3&#34;&gt;Ejercicio 3&lt;/h2&gt;
&lt;p&gt;Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matemáticas, Física, Química, Historia y Lengua) en una lista, pregunte al usuario la nota que ha sacado en cada asignatura, y después las muestre por pantalla con el mensaje &lt;code&gt;En &amp;lt;asignatura&amp;gt; has sacado &amp;lt;nota&amp;gt;&lt;/code&gt; donde &lt;code&gt;&amp;lt;asignatura&amp;gt;&lt;/code&gt; es cada una des las asignaturas de la lista y &lt;code&gt;&amp;lt;nota&amp;gt;&lt;/code&gt; cada una de las correspondientes notas introducidas por el usuario.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/listas-tuplas/ejercicio3.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-4&#34;&gt;Ejercicio 4&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pregunte al usuario los números ganadores de la lotería primitiva, los almacene en una lista y los muestre por pantalla ordenados de menor a mayor.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/listas-tuplas/ejercicio4.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-5&#34;&gt;Ejercicio 5&lt;/h2&gt;
&lt;p&gt;Escribir un programa que almacene en una lista los números del 1 al 10 y los muestre por pantalla en orden inverso separados por comas.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/listas-tuplas/ejercicio5.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-6&#34;&gt;Ejercicio 6&lt;/h2&gt;
&lt;p&gt;Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matemáticas, Física, Química, Historia y Lengua) en una lista, pregunte al usuario la nota que ha sacado en cada asignatura y elimine de la lista las asignaturas aprobadas. Al final el programa debe mostrar por pantalla las asignaturas que el usuario tiene que repetir.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/listas-tuplas/ejercicio6.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-7&#34;&gt;Ejercicio 7&lt;/h2&gt;
&lt;p&gt;Escribir un programa que almacene el abecedario en una lista, elimine de la lista las letras que ocupen posiciones múltiplos de 3, y muestre por pantalla la lista resultante.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/listas-tuplas/ejercicio7.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-8&#34;&gt;Ejercicio 8&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pida al usuario una palabra y muestre por pantalla si es un palíndromo.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/listas-tuplas/ejercicio8.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-9&#34;&gt;Ejercicio 9&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pida al usuario una palabra y muestre por pantalla el número de veces que contiene cada vocal.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/listas-tuplas/ejercicio9.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-10&#34;&gt;Ejercicio 10&lt;/h2&gt;
&lt;p&gt;Escribir un programa que almacene en una lista los siguientes precios, 50, 75, 46, 22, 80, 65, 8, y muestre por pantalla el menor y el mayor de los precios.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/listas-tuplas/ejercicio10.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-11&#34;&gt;Ejercicio 11&lt;/h2&gt;
&lt;p&gt;Escribir un programa que almacene los vectores (1,2,3) y (-1,0,2) en dos listas y muestre por pantalla su producto escalar.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/listas-tuplas/ejercicio11.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-12&#34;&gt;Ejercicio 12&lt;/h2&gt;
&lt;p&gt;Escribir un programa que almacene las matrices
$$
A = \left(
\begin{array}{rrr}
1 &amp;amp; 2 &amp;amp; 3\newline
4 &amp;amp; 5 &amp;amp; 6
\end{array}
\right)
\quad  y
\quad
B = \left(
\begin{array}{rr}
-1 &amp;amp; 0\newline
0 &amp;amp; 1\newline
1 &amp;amp; 1
\end{array}
\right)
$$&lt;/p&gt;
&lt;p&gt;en una lista y muestre por pantalla su producto.&lt;br&gt;
Nota: Para representar matrices mediante listas usar listas anidadas, representando cada vector fila en una lista.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/listas-tuplas/ejercicio12.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-13&#34;&gt;Ejercicio 13&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pregunte por una muestra de números, separados por comas, los guarde en una lista y muestre por pantalla su media y desviación típica.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/listas-tuplas/ejercicio13.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Listas</title>
      <link>/docencia/python/manual/listas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/manual/listas/</guid>
      <description>&lt;h2 id=&#34;listas&#34;&gt;Listas&lt;/h2&gt;
&lt;p&gt;Una &lt;strong&gt;lista&lt;/strong&gt; es una secuencias ordenadas de objetos de distintos tipos.&lt;/p&gt;
&lt;p&gt;Se construyen poniendo los elementos entre corchetes &lt;code&gt;[&lt;/code&gt;  &lt;code&gt;]&lt;/code&gt; separados por comas.&lt;/p&gt;
&lt;p&gt;Se caracterizan por:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tienen orden.&lt;/li&gt;
&lt;li&gt;Pueden contener elementos de distintos tipos.&lt;/li&gt;
&lt;li&gt;Son mutables, es decir, pueden alterarse durante la ejecución de un programa.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Lista vacía
&amp;gt;&amp;gt;&amp;gt; type([])
&amp;lt;class &#39;list&#39;&amp;gt;
# Lista con elementos de distintos tipos
&amp;gt;&amp;gt;&amp;gt; [1, &amp;quot;dos&amp;quot;, True]
# Listas anidadas
&amp;gt;&amp;gt;&amp;gt; [1, [2, 3], 4]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;creación-de-listas-mediante-la-función-list&#34;&gt;Creación de listas mediante la función &lt;code&gt;list()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Otra forma de crear listas es mediante la función &lt;code&gt;list()&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list(c)&lt;/code&gt; : Crea una lista con los elementos de la secuencia o colección &lt;code&gt;c&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Se pueden indicar los elementos separados por comas, mediante una cadena, o mediante una colección de elementos iterable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; list()
[]
&amp;gt;&amp;gt;&amp;gt; list(1, 2, 3)
[1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; list(&amp;quot;Python&amp;quot;)
[&#39;P&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;, &#39;n&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;acceso-a-los-elementos-de-una-lista&#34;&gt;Acceso a los elementos de una lista&lt;/h3&gt;
&lt;p&gt;Se utilizan los mismos operadores de acceso que para cadenas de caracteres.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;l[i]&lt;/code&gt; : Devuelve el elemento de la lista &lt;code&gt;l&lt;/code&gt; con el índice &lt;code&gt;i&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;i class=&#34;fa fa-exclamation-triangle&#34; style=&#34;color:red;&#34;&gt;&lt;/i&gt; &lt;em&gt;El índice del primer elemento de la lista es 0.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = [&#39;P&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;, &#39;n&#39;]
&amp;gt;&amp;gt;&amp;gt; a[0]
&#39;P&#39;
&amp;gt;&amp;gt;&amp;gt; a[5]
&#39;n&#39;
&amp;gt;&amp;gt;&amp;gt; a[6]
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
IndexError: list index out of range
&amp;gt;&amp;gt;&amp;gt; a[-1]
&#39;n&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;sublistas&#34;&gt;Sublistas&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;l[i:j:k]&lt;/code&gt; : Devuelve la sublista desde el elemento de &lt;code&gt;l&lt;/code&gt; con el índice &lt;code&gt;i&lt;/code&gt; hasta el elemento anterior al índice &lt;code&gt;j&lt;/code&gt;, tomando elementos cada &lt;code&gt;k&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = [&#39;P&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;, &#39;n&#39;]
&amp;gt;&amp;gt;&amp;gt; a[1:4]
[&#39;y&#39;, &#39;t&#39;, &#39;h&#39;]
&amp;gt;&amp;gt;&amp;gt; a[1:1]
[]
&amp;gt;&amp;gt;&amp;gt; a[:-3]
[&#39;y&#39;, &#39;t&#39;, &#39;h&#39;]
&amp;gt;&amp;gt;&amp;gt; a[:]
[&#39;P&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;, &#39;n&#39;]
&amp;gt;&amp;gt;&amp;gt; a[0:6:2]
[&#39;P&#39;, &#39;t&#39;, &#39;o&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;operaciones-que-no-modifican-una-lista&#34;&gt;Operaciones que no modifican una lista&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;len(l)&lt;/code&gt; : Devuelve el número de elementos de la lista &lt;code&gt;l&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min(l)&lt;/code&gt; : Devuelve el mínimo elemento de la lista &lt;code&gt;l&lt;/code&gt; siempre que los datos sean comparables.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max(l)&lt;/code&gt; : Devuelve el máximo elemento de la lista &lt;code&gt;l&lt;/code&gt; siempre que los datos sean comparables.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sum(l)&lt;/code&gt; : Devuelve la suma de los elementos de la lista &lt;code&gt;l&lt;/code&gt;, siempre que los datos se puedan sumar.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dato in l&lt;/code&gt; : Devuelve &lt;code&gt;True&lt;/code&gt; si el dato &lt;code&gt;dato&lt;/code&gt; pertenece a la lista &lt;code&gt;l&lt;/code&gt; y &lt;code&gt;False&lt;/code&gt; en caso contrario.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l.index(dato)&lt;/code&gt; : Devuelve la posición que ocupa en la lista &lt;code&gt;l&lt;/code&gt; el primer elemento con valor &lt;code&gt;dato&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l.count(dato)&lt;/code&gt; : Devuelve el número de veces que el valor &lt;code&gt;dato&lt;/code&gt; está contenido en la lista &lt;code&gt;l&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;all(l)&lt;/code&gt; : Devuelve &lt;code&gt;True&lt;/code&gt; si todos los elementos de la lista &lt;code&gt;l&lt;/code&gt; son &lt;code&gt;True&lt;/code&gt; y &lt;code&gt;False&lt;/code&gt; en caso contrario.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;any(l)&lt;/code&gt; : Devuelve &lt;code&gt;True&lt;/code&gt; si algún elemento de la lista &lt;code&gt;l&lt;/code&gt; es &lt;code&gt;True&lt;/code&gt; y &lt;code&gt;False&lt;/code&gt; en caso contrario.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = [1, 2, 2, 3]
&amp;gt;&amp;gt;&amp;gt; len(a)
4
&amp;gt;&amp;gt;&amp;gt; min(a)
1
&amp;gt;&amp;gt;&amp;gt; max(a)
3
&amp;gt;&amp;gt;&amp;gt; sum(a)
8
&amp;gt;&amp;gt;&amp;gt; 3 in a
True
&amp;gt;&amp;gt;&amp;gt; a.index(2)
1
&amp;gt;&amp;gt;&amp;gt; a.count(2)
2
&amp;gt;&amp;gt;&amp;gt; all(a)
True
&amp;gt;&amp;gt;&amp;gt; any([0, False, 3&amp;lt;2])
False
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;operaciones-que-modifican-una-lista&#34;&gt;Operaciones que modifican una lista&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;l1 + l2&lt;/code&gt; : Crea una nueva lista concatenan los elementos de la listas &lt;code&gt;l1&lt;/code&gt; y &lt;code&gt;l2&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l.append(dato)&lt;/code&gt; : Añade &lt;code&gt;dato&lt;/code&gt; al final de la lista &lt;code&gt;l&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l.extend(sequencia)&lt;/code&gt; : Añade los datos de &lt;code&gt;sequencia&lt;/code&gt; al final de la lista &lt;code&gt;l&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l.insert(índice, dato)&lt;/code&gt; : Inserta &lt;code&gt;dato&lt;/code&gt; en la posición &lt;code&gt;índice&lt;/code&gt; de la lista &lt;code&gt;l&lt;/code&gt; y desplaza los elementos una posición a partir de la posición &lt;code&gt;índice&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l.remove(dato)&lt;/code&gt; : Elimina el primer elemento con valor &lt;code&gt;dato&lt;/code&gt; en la lista &lt;code&gt;l&lt;/code&gt; y desplaza los que están por detrás de él una posición hacia delante.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l.pop([índice])&lt;/code&gt; : Devuelve el dato en la posición &lt;code&gt;índice&lt;/code&gt; y lo elimina de la lista &lt;code&gt;l&lt;/code&gt;, desplazando los elementos por detrás de él una posición hacia delante.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l.sort()&lt;/code&gt; : Ordena los elementos de la lista &lt;code&gt;l&lt;/code&gt; de acuerdo al orden predefinido, siempre que los elementos sean comparables.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l.reverse()&lt;/code&gt; : invierte el orden de los elementos de la lista &lt;code&gt;l&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = [1, 3]
&amp;gt;&amp;gt;&amp;gt; b = [2 , 4, 6]
&amp;gt;&amp;gt;&amp;gt; a.append(5)
&amp;gt;&amp;gt;&amp;gt; a
[1, 3, 5]
&amp;gt;&amp;gt;&amp;gt; a.remove(3)
&amp;gt;&amp;gt;&amp;gt; a
[1, 5]
&amp;gt;&amp;gt;&amp;gt; a.insert(1, 3)
&amp;gt;&amp;gt;&amp;gt; a
[1, 3, 5]
&amp;gt;&amp;gt;&amp;gt; b.pop()
6
&amp;gt;&amp;gt;&amp;gt; c = a + b
&amp;gt;&amp;gt;&amp;gt; c
[1, 3, 5, 2, 4]
&amp;gt;&amp;gt;&amp;gt; c.sort()
&amp;gt;&amp;gt;&amp;gt; c
[1, 2, 3, 4, 5]
&amp;gt;&amp;gt;&amp;gt; c.reverse()
&amp;gt;&amp;gt;&amp;gt; c
[5, 4, 3, 2, 1]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;copia-de-listas&#34;&gt;Copia de listas&lt;/h3&gt;
&lt;p&gt;Existen dos formas de copiar listas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Copia por referencia&lt;/strong&gt; &lt;code&gt;l1 = l2&lt;/code&gt;: Asocia la la variable &lt;code&gt;l1&lt;/code&gt; la misma lista que tiene asociada la variable &lt;code&gt;l2&lt;/code&gt;, es decir, ambas variables apuntan a la misma dirección de memoria. Cualquier cambio que hagamos a través de &lt;code&gt;l1&lt;/code&gt; o &lt;code&gt;l2&lt;/code&gt; afectará a la misma lista.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Copia por valor&lt;/strong&gt; &lt;code&gt;l1 = list(l2)&lt;/code&gt;: Crea una copia de la lista asociada a &lt;code&gt;l2&lt;/code&gt; en una dirección de memoria diferente y se la asocia a &lt;code&gt;l1&lt;/code&gt;. Las variables apuntan a direcciones de memoria diferentes que contienen los mismos datos. Cualquier cambio que hagamos a través de &lt;code&gt;l1&lt;/code&gt; no afectará a la lista de &lt;code&gt;l2&lt;/code&gt; y viceversa.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; # copia por referencia
&amp;gt;&amp;gt;&amp;gt; b = a
&amp;gt;&amp;gt;&amp;gt; b
[1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; b.remove(2)
&amp;gt;&amp;gt;&amp;gt; b
[1, 3]
&amp;gt;&amp;gt;&amp;gt; a
[1, 3]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; # copia por referencia
&amp;gt;&amp;gt;&amp;gt; b = list(a)
&amp;gt;&amp;gt;&amp;gt; b
[1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; b.remove(2)
&amp;gt;&amp;gt;&amp;gt; b
[1, 3]
&amp;gt;&amp;gt;&amp;gt; a
[1, 2, 3]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Ajedrez</title>
      <link>/docencia/python/retos/ajedrez/</link>
      <pubDate>Thu, 01 Jan 1970 01:33:39 +0100</pubDate>
      <guid>/docencia/python/retos/ajedrez/</guid>
      <description>&lt;h2 id=&#34;tarea-1&#34;&gt;Tarea 1&lt;/h2&gt;
&lt;p&gt;La primera tarea consiste en escribir un programa que guarde en un fichero la secuencia de tableros de una partida de ajedrez. Partiremos del tablero inicial donde las filas del tablero están separadas por cambios de línea y las columnas por tabuladores.&lt;/p&gt;
&lt;p&gt;El programa debe guardar el tablero inicial en un fichero con el nombre que elija el usuario. Después debe preguntar al usuario si quiere hacer un movimiento o terminar la partida. Cada vez que el usuario quiera hacer un nuevo movimiento debe preguntar la fila y la columna de la pieza que quiere mover y la fila y la columna a la que la quiere mover. Tras ello añadirá el tablero resultante al final del fichero anterior.&lt;/p&gt;
&lt;p&gt;El fichero 
&lt;a href=&#34;doc/partida-ajedrez.txt&#34;&gt;partida-ajedrez.txt&lt;/a&gt; contiene un ejemplo con el fichero resultante de una partida con 3 movimientos.&lt;/p&gt;
&lt;h2 id=&#34;tarea-2&#34;&gt;Tarea 2&lt;/h2&gt;
&lt;p&gt;Una vez generado el fichero con los tableros sucesivos de una partida de ajedrez, el programa preguntará por un movimiento y mostrará por pantalla el tablero correspondiente ese movimiento.
Por ejemplo, utilizando el fichero 
&lt;a href=&#34;doc/partida-ajedrez.txt&#34;&gt;partida-ajedrez.txt&lt;/a&gt;, si el usuario introduce el movimiento 2, debería mostrar por pantalla el siguiente tablero:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;♜	♞	♝	♛	♚	♝	♞	♜
♟	♟	♟		♟	♟	♟	♟
							
			♟				
						♙	
							
♙	♙	♙	♙	♙	♙		♙
♖	♘	♗	♕	♔	♗	♘	♖
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;solución&#34;&gt;Solución&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/retos/soluciones/ajedrez.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Laberinto</title>
      <link>/docencia/python/retos/laberinto/</link>
      <pubDate>Thu, 01 Jan 1970 01:33:39 +0100</pubDate>
      <guid>/docencia/python/retos/laberinto/</guid>
      <description>&lt;h2 id=&#34;tarea-1&#34;&gt;Tarea 1&lt;/h2&gt;
&lt;p&gt;La primera tarea consiste en construir un laberinto como el de la siguiente figura.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/laberinto.png&#34; alt=&#34;Laberinto&#34;&gt;&lt;/p&gt;
&lt;p&gt;El laberinto se representará como una una lista de listas, donde cada lista es una fila del laberinto y cada casilla se representará con un espacio &amp;rsquo; &amp;rsquo; si hay paso o con la letra &amp;lsquo;X&amp;rsquo; si hay un muro, tal y como se muestra a continuación:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;laberinto = [
    [&#39; &#39;, &#39;X&#39;, &#39;X&#39;, &#39;X&#39;, &#39;X&#39;], 
    [&#39; &#39;, &#39;X&#39;, &#39; &#39;, &#39; &#39;, &#39; &#39;],
    [&#39; &#39;, &#39;X&#39;, &#39; &#39;, &#39;X&#39;, &#39; &#39;], 
    [&#39; &#39;, &#39; &#39;, &#39; &#39;, &#39;X&#39;, &#39; &#39;], 
    [&#39;X&#39;, &#39;X&#39;, &#39;X&#39;, &#39;X&#39;, &#39;S&#39;]
    ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El laberinto se debe crear a partir de una tupla con las coordenadas de las casillas donde hay muro, como la siguiente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;muro = ((0,1), (0,2), (0,3), (0,4), (1,1), (2,1), (2,3), (3,3), (4,0), (4,1), (4,2), (4,3))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;tarea-2&#34;&gt;Tarea 2&lt;/h2&gt;
&lt;p&gt;La segunda tarea a resolver consiste en construir un programa para recorrer el laberinto desde la entrada a la salida. La entrada siempre está en la esquina superior izquierda y la salida en la esquina inferior derecha.&lt;/p&gt;
&lt;p&gt;El programa debe devolver una lista con la secuencia de movimientos para ir de la entrada a la salida del laberinto, tal y como se muestra a continuación:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;[&#39;Abajo&#39;, &#39;Abajo&#39;, &#39;Abajo&#39;, &#39;Abajo&#39;, &#39;Derecha&#39;, &#39;Derecha&#39;, &#39;Arriba&#39;, &#39;Arriba&#39;, &#39;Derecha&#39;, &#39;Derecha&#39;, &#39;Abajo&#39;, &#39;Abajo&#39;, &#39;Abajo&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;solución&#34;&gt;Solución&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/retos/soluciones/laberinto.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
