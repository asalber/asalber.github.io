<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pandas | Aprende con Alf</title>
    <link>/tag/pandas/</link>
      <atom:link href="/tag/pandas/index.xml" rel="self" type="application/rss+xml" />
    <description>Pandas</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>es-es</language>
    <image>
      <url>/images/logo_hude38443eeb2faa5fa84365aba7d86a77_3514_300x300_fit_lanczos_3.png</url>
      <title>Pandas</title>
      <link>/tag/pandas/</link>
    </image>
    
    <item>
      <title>Ejercicios de la Librería Pandas</title>
      <link>/docencia/python/ejercicios/pandas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/ejercicios/pandas/</guid>
      <description>&lt;h2 id=&#34;ejercicio-1&#34;&gt;Ejercicio 1&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pregunte al usuario por las ventas de un rango de años y muestre por pantalla una serie con los datos de las ventas indexada por los años, antes y después de aplicarles un descuento del 10%.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/pandas/ejercicio1.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-2&#34;&gt;Ejercicio 2&lt;/h2&gt;
&lt;p&gt;Escribir una función que reciba un diccionario con las notas de los alumno de un curso y devuelva una serie con la nota mínima, la máxima, media y la desviación típica.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/pandas/ejercicio2.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-3&#34;&gt;Ejercicio 3&lt;/h2&gt;
&lt;p&gt;Escribir una función que reciba un diccionario con las notas de los alumnos de un curso y devuelva una serie con las notas de los alumnos aprobados ordenadas de mayor a menor.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/pandas/ejercicio3.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-4&#34;&gt;Ejercicio 4&lt;/h2&gt;
&lt;p&gt;Escribir programa que genere y muestre por pantalla un DataFrame con los datos de la tabla siguiente:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Mes&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;Ventas&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;Gastos&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Enero&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;30500&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;22000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Febrero&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;35600&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;23400&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Marzo&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;28300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;18100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Abril&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;33900&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;20700&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/pandas/ejercicio4.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-5&#34;&gt;Ejercicio 5&lt;/h2&gt;
&lt;p&gt;Escribir una función que reciba un DataFrame con el formato del ejercicio anterior, una lista de meses, y devuelva el balance (ventas - gastos) total en los meses indicados.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/pandas/ejercicio5.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-6&#34;&gt;Ejercicio 6&lt;/h2&gt;
&lt;p&gt;El fichero 
&lt;a href=&#34;../soluciones/pandas/cotizacion.csv&#34;&gt;&lt;code&gt;cotizacion.csv&lt;/code&gt;&lt;/a&gt; contiene las cotizaciones de las empresas del IBEX35 con las siguientes columnas: &lt;code&gt;nombre&lt;/code&gt; (nombre de la empresa), &lt;code&gt;Final&lt;/code&gt; (precio de la acción al cierre de bolsa), &lt;code&gt;Máximo&lt;/code&gt; (precio máximo de la acción durante la jornada), &lt;code&gt;Mínimo&lt;/code&gt; (precio mínimo de la acción durante la jornada), &lt;code&gt;volumen&lt;/code&gt; (Volumen al cierre de bolsa), &lt;code&gt;Efectivo&lt;/code&gt; (capitalización al cierre en miles de euros). Construir una función que construya un DataFrame a partir del un fichero con el formato anterior y devuelva otro DataFrame con el mínimo, el máximo y la media de dada columna.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/pandas/ejercicio6.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-7&#34;&gt;Ejercicio 7&lt;/h2&gt;
&lt;p&gt;El fichero 
&lt;a href=&#34;../soluciones/pandas/titanic.csv&#34;&gt;titanic.csv&lt;/a&gt; contiene información sobre los pasajeros del Titanic. Escribir un programa con los siguientes requisitos:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Generar un DataFrame con los datos del fichero.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla las dimensiones del DataFrame, el número de datos que contiene, los nombres de sus columnas y filas, los tipos de datos de las columnas, las 10 primeras filas y las 10 últimas filas&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla los datos del pasajero con identificador 148.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla las filas pares del DataFrame.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla los nombres de las personas que iban en primera clase ordenadas alfabéticamente.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla el porcentaje de personas que sobrevivieron y murieron.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla el porcentaje de personas que sobrevivieron en cada clase.&lt;/li&gt;
&lt;li&gt;Eliminar del DataFrame los pasajeros con edad desconocida.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla la edad media de las mujeres que viajaban en cada clase.&lt;/li&gt;
&lt;li&gt;Añadir una nueva columna booleana para ver si el pasajero era menor de edad o no.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla el porcentaje de menores y mayores de edad que sobrevivieron en cada clase.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/pandas/ejercicio7.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-8&#34;&gt;Ejercicio 8&lt;/h2&gt;
&lt;p&gt;Los ficheros 
&lt;a href=&#34;../soluciones/pandas/emisiones-2016.csv&#34;&gt;emisiones-2016.csv&lt;/a&gt;, 
&lt;a href=&#34;../soluciones/pandas/emisiones-2017.csv&#34;&gt;emisiones-2017.csv&lt;/a&gt;, 
&lt;a href=&#34;../soluciones/pandas/emisiones-2018.csv&#34;&gt;emisiones-2018.csv&lt;/a&gt; y 
&lt;a href=&#34;../soluciones/pandas/emisiones-2019.csv&#34;&gt;emisiones-2019.csv&lt;/a&gt;, contienen datos sobre las emisiones contaminates en la ciudad de Madrid en los años 2016, 2017, 2018 y 2019 respectivamente. Escribir un programa con los siguientes requisitos:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Generar un DataFrame con los datos de los cuatro ficheros.&lt;/li&gt;
&lt;li&gt;Filtrar las columnas del DataFrame para quedarse con las columnas ESTACION, MAGNITUD, AÑO, MES y las correspondientes a los días D01, D02, etc.&lt;/li&gt;
&lt;li&gt;Reestructurar el DataFrame para que los valores de los contaminantes de las columnas de los días aparezcan en una única columna.&lt;/li&gt;
&lt;li&gt;Añadir una columna con la fecha a partir de la concatenación del año, el mes y el día (usar el módulo &lt;code&gt;datetime&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Eliminar las filas con fechas no válidas (utilizar la función &lt;code&gt;isnat&lt;/code&gt; del módulo &lt;code&gt;numpy&lt;/code&gt;) y ordenar el DataFrame por estaciones, contaminantes y fecha.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla las estaciones y los contaminantes disponibles en el DataFrame.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba una estación, un contaminante y un rango de fechas y devuelva una serie con las emisiones del contaminante dado en la estación y rango de fechas dado.&lt;/li&gt;
&lt;li&gt;Mostrar un resumen descriptivo (mímino, máximo, media, etc) para cada contaminante.&lt;/li&gt;
&lt;li&gt;Mostrar un resumen descriptivo para cada contaminente por distritos.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba una estación y un contaminante y devuelva un resumen descriptivo de las emisiones del contaminante indicado en la estadión indicada.&lt;/li&gt;
&lt;li&gt;Crear una función que devuelva las emisiones medias mensuales de un contaminante y un año dados para todos las estaciones.&lt;/li&gt;
&lt;li&gt;Crear un función que reciba una estación de medición y devuelva un DataFrame con las medias mensuales de los distintos tipos de contaminantes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/pandas/ejercicio8.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>La librería Pandas</title>
      <link>/docencia/python/manual/pandas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/manual/pandas/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://pandas.pydata.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pandas&lt;/a&gt; es una librería de Python especializada en el manejo y análisis de estructuras de datos.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/pandas-logo.png&#34; alt=&#34;Logo librería Pandas&#34;&gt;&lt;/p&gt;
&lt;p&gt;Las principales características de esta librería son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Define nuevas estructuras de datos basadas en los arrays de la librería NumPy pero con nuevas funcionalidades.&lt;/li&gt;
&lt;li&gt;Permite leer y escribir fácilmente ficheros en formato CSV, Excel y bases de datos SQL.&lt;/li&gt;
&lt;li&gt;Permite acceder a los datos mediante índices o nombres para filas y columnas.&lt;/li&gt;
&lt;li&gt;Ofrece métodos para reordenar, dividir y combinar conjuntos de datos.&lt;/li&gt;
&lt;li&gt;Permite trabajar con series temporales.&lt;/li&gt;
&lt;li&gt;Realiza todas estas operaciones de manera muy eficiente.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tipos-de-datos-de-pandas&#34;&gt;Tipos de datos de Pandas&lt;/h2&gt;
&lt;p&gt;Pandas dispone de tres estructuras de datos diferentes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Series: Estructura de una dimensión.&lt;/li&gt;
&lt;li&gt;DataFrame: Estructura de dos dimensiones (tablas).&lt;/li&gt;
&lt;li&gt;Panel: Estructura de tres dimensiones (cubos).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Estas estructuras se construyen a partir de arrays de la librería NumPy, añadiendo nuevas funcionalidades.&lt;/p&gt;
&lt;h2 id=&#34;la-clase-de-objetos-series&#34;&gt;La clase de objetos Series&lt;/h2&gt;
&lt;p&gt;Son estructuras similares a los arrays de una dimensión. Son homogéneas, es decir, sus elementos tienen que ser del mismo tipo, y su tamaño es inmutable, es decir, no se puede cambiar, aunque si su contenido.&lt;/p&gt;
&lt;p&gt;Dispone de un índice que asocia un nombre a cada elemento del la serie, a través de la cuál se accede al elemento.&lt;/p&gt;
&lt;p&gt;Ejemplo. La siguiente serie contiene las asignaturas de un curso.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/pandas-series.png&#34; alt=&#34;Ejemplo de serie&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;creación-de-una-serie-a-partir-de-una-lista&#34;&gt;Creación de una serie a partir de una lista&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Series(data=lista, index=indices, dtype=tipo)&lt;/code&gt; : Devuelve un objeto de tipo Series con los datos de la lista &lt;code&gt;lista&lt;/code&gt;, las filas especificados en la lista &lt;code&gt;indices&lt;/code&gt; y el tipo de datos indicado en &lt;code&gt;tipo&lt;/code&gt;. Si no se pasa la lista de índices se utilizan como índices los enteros del 0 al $n-1$, done $n$ es el tamaño de la serie. Si no se pasa el tipo de dato se infiere.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; s = pd.Series([&#39;Matemáticas&#39;, &#39;Historia&#39;, &#39;Economía&#39;, &#39;Programación&#39;, &#39;Inglés&#39;], dtype=&#39;string&#39;)
&amp;gt;&amp;gt;&amp;gt; print(s)
0     Matemáticas
1        Historia
2        Economía
3    Programación
4          Inglés
dtype: string
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;creación-de-una-serie-a-partir-de-un-diccionario&#34;&gt;Creación de una serie a partir de un diccionario&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Series(data=diccionario, index=indices)&lt;/code&gt;: Devuelve un objeto de tipo Series con los valores del diccionario &lt;code&gt;diccionario&lt;/code&gt; y las filas especificados en la lista &lt;code&gt;indices&lt;/code&gt;. Si no se pasa la lista de índices se utilizan como índices las claves del diccionario.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; s = pd.Series({&#39;Matemáticas&#39;: 6.0,  &#39;Economía&#39;: 4.5, &#39;Programación&#39;: 8.5})
&amp;gt;&amp;gt;&amp;gt; print(s)
Matemáticas     6.0
Economía        4.5
Programación    8.5
dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;atributos-de-una-serie&#34;&gt;Atributos de una serie&lt;/h2&gt;
&lt;p&gt;Existen varias propiedades o métodos para ver las características de una serie.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;s.size&lt;/code&gt; : Devuelve el número de elementos de la serie &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;s.index&lt;/code&gt; : Devuelve una lista con los nombres de las filas del DataFrame &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;s.dtype&lt;/code&gt; : Devuelve el tipo de datos de los elementos de la serie &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; s = pd.Series([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])
&amp;gt;&amp;gt;&amp;gt; s.size
10
&amp;gt;&amp;gt;&amp;gt; s.index
RangeIndex(start=0, stop=10, step=1)
&amp;gt;&amp;gt;&amp;gt; s.dtype
dtype(&#39;int64&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;acceso-a-los-elementos-de-una-serie&#34;&gt;Acceso a los elementos de una serie&lt;/h2&gt;
&lt;p&gt;El acceso a los elementos de un objeto del tipo Series puede ser a través de posiciones o través de índices (nombres).&lt;/p&gt;
&lt;h3 id=&#34;acceso-por-posición&#34;&gt;Acceso por posición&lt;/h3&gt;
&lt;p&gt;Se realiza de forma similar a como se accede a los elementos de un array.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s[i]&lt;/code&gt; : Devuelve el elemento que ocupa la posición &lt;code&gt;i+1&lt;/code&gt; en la serie &lt;code&gt;s&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s[posiciones]&lt;/code&gt;: Devuelve otra serie con los elementos que ocupan las posiciones de la lista &lt;code&gt;posiciones&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;acceso-por-índice&#34;&gt;Acceso por índice&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s[nombre]&lt;/code&gt; : Devuelve el elemento con el nombre &lt;code&gt;nombre&lt;/code&gt; en el índice.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s[nombres]&lt;/code&gt; : Devuelve otra serie con los elementos correspondientes a los nombres indicadas en la lista &lt;code&gt;nombres&lt;/code&gt; en el índice.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; s[1:3]
Economía        4.5
Programación    8.5
dtype: float64
&amp;gt;&amp;gt;&amp;gt; s[&#39;Economía&#39;]
4.5
&amp;gt;&amp;gt;&amp;gt; s[[&#39;Programación&#39;, &#39;Matemáticas&#39;]]
Programación    8.5
Matemáticas     6.0
dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;resumen-descriptivo-de-una-serie&#34;&gt;Resumen descriptivo de una serie&lt;/h2&gt;
&lt;p&gt;Las siguientes funciones permiten resumir varios aspectos de una serie:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s.count()&lt;/code&gt; : Devuelve el número de elementos que no son nulos ni &lt;code&gt;NaN&lt;/code&gt; en la serie &lt;code&gt;s&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.sum()&lt;/code&gt; : Devuelve la suma de los datos de la serie &lt;code&gt;s&lt;/code&gt; cuando los datos son de un tipo numérico, o la concatenación de ellos cuando son del tipo cadena &lt;code&gt;str&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.cumsum()&lt;/code&gt; : Devuelve una serie con la suma acumulada de los datos de la serie &lt;code&gt;s&lt;/code&gt; cuando los datos son de un tipo numérico.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.value_counts()&lt;/code&gt; : Devuelve una serie con la frecuencia (número de repeticiones) de cada valor de la serie &lt;code&gt;s&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.min()&lt;/code&gt; : Devuelve el menor de los datos de la serie &lt;code&gt;s&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.max()&lt;/code&gt; : Devuelve el mayor de los datos de la serie &lt;code&gt;s&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.mean()&lt;/code&gt; : Devuelve la media de los datos de la serie &lt;code&gt;s&lt;/code&gt; cuando los datos son de un tipo numérico.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.std()&lt;/code&gt; : Devuelve la desviación típica de los datos de la serie &lt;code&gt;s&lt;/code&gt; cuando los datos son de un tipo numérico.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.describe()&lt;/code&gt;: Devuelve una serie con un resumen descriptivo que incluye el número de datos, su suma, el mínimo, el máximo, la media, la desviación típica y los cuartiles.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; s = pd.Series([1, 1, 1, 1, 2, 2, 2, 3, 3, 4])
&amp;gt;&amp;gt;&amp;gt; s.count()
10
&amp;gt;&amp;gt;&amp;gt; s.sum()
20
&amp;gt;&amp;gt;&amp;gt; s.cumsum()
0     1
1     2
2     3
3     4
4     6
5     8
6    10
7    13
8    16
9    20
dtype: int64
&amp;gt;&amp;gt;&amp;gt; s.value_counts()
1    4
2    3
3    2
4    1
dtype: int64
&amp;gt;&amp;gt;&amp;gt; s.value_counts(normalize=True)
1    0.4
2    0.3
3    0.2
4    0.1
dtype: float64
&amp;gt;&amp;gt;&amp;gt; s.min()
1
&amp;gt;&amp;gt;&amp;gt; s.max()
4
&amp;gt;&amp;gt;&amp;gt; s.mean()
2.0
&amp;gt;&amp;gt;&amp;gt; s.std()
1.0540925533894598
&amp;gt;&amp;gt;&amp;gt; s.describe()
count    10.000000
mean      2.000000
std       1.054093
min       1.000000
25%       1.000000
50%       2.000000
75%       2.750000
max       4.000000
dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;aplicar-operaciones-a-una-serie&#34;&gt;Aplicar operaciones a una serie&lt;/h2&gt;
&lt;p&gt;Los operadores binarios (&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, etc.) pueden utilizarse con una serie, y devuelven otra serie con el resultado de aplicar la operación a cada elemento de la serie.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
s = pd.Series([1, 2, 3, 4])
&amp;gt;&amp;gt;&amp;gt; s*2
0    2
1    4
2    6
3    8
dtype: int64
&amp;gt;&amp;gt;&amp;gt; s%2
0    1
1    0
2    1
3    0
dtype: int64
&amp;gt;&amp;gt;&amp;gt; s = pd.Series([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])
&amp;gt;&amp;gt;&amp;gt; s*5
0    aaaaa
1    bbbbb
2    ccccc
dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;aplicar-funciones-a-una-serie&#34;&gt;Aplicar funciones a una serie&lt;/h2&gt;
&lt;p&gt;También es posible aplicar una función a cada elemento de la serie mediante el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s.apply(f)&lt;/code&gt; : Devuelve una serie con el resultado de aplicar la función &lt;code&gt;f&lt;/code&gt; a cada uno de los elementos de la serie &lt;code&gt;s&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; from math import log
&amp;gt;&amp;gt;&amp;gt; s = pd.Series([1, 2, 3, 4])
&amp;gt;&amp;gt;&amp;gt; s.apply(log)
0    0.000000
1    0.693147
2    1.098612
3    1.386294
dtype: float64
&amp;gt;&amp;gt;&amp;gt; s = pd.Series([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])
&amp;gt;&amp;gt;&amp;gt; s.apply(str.upper)
0    A
1    B
2    C
dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;filtrado-de-una-serie&#34;&gt;Filtrado de una serie&lt;/h2&gt;
&lt;p&gt;Para filtrar una serie y quedarse con los valores que cumplen una determinada condición se utiliza el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s[condicion]&lt;/code&gt; : Devuelve una serie con los elementos de la serie &lt;code&gt;s&lt;/code&gt; que se corresponden con el valor &lt;code&gt;True&lt;/code&gt; de la lista booleana &lt;code&gt;condicion&lt;/code&gt;. &lt;code&gt;condicion&lt;/code&gt; debe ser una lista de valores booleanos de la misma longitud que la serie.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; s = pd.Series({&#39;Matemáticas&#39;: 6.0,  &#39;Economía&#39;: 4.5, &#39;Programación&#39;: 8.5})
&amp;gt;&amp;gt;&amp;gt; print(s[s &amp;gt; 5])
Matemáticas     6.0
Programación    8.5
dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ordenar-una-serie&#34;&gt;Ordenar una serie&lt;/h2&gt;
&lt;p&gt;Para ordenar una serie se utilizan los siguientes métodos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;s.sort_values(ascending=booleano&lt;/code&gt;) : Devuelve la serie que resulta de ordenar los valores la serie &lt;code&gt;s&lt;/code&gt;. Si argumento del parámetro &lt;code&gt;ascending&lt;/code&gt; es &lt;code&gt;True&lt;/code&gt; el orden es creciente y si es &lt;code&gt;False&lt;/code&gt; decreciente.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.sort_index(ascending=booleano&lt;/code&gt;) : Devuelve la serie que resulta de ordenar el índice de la serie &lt;code&gt;s&lt;/code&gt;. Si el argumento del parámetro &lt;code&gt;ascending&lt;/code&gt; es &lt;code&gt;True&lt;/code&gt; el orden es creciente y si es &lt;code&gt;False&lt;/code&gt; decreciente.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; s = pd.Series({&#39;Matemáticas&#39;: 6.0,  &#39;Economía&#39;: 4.5, &#39;Programación&#39;: 8.5})
&amp;gt;&amp;gt;&amp;gt; print(s.sort_values())
Economía        4.5
Matemáticas     6.0
Programación    8.5
dtype: float64
&amp;gt;&amp;gt;&amp;gt; print(s.sort_index(ascending = False))
Programación    8.5
Matemáticas     6.0
Economía        4.5
dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;eliminar-los-dados-desconocidos-en-una-serie&#34;&gt;Eliminar los dados desconocidos en una serie&lt;/h2&gt;
&lt;p&gt;Los datos desconocidos representan en Pandas por &lt;code&gt;NaN&lt;/code&gt; y los nulos por &lt;code&gt;None&lt;/code&gt;. Tanto unos como otros suelen ser un problema a la hora de realizar algunos análisis de datos, por lo que es habitual eliminarlos. Para eliminarlos de una serie se utiliza el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s.dropna()&lt;/code&gt; : Elimina los datos desconocidos o nulos de la serie &lt;code&gt;s&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; import numpy as np
&amp;gt;&amp;gt;&amp;gt; s = pd.Series([&#39;a&#39;, &#39;b&#39;, None, &#39;c&#39;, np.NaN,  &#39;d&#39;])
&amp;gt;&amp;gt;&amp;gt; s
0       a
1       b
2    None
3       c
4     NaN
5       d
dtype: object
&amp;gt;&amp;gt;&amp;gt; s.dropna()
0    a
1    b
3    c
5    d
dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;la-clase-de-objetos-dataframe&#34;&gt;La clase de objetos DataFrame&lt;/h2&gt;
&lt;p&gt;Un objeto del tipo DataFrame define un conjunto de datos estructurado en forma de tabla donde cada columna es un objeto de tipo Series, es decir, todos los datos de una misma columna son del mismo tipo, y las filas son registros que pueden contender datos de distintos tipos.&lt;/p&gt;
&lt;p&gt;Un DataFrame contiene dos índices, uno para las filas y otro para las columnas, y se puede acceder a sus elementos mediante los nombres de las filas y las columnas.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ejemplo&lt;/strong&gt;. El siguiente DataFrame contiene información sobre los alumnos de un curso. Cada fila corresponde a un alumno y cada columna a una variable.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/pandas-dataframe.png&#34; alt=&#34;Ejemplo de DataFrame&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;creación-de-un-dataframe-a-partir-de-un-diccionario-de-listas&#34;&gt;Creación de un DataFrame a partir de un diccionario de listas&lt;/h2&gt;
&lt;p&gt;Para crear un DataFrame a partir de un diccionario cuyas claves son los nombres de las columnas y los valores son listas con los datos de las columnas se utiliza el método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DataFrame(data=diccionario, index=filas, columns=columnas, dtype=tipos)&lt;/code&gt; : Devuelve un objeto del tipo DataFrame cuyas columnas son las listas contenidas en los valores del diccionario &lt;code&gt;diccionario&lt;/code&gt;, los nombres de filas indicados en la lista &lt;code&gt;filas&lt;/code&gt;, los nombres de columnas indicados en la lista &lt;code&gt;columnas&lt;/code&gt; y los tipos indicados en la lista &lt;code&gt;tipos&lt;/code&gt;. La lista &lt;code&gt;filas&lt;/code&gt; tiene que tener el mismo tamaño que las listas del diccionario, mientras que las listas &lt;code&gt;columnas&lt;/code&gt; y &lt;code&gt;tipos&lt;/code&gt; tienen que tener el mismo tamaño que el diccionario. Si no se pasa la lista de filas se utilizan como nombres los enteros empezando en 0. Si no se pasa la lista de columnas se utilizan como nombres las claves del diccionario. Si no se pasa la lista de tipos, se infiere.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;i class=&#39;fa fa-exclamation-triangle&#39; style=&#34;color:red&#34;&gt;&lt;/i&gt; Los valores asociados a las claves del diccionario deben ser listas del mismo tamaño.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; datos = {&#39;nombre&#39;:[&#39;María&#39;, &#39;Luis&#39;, &#39;Carmen&#39;, &#39;Antonio&#39;],
... &#39;edad&#39;:[18, 22, 20, 21],
... &#39;grado&#39;:[&#39;Economía&#39;, &#39;Medicina&#39;, &#39;Arquitectura&#39;, &#39;Economía&#39;],
... &#39;correo&#39;:[&#39;maria@gmail.com&#39;, &#39;luis@yahoo.es&#39;, &#39;carmen@gmail.com&#39;, &#39;antonio@gmail.com&#39;]
... }
&amp;gt;&amp;gt;&amp;gt; df = pd.DataFrame(datos)
&amp;gt;&amp;gt;&amp;gt; print(df)
    nombre  edad         grado             correo
0    María    18      Economía    maria@gmail.com
1     Luis    22      Medicina      luis@yahoo.es
2   Carmen    20  Arquitectura   carmen@gmail.com
3  Antonio    21      Economía  antonio@gmail.com
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;creación-de-un-dataframe-a-partir-de-una-lista-de-listas&#34;&gt;Creación de un DataFrame a partir de una lista de listas&lt;/h2&gt;
&lt;p&gt;Para crear un DataFrame a partir de una lista de listas con los datos de las columnas se utiliza el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DataFrame(data=listas, index=filas, columns=columnas, dtype=tipos)&lt;/code&gt; : Devuelve un objeto del tipo DataFrame cuyas columnas son los valores de las listas de la lista &lt;code&gt;listas&lt;/code&gt;, los nombres de filas indicados en la lista &lt;code&gt;filas&lt;/code&gt;, los nombres de columnas indicados en la lista &lt;code&gt;columnas&lt;/code&gt; y los tipos indicados en la lista &lt;code&gt;tipos&lt;/code&gt;. La lista &lt;code&gt;filas&lt;/code&gt;, tiene que tener el mismo tamaño que la lista &lt;code&gt;listas&lt;/code&gt; mientras que las listas &lt;code&gt;columnas&lt;/code&gt; y &lt;code&gt;tipos&lt;/code&gt; tienen que tener el mismo tamaño que las listas anidadas en &lt;code&gt;listas&lt;/code&gt;. Si no se pasa la lista de filas o de columnas se utilizan enteros empezando en 0. Si no se pasa la lista de tipos, se infiere.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;i class=&#39;fa fa-exclamation-triangle&#39; style=&#34;color:red&#34;&gt;&lt;/i&gt; Si las listas anidadas en &lt;code&gt;listas&lt;/code&gt; no tienen el mismo tamaño, las listas menores se rellenan con valores &lt;code&gt;NaN&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.DataFrame([[&#39;María&#39;, 18], [&#39;Luis&#39;, 22], [&#39;Carmen&#39;, 20]], columns=[&#39;Nombre&#39;, &#39;Edad&#39;])
&amp;gt;&amp;gt;&amp;gt; print(df)
   Nombre   Edad
0   María     18
1    Luis     22
2  Carmen     20
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;creación-de-un-dataframe-a-partir-de-una-lista-de-diccionarios&#34;&gt;Creación de un DataFrame a partir de una lista de diccionarios&lt;/h2&gt;
&lt;p&gt;Para crear un DataFrame a partir de una lista de diccionarios con los datos de las filas, se utiliza el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DataFrame(data=diccionarios, index=filas, columns=columnas, dtype=tipos)&lt;/code&gt; : Devuelve un objeto del tipo DataFrame cuyas filas contienen los valores de los diccionarios de la lista &lt;code&gt;diccionarios&lt;/code&gt;, los nombres de filas indicados en la lista &lt;code&gt;filas&lt;/code&gt;, los nombres de columnas indicados en la lista &lt;code&gt;columnas&lt;/code&gt; y los tipos indicados en la lista &lt;code&gt;tipos&lt;/code&gt;. La lista &lt;code&gt;filas&lt;/code&gt; tiene que tener el mismo tamaño que la lista &lt;code&gt;lista&lt;/code&gt;. Si no se pasa la lista de filas se utilizan enteros empezando en 0. Si no se pasa la lista de columnas se utilizan las claves de los diccionarios. Si no se pasa la lista de tipos, se infiere.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;i class=&#39;fa fa-exclamation-triangle&#39; style=&#34;color:red&#34;&gt;&lt;/i&gt; Si los diccionarios no tienen las mismas claves, las claves que no aparecen en el diccionario se rellenan con valores &lt;code&gt;NaN&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.DataFrame([{&#39;Nombre&#39;:&#39;María&#39;, &#39;Edad&#39;:18}, {&#39;Nombre&#39;:&#39;Luis&#39;, &#39;Edad&#39;:22}, {&#39;Nombre&#39;:&#39;Carmen&#39;}])
&amp;gt;&amp;gt;&amp;gt; print(df)
0   María  18.0
1    Luis  22.0
2  Carmen   NaN
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;creación-de-un-dataframe-a-partir-de-un-array&#34;&gt;Creación de un DataFrame a partir de un array&lt;/h2&gt;
&lt;p&gt;Para crear un DataFrame a partir de un array de NumPy se utiliza el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DataFrame(data=array, index=filas, columns=columnas, dtype=tipo)&lt;/code&gt; : Devuelde un objeto del tipo DataFrame cuyas filas y columnas son las del array &lt;code&gt;array&lt;/code&gt;, los nombres de filas indicados en la lista &lt;code&gt;filas&lt;/code&gt;, los nombres de columnas indicados en la lista &lt;code&gt;columnas&lt;/code&gt; y el tipo indicado en &lt;code&gt;tipo&lt;/code&gt;. La lista &lt;code&gt;filas&lt;/code&gt; tiene que tener el mismo tamaño que el número de filas del array y la lista &lt;code&gt;columnas&lt;/code&gt; el mismo tamaño que el número de columnas del array. Si no se pasa la lista de filas se utilizan enteros empezando en 0. Si no se pasa la lista de columnas se utilizan las claves de los diccionarios. Si no se pasa la lista de tipos, se infiere.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.DataFrame(np.random.randn(4, 3), columns=[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])
&amp;gt;&amp;gt;&amp;gt; print(df)
          a         b         c
0 -1.408238  0.644706  1.077434
1 -0.279264 -0.249229  1.019137
2 -0.805470 -0.629498  0.935066
3  0.236936 -0.431673 -0.177379
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;creación-de-un-dataframe-a-partir-de-un-fichero-csv-o-excel&#34;&gt;Creación de un DataFrame a partir de un fichero CSV o Excel&lt;/h2&gt;
&lt;p&gt;Dependiendo del tipo de fichero, existen distintas funciones para importar un DataFrame desde un fichero.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;read_csv(fichero.csv, sep=separador, header=n, index_col=m, na_values=no-validos, decimal=separador-decimal)&lt;/code&gt; : Devuelve un objeto del tipo DataFrame con los datos del fichero CSV &lt;code&gt;fichero.csv&lt;/code&gt; usando como separador de los datos la cadena &lt;code&gt;separador&lt;/code&gt;. Como nombres de columnas se utiliza los valores de la fila &lt;code&gt;n&lt;/code&gt; y como nombres de filas los valores de la columna &lt;code&gt;m&lt;/code&gt;. Si no se indica &lt;code&gt;m&lt;/code&gt; se utilizan como nombres de filas los enteros empezando en 0. Los valores incluídos en la lista &lt;code&gt;no-validos&lt;/code&gt; se convierten en &lt;code&gt;NaN&lt;/code&gt;. Para los datos numéricos se utiliza como separador de decimales el carácter indicado en &lt;code&gt;separador-decimal&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;read_excel(fichero.xlsx, sheet_name=hoja, header=n, index_col=m, na_values=no-validos, decimal=separador-decimal)&lt;/code&gt; : Devuelve un objeto del tipo DataFrame con los datos de la hoja de cálculo &lt;code&gt;hoja&lt;/code&gt; del fichero Excel &lt;code&gt;fichero.xlsx&lt;/code&gt;. Como nombres de columnas se utiliza los valores de la fila &lt;code&gt;n&lt;/code&gt; y como nombres de filas los valores de la columna &lt;code&gt;m&lt;/code&gt;. Si no se indica &lt;code&gt;m&lt;/code&gt; se utilizan como nombres de filas los enteros empezando en 0. Los valores incluídos en la lista &lt;code&gt;no-validos&lt;/code&gt; se convierten en &lt;code&gt;NaN&lt;/code&gt;. Para los datos numéricos se utiliza como separador de decimales el carácter indicado en &lt;code&gt;separador-decimal&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; # Importación del fichero datos-colesteroles.csv
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesteroles.csv&#39;, sep=&#39;;&#39;, decimal=&#39;,&#39;)
&amp;gt;&amp;gt;&amp;gt; print(df.head())
                              nombre  edad sexo    peso    altura  colesterol
0       José Luis Martínez Izquierdo    18    H    85.0    1.79         182.0
1                     Rosa Díaz Díaz    32    M    65.0    1.73         232.0
2              Javier García Sánchez    24    H     NaN    1.81         191.0
3                Carmen López Pinzón    35    M    65.0    1.70         200.0
4               Marisa López Collado    46    M    51.0    1.58         148.0
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;exportación-de-ficheros&#34;&gt;Exportación de ficheros&lt;/h2&gt;
&lt;p&gt;También existen funciones para exportar un DataFrame a un fichero con diferentes formatos.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.to_csv(fichero.csv, sep=separador, columns=booleano, index=booleano)&lt;/code&gt; : Exporta el DataFrame &lt;code&gt;df&lt;/code&gt; al fichero &lt;code&gt;fichero.csv&lt;/code&gt; en formato CSV usando como separador de los datos la cadena &lt;code&gt;separador&lt;/code&gt;. Si se pasa &lt;code&gt;True&lt;/code&gt; al parámetro &lt;code&gt;columns&lt;/code&gt; se exporta también la fila con los nombres de columnas y si se pasa &lt;code&gt;True&lt;/code&gt; al parámetro &lt;code&gt;index&lt;/code&gt; se exporta también la columna con los nombres de las filas.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.to_excel(fichero.xlsx, sheet_name = hoja, columns=booleano, index=booleano)&lt;/code&gt; : Exporta el DataFrame &lt;code&gt;df&lt;/code&gt; a la hoja de cálculo &lt;code&gt;hoja&lt;/code&gt; del fichero &lt;code&gt;fichero.xlsx&lt;/code&gt; en formato Excel. Si se pasa &lt;code&gt;True&lt;/code&gt; al parámetro &lt;code&gt;columns&lt;/code&gt; se exporta también la fila con los nombres de columnas y si se pasa &lt;code&gt;True&lt;/code&gt; al parámetro &lt;code&gt;index&lt;/code&gt; se exporta también la columna con los nombres de las filas.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;atributos-de-un-dataframe&#34;&gt;Atributos de un DataFrame&lt;/h2&gt;
&lt;p&gt;Existen varias propiedades o métodos para ver las características de un DataFrame.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.info()&lt;/code&gt; : Devuelve información (número de filas, número de columnas, índices, tipo de las columnas y memoria usado) sobre el DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.shape&lt;/code&gt; : Devuelve una tupla con el número de filas y columnas del DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.size&lt;/code&gt; : Devuelve el número de elementos del DataFrame.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.columns&lt;/code&gt; : Devuelve una lista con los nombres de las columnas del DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.index&lt;/code&gt; : Devuelve una lista con los nombres de las filas del DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.dtypes&lt;/code&gt; : Devuelve una serie con los tipos de datos de las columnas del DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.head(n)&lt;/code&gt; : Devuelve las &lt;code&gt;n&lt;/code&gt; primeras filas del DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.tail(n)&lt;/code&gt; : Devuelve las &lt;code&gt;n&lt;/code&gt; últimas filas del DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; df.info()
&amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt;
RangeIndex: 14 entries, 0 to 13
Data columns (total 6 columns):
 #   Column      Non-Null Count  Dtype  
---  ------      --------------  -----  
 0   nombre      14 non-null     object 
 1   edad        14 non-null     int64  
 2   sexo        14 non-null     object 
 3   peso        13 non-null     float64
 4   altura      14 non-null     float64
 5   colesterol  13 non-null     float64
dtypes: float64(3), int64(1), object(2)
memory usage: 800.0+ bytes
&amp;gt;&amp;gt;&amp;gt; df.shape
(14, 6)
&amp;gt;&amp;gt;&amp;gt; df.size
84
&amp;gt;&amp;gt;&amp;gt; df.columns
Index([&#39;nombre&#39;, &#39;edad&#39;, &#39;sexo&#39;, &#39;peso&#39;, &#39;altura&#39;, &#39;colesterol&#39;], dtype=&#39;object&#39;)
&amp;gt;&amp;gt;&amp;gt; df.index
RangeIndex(start=0, stop=14, step=1)
&amp;gt;&amp;gt;&amp;gt; df.dtypes
nombre         object
edad            int64
sexo           object
peso          float64
altura        float64
colesterol    float64
dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;renombrar-los-nombres-de-las-filas-y-columnas&#34;&gt;Renombrar los nombres de las filas y columnas&lt;/h2&gt;
&lt;p&gt;Para cambiar el nombre de las filas y las columnas de un DataFrame se utiliza el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df.rename(columns=columnas, index=filas)&lt;/code&gt;: Devuelve el DataFrame que resulta de renombrar las columnas indicadas en las claves del diccionario &lt;code&gt;columnas&lt;/code&gt; con sus valores y las filas indicadas en las claves del diccionario &lt;code&gt;filas&lt;/code&gt; con sus valores en el DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; print(df.rename(columns={&#39;nombre&#39;:&#39;nombre y apellidos&#39;, &#39;altura&#39;:&#39;estatura&#39;}, index={0:1000, 1:1001, 2:1002}))
                    nombre y apellidos  edad sexo    peso  estatura    colesterol
1000      José Luis Martínez Izquierdo    18    H    85.0      1.79         182.0
1001                    Rosa Díaz Díaz    32    M    65.0      1.73         232.0
1002             Javier García Sánchez    24    H     NaN      1.81         191.0
3                  Carmen López Pinzón    35    M    65.0      1.70         200.0
4                 Marisa López Collado    46    M    51.0      1.58         148.0
...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;reindexar-un-dataframe&#34;&gt;Reindexar un DataFrame&lt;/h2&gt;
&lt;p&gt;Para reordenar los índices de las filas y las columnas de un DataFrame, así como añadir o eliminar índices, se utiliza el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df.reindex(index=filas, columns=columnas, fill_value=relleno)&lt;/code&gt; : Devuelve el DataFrame que resulta de tomar del DataFrame &lt;code&gt;df&lt;/code&gt; las filas con nombres en la lista &lt;code&gt;filas&lt;/code&gt; y las columnas con nombres en la lista &lt;code&gt;columnas&lt;/code&gt;. Si alguno de los nombres indicados en &lt;code&gt;filas&lt;/code&gt; o &lt;code&gt;columnas&lt;/code&gt; no existía en el DataFrame &lt;code&gt;df&lt;/code&gt;, se crean filan o columnas nuevas rellenas con el valor &lt;code&gt;relleno&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; print(df.reindex(index=[4, 3, 1], columns=[&#39;nombre&#39;, &#39;tensión&#39;, &#39;colesterol&#39;]))
                  nombre  tensión  colesterol
4   Marisa López Collado      NaN       148.0
3    Carmen López Pinzón      NaN       200.0
1         Rosa Díaz Díaz      NaN       232.0
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;acceso-a-los-elementos-de-un-dataframe&#34;&gt;Acceso a los elementos de un DataFrame&lt;/h2&gt;
&lt;p&gt;El acceso a los datos de un DataFrame se puede hacer a través de posiciones o través de los nombres de las filas y columnas.&lt;/p&gt;
&lt;h2 id=&#34;accesos-mediante-posiciones&#34;&gt;Accesos mediante posiciones&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.iloc[i, j]&lt;/code&gt; : Devuelve el elemento que se encuentra en la fila &lt;code&gt;i&lt;/code&gt; y la columna &lt;code&gt;j&lt;/code&gt; del DataFrame &lt;code&gt;df&lt;/code&gt;. Pueden indicarse secuencias de índices para obtener partes del DataFrame.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.iloc[filas, columnas]&lt;/code&gt; : Devuelve un DataFrame con los elementos de las filas de la lista &lt;code&gt;filas&lt;/code&gt; y de las columnas de la lista &lt;code&gt;columnas&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.iloc[i]&lt;/code&gt; : Devuelve una serie con los elementos de la fila &lt;code&gt;i&lt;/code&gt; del DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; print(df.iloc[1, 3])
65
&amp;gt;&amp;gt;&amp;gt; print(df.iloc[1, :2])
nombre     Rosa Díaz Díaz
edad                   32
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;acceso-a-los-elementos-mediante-nombres&#34;&gt;Acceso a los elementos mediante nombres&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df.loc[fila, columna]&lt;/code&gt; : Devuelve el elemento que se encuentra en la fila con nombre &lt;code&gt;fila&lt;/code&gt; y la columna de con nombre &lt;code&gt;columna&lt;/code&gt; del DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;df.loc[filas, columnas]&lt;/code&gt; : Devuelve un DataFrame con los elemento que se encuentra en las filas con los nombres de la lista &lt;code&gt;filas&lt;/code&gt; y las columnas con los nombres de la lista &lt;code&gt;columnas&lt;/code&gt; del DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df[columna]&lt;/code&gt; : Devuelve una serie con los elementos de la columna de nombre &lt;code&gt;columna&lt;/code&gt; del DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.columna&lt;/code&gt; : Devuelve una serie con los elementos de la columna de nombre &lt;code&gt;columna&lt;/code&gt; del DataFrame &lt;code&gt;df&lt;/code&gt;. Es similar al método anterior pero solo funciona cuando el nombre de la columna no tiene espacios en blanco.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; print(df.loc[2, &#39;colesterol&#39;])
191
&amp;gt;&amp;gt;&amp;gt; print(df.loc[:3, (&#39;colesterol&#39;,&#39;peso&#39;)])
     colesterol    peso
1         232.0    65.0
2         191.0     NaN
3         200.0    65.0
&amp;gt;&amp;gt;&amp;gt; print(df[&#39;colesterol&#39;])
0     182.0
1     232.0
2     191.0
3     200.0
...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;operaciones-con-las-columnas-de-un-dataframe&#34;&gt;Operaciones con las columnas de un DataFrame&lt;/h2&gt;
&lt;h2 id=&#34;añadir-columnas-a-un-dataframe&#34;&gt;Añadir columnas a un DataFrame&lt;/h2&gt;
&lt;p&gt;El procedimiento para añadir una nueva columna a un DataFrame es similar al de añadir un nuevo par a un diccionario, pero pasando los valores de la columna en una lista o serie.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;d[nombre] = lista&lt;/code&gt;: Añade al DataFrame &lt;code&gt;df&lt;/code&gt; una nueva columna con el nombre &lt;code&gt;nombre&lt;/code&gt; y los valores de la lista &lt;code&gt;lista&lt;/code&gt;. La lista debe tener el mismo tamaño que el número de filas de &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;d[nombre] = serie&lt;/code&gt;: Añade al DataFrame &lt;code&gt;df&lt;/code&gt; una nueva columna con el nombre &lt;code&gt;nombre&lt;/code&gt; y los valores de la serie &lt;code&gt;serie&lt;/code&gt;. Si el tamaño de la serie es menor que el número de filas de &lt;code&gt;df&lt;/code&gt; se rellena con valores &lt;code&gt;NaN&lt;/code&gt; mientras que si es mayor se recorta.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; df[&#39;diabetes&#39;] = pd.Series([False, False, True, False, True])
&amp;gt;&amp;gt;&amp;gt; print(df)
                              nombre  edad sexo    peso  altura    colesterol diabetes
0       José Luis Martínez Izquierdo    18    H    85.0    1.79         182.0    False
1                     Rosa Díaz Díaz    32    M    65.0    1.73         232.0    False
2              Javier García Sánchez    24    H   NaN.0    1.81         191.0     True
3                Carmen López Pinzón    35    M    65.0    1.70         200.0    False
4               Marisa López Collado    46    M    51.0    1.58         148.0     True
5                  Antonio Ruiz Cruz    68    H    66.0    1.74         249.0      NaN
...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;operaciones-sobre-columnas&#34;&gt;Operaciones sobre columnas&lt;/h2&gt;
&lt;p&gt;Puesto que los datos de una misma columna de un DataFrame son del mismo tipo, es fácil aplicar la misma operación a todos los elementos de la columna.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; print(df[&#39;altura&#39;]*100)
0     179
1     173
2     181
...

&amp;gt;&amp;gt;&amp;gt; print(df[&#39;sexo&#39;]==&#39;M&#39;)
0     False
1      True
2     False
...

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;aplicar-funciones-a-columnas&#34;&gt;Aplicar funciones a columnas&lt;/h2&gt;
&lt;p&gt;Para aplicar funciones a todos los elementos de una columna se utiliza el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df[columna].apply(f)&lt;/code&gt; : Devuelve una serie con los valores que resulta de aplicar la función &lt;code&gt;f&lt;/code&gt; a los elementos de la columna con nombre &lt;code&gt;columna&lt;/code&gt; del DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; from math import log
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; print(df[&#39;altura&#39;].apply(log))
0     0.582216
1     0.548121
2     0.593327
...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;convertir-una-columna-al-tipo-datetime&#34;&gt;Convertir una columna al tipo &lt;code&gt;datetime&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;A menudo una columna contiene cadenas que representan fechas. Para convertir estas cadenas al tipo &lt;code&gt;datetime&lt;/code&gt; se utiliza el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;to_datetime(columna, formato)&lt;/code&gt;: Devuelve la serie que resulta de convertir las cadenas de la columna con el nombre &lt;code&gt;columna&lt;/code&gt; en fechas del tipo &lt;code&gt;datetime&lt;/code&gt; con el formado especificado en &lt;code&gt;formato&lt;/code&gt;. (
&lt;a href=&#34;../datetime/&#34;&gt;Ver librería datetime&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.DataFrame({&#39;Name&#39;: [&#39;María&#39;, &#39;Carlos&#39;, &#39;Carmen&#39;], &#39;Nacimiento&#39;:[&#39;05-03-2000&#39;, &#39;20-05-2001&#39;, &#39;10-12-1999&#39;]})
&amp;gt;&amp;gt;&amp;gt; print(pd.to_datetime(df.Nacimiento, format = &#39;%d-%m-%Y&#39;))
0   2000-03-05
1   2001-05-20
2   1999-12-10
Name: Nacimiento, dtype: datetime64[ns]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;resumen-descriptivo-de-un-dataframe&#34;&gt;Resumen descriptivo de un DataFrame&lt;/h2&gt;
&lt;p&gt;Al igual que para las series, los siguientes métodos permiten resumir la información de un DataFrame por columnas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df.count()&lt;/code&gt; : Devuelve una serie número de elementos que no son nulos ni &lt;code&gt;NaN&lt;/code&gt; en cada columna del DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;df.sum()&lt;/code&gt; : Devuelve una serie con la suma de los datos de las columnas del DataFrame &lt;code&gt;df&lt;/code&gt; cuando los datos son de un tipo numérico, o la concatenación de ellos cuando son del tipo cadena &lt;code&gt;str&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;df.cumsum()&lt;/code&gt; : Devuelve un DataFrame con la suma acumulada de los datos de las columnas del DataFrame &lt;code&gt;df&lt;/code&gt; cuando los datos son de un tipo numérico.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;df.min()&lt;/code&gt; : Devuelve una serie con los menores de los datos de las columnas del DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;df.max()&lt;/code&gt; : Devuelve una serie con los mayores de los datos de las columnas del DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;df.mean()&lt;/code&gt; : Devuelve una serie con las media de los datos de las columnas del DataFrame &lt;code&gt;df&lt;/code&gt; cuando los datos son de un tipo numérico.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;df.std()&lt;/code&gt; : Devuelve una serie con las desviaciones típicas de los datos de las columnas del DataFrame &lt;code&gt;df&lt;/code&gt; cuando los datos son de un tipo numérico.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;df.describe(include = tipo)&lt;/code&gt; : Devuelve un DataFrame con un resumen estadístico de las columnas del DataFrame &lt;code&gt;df&lt;/code&gt; del tipo &lt;code&gt;tipo&lt;/code&gt;. Para los datos numéricos (&lt;code&gt;number&lt;/code&gt;) se calcula la media, la desviación típica, el mínimo, el máximo y los cuartiles de las columnas numéricas. Para los datos no numéricos (&lt;code&gt;object&lt;/code&gt;) se calcula el número de valores, el número de valores distintos, la moda y su frecuencia. Si no se indica el tipo solo se consideran las columnas numéricas.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; print(df.describe())
            edad        peso     altura  colesterol
count  14.000000   13.000000  14.000000   13.000000
mean   38.214286   70.923077   1.768571  220.230769
std    15.621379   16.126901   0.115016   39.847948
min    18.000000   51.000000   1.580000  148.000000
25%    24.750000   61.000000   1.705000  194.000000
50%    35.000000   65.000000   1.755000  210.000000
75%    49.750000   78.000000   1.840000  249.000000
max    68.000000  109.000000   1.980000  280.000000
&amp;gt;&amp;gt;&amp;gt; print(df.describe(include=&#39;object&#39;))
                          nombre sexo
count                         14   14
unique                        14    2
top      Antonio Fernández Ocaña    H
freq                           1    8
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;eliminar-columnas-de-un-dataframe&#34;&gt;Eliminar columnas de un DataFrame&lt;/h2&gt;
&lt;p&gt;Para eliminar columnas de un DataFrame se utilizan los siguientes métodos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;del d[nombre]&lt;/code&gt; : Elimina la columna con nombre &lt;code&gt;nombre&lt;/code&gt; del DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.pop(nombre)&lt;/code&gt; : Elimina la columna con nombre &lt;code&gt;nombre&lt;/code&gt; del DataFrame &lt;code&gt;df&lt;/code&gt; y la devuelve como una serie.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; edad = df.pop(&#39;edad&#39;)
&amp;gt;&amp;gt;&amp;gt; print(df)
                              nombre    sexo  peso  altura    colesterol
0       José Luis Martínez Izquierdo     H    85.0    1.79         182.0
1                     Rosa Díaz Díaz     M    65.0    1.73         232.0
2              Javier García Sánchez     H     
NaN    1.81         191.0
...
print(edad)
0     18
1     32
2     24
...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;operaciones-con-las-filas-de-un-dataframe&#34;&gt;Operaciones con las filas de un DataFrame&lt;/h2&gt;
&lt;h2 id=&#34;añadir-una-fila-a-un-dataframe&#34;&gt;Añadir una fila a un DataFrame&lt;/h2&gt;
&lt;p&gt;Para añadir una fila a un DataFrame se utiliza el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df.append(serie, ignore_index=True)&lt;/code&gt; : Devuelve el DataFrame que resulta de añadir una fila al DataFrame &lt;code&gt;df&lt;/code&gt; con los valores de la serie &lt;code&gt;serie&lt;/code&gt;. Los nombres del índice de la serie deben corresponderse con los nombres de las columnas de &lt;code&gt;df&lt;/code&gt;. Si no se pasa el parámetro &lt;code&gt;ignore_index&lt;/code&gt; entonces debe pasarse el parámetro &lt;code&gt;name&lt;/code&gt; a la serie, donde su argumento será el nombre de la nueva fila.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; df = df.append(pd.Series([&#39;Carlos Rivas&#39;, 28, &#39;H&#39;, 89.0, 1.78, 245.0], index=[&#39;nombre&#39;,&#39;edad&#39;,&#39;sexo&#39;,&#39;peso&#39;,&#39;altura&#39;,&#39;colesterol&#39;]), ignore_index=True)
&amp;gt;&amp;gt;&amp;gt; print(df.tail())
                              nombre  edad sexo    peso  altura    colesterol
10             Macarena Álvarez Luna    53    M    55.0    1.62         262.0
11        José María de la Guía Sanz    58    H    78.0    1.87         198.0
12   Miguel Angel Cuadrado Gutiérrez    27    H   109.0    1.98         210.0
13             Carolina Rubio Moreno    20    M    61.0    1.77         194.0
14                      Carlos Rivas    28    H    89.0    1.78         245.0
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;eliminar-filas-de-un-dataframe&#34;&gt;Eliminar filas de un DataFrame&lt;/h2&gt;
&lt;p&gt;Para eliminar filas de un DataFrame se utilizan el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df.drop(filas)&lt;/code&gt; : Devuelve el DataFrame que resulta de eliminar las filas con los nombres indicados en la lista &lt;code&gt;filas&lt;/code&gt; del DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; print(df.drop([1, 3]))
                              nombre  edad sexo   peso  altura  colesterol
0       José Luis Martínez Izquierdo    18    H   85.0    1.79       182.0
2              Javier García Sánchez    24    H    NaN    1.81       191.0
4               Marisa López Collado    46    M   51.0    1.58       148.0
...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;filtrado-de-las-filas-de-un-dataframe&#34;&gt;Filtrado de las filas de un DataFrame&lt;/h2&gt;
&lt;p&gt;Una operación bastante común con un DataFrame es obtener las filas que cumplen una determinada condición.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df[condicion]&lt;/code&gt; : Devuelve un DataFrame con las filas del DataFrame &lt;code&gt;df&lt;/code&gt; que se corresponden con el valor &lt;code&gt;True&lt;/code&gt; de la lista booleana &lt;code&gt;condicion&lt;/code&gt;. &lt;code&gt;condicion&lt;/code&gt; debe ser una lista de valores booleanos de la misma longitud que el número de filas del DataFrame.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; print(df[(df[&#39;sexo&#39;]==&#39;H&#39;) &amp;amp; (df[&#39;colesterol&#39;] &amp;gt; 260)])
                     nombre  edad sexo    peso  altura    colesterol
6   Antonio Fernández Ocaña    51    H    62.0    1.72         276.0
9   Santiago Reillo Manzano    46    H    75.0    1.85         280.0
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ordenar-un-dataframe&#34;&gt;Ordenar un DataFrame&lt;/h2&gt;
&lt;p&gt;Para ordenar un DataFrame de acuerdo a los valores de una determinada columna se utilizan los siguientes métodos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.sort_values(columna, ascending=booleano&lt;/code&gt;) : Devuelve el DataFrame que resulta de ordenar las filas del DataFrame &lt;code&gt;df&lt;/code&gt; según los valores del la columna con nombre &lt;code&gt;columna&lt;/code&gt;. Si argumento del parámetro &lt;code&gt;ascending&lt;/code&gt; es &lt;code&gt;True&lt;/code&gt; el orden es creciente y si es &lt;code&gt;False&lt;/code&gt; decreciente.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.sort_index(ascending=booleano&lt;/code&gt;) : Devuelve el DataFrame que resulta de ordenar las filas del DataFrame &lt;code&gt;df&lt;/code&gt; según los nombres de las filas. Si el argumento del parámetro &lt;code&gt;ascending&lt;/code&gt; es &lt;code&gt;True&lt;/code&gt; el orden es creciente y si es &lt;code&gt;False&lt;/code&gt; decreciente.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; print(df.sort_values(&#39;colesterol&#39;))
                              nombre  edad sexo   peso  altura  colesterol
4               Marisa López Collado    46    M   51.0    1.58       148.0
0       José Luis Martínez Izquierdo    18    H   85.0    1.79       182.0
2              Javier García Sánchez    24    H    NaN    1.81       191.0
13             Carolina Rubio Moreno    20    M   61.0    1.77       194.0
...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;eliminar-las-filas-con-dados-desconocidos-en-un-dataframe&#34;&gt;Eliminar las filas con dados desconocidos en un DataFrame&lt;/h2&gt;
&lt;p&gt;Para eliminar las filas de un DataFrame que contienen datos desconocidos &lt;code&gt;NaN&lt;/code&gt; o nulos &lt;code&gt;None&lt;/code&gt; se utiliza el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s.dropna(subset=columnas)&lt;/code&gt; : Devuelve el DataFrame que resulta de eliminar las filas que contienen algún dato desconocido o nulo en las columnas de la lista &lt;code&gt;columna&lt;/code&gt; del DataFrame &lt;code&gt;df&lt;/code&gt;. Si no se pasa un argumento al parámetro &lt;code&gt;subset&lt;/code&gt; se aplica a todas las columnas del DataFrame.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; print(df.dropna())
                              nombre  edad sexo   peso  altura  colesterol
0       José Luis Martínez Izquierdo    18    H   85.0    1.79       182.0
1                     Rosa Díaz Díaz    32    M   65.0    1.73       232.0
3                Carmen López Pinzón    35    M   65.0    1.70       200.0
4               Marisa López Collado    46    M   51.0    1.58       148.0
...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;agrupación-de-un-dataframe&#34;&gt;Agrupación de un DataFrame&lt;/h2&gt;
&lt;p&gt;En muchas aplicaciones es útil agrupar los datos de un DataFrame de acuerdo a los valores de una o varias columnas (categorías), como por ejemplo el sexo o el país.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/pandas-grupos.png&#34; alt=&#34;División en grupos de un DataFrame&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;dividir-un-dataframe-en-grupos&#34;&gt;Dividir un DataFrame en grupos&lt;/h2&gt;
&lt;p&gt;Para dividir un DataFrame en grupos se utiliza el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df.groupby(columnas).groups&lt;/code&gt; : Devuelve un diccionario con cuyas claves son las tuplas que resultan de todas las combinaciones de los valores de las columnas con nombres en la lista &lt;code&gt;columnas&lt;/code&gt;, y valores las listas de los nombres de las filas que contienen esos valores en las correspondientes columnas del DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; print(df.groupby(&#39;sexo&#39;).groups)
{&#39;H&#39;: Int64Index([0, 2, 5, 6, 8, 9, 11, 12], dtype=&#39;int64&#39;), &#39;M&#39;: Int64Index([1, 3, 4, 7, 10, 13], dtype=&#39;int64&#39;)}
&amp;gt;&amp;gt;&amp;gt; print(df.groupby([&#39;sexo&#39;,&#39;edad&#39;]).groups)
{(&#39;H&#39;, 18): Int64Index([0], dtype=&#39;int64&#39;), (&#39;H&#39;, 24): Int64Index([2], dtype=&#39;int64&#39;), (&#39;H&#39;, 27): Int64Index([12], dtype=&#39;int64&#39;), (&#39;H&#39;, 35): Int64Index([8], dtype=&#39;int64&#39;), (&#39;H&#39;, 46): Int64Index([9], dtype=&#39;int64&#39;), (&#39;H&#39;, 51): Int64Index([6], dtype=&#39;int64&#39;), (&#39;H&#39;, 58): Int64Index([11], dtype=&#39;int64&#39;), (&#39;H&#39;, 68): Int64Index([5], dtype=&#39;int64&#39;), (&#39;M&#39;, 20): Int64Index([13], dtype=&#39;int64&#39;), (&#39;M&#39;, 22): Int64Index([7], dtype=&#39;int64&#39;), (&#39;M&#39;, 32): Int64Index([1], dtype=&#39;int64&#39;), (&#39;M&#39;, 35): Int64Index([3], dtype=&#39;int64&#39;), (&#39;M&#39;, 46): Int64Index([4], dtype=&#39;int64&#39;), (&#39;M&#39;, 53): Int64Index([10], dtype=&#39;int64&#39;)}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para obtener un grupo concreto se utiliza el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df.groupby(columnas).get_group(valores)&lt;/code&gt; : Devuelve un DataFrame con las filas del DataFrame &lt;code&gt;df&lt;/code&gt; que cumplen que las columnas de la lista &lt;code&gt;columnas&lt;/code&gt; presentan los valores de la tupla &lt;code&gt;valores&lt;/code&gt;. La lista &lt;code&gt;columnas&lt;/code&gt; y la tupla &lt;code&gt;valores&lt;/code&gt; deben tener el mismo tamaño.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; print(df.groupby(&#39;sexo&#39;).get_group(&#39;M&#39;))
                    nombre  edad sexo    peso   altura    colesterol
1           Rosa Díaz Díaz    32    M    65.0     1.73         232.0
3      Carmen López Pinzón    35    M    65.0     1.70         200.0
4     Marisa López Collado    46    M    51.0     1.58         148.0
7    Pilar Martín González    22    M    60.0     1.66           NaN
10   Macarena Álvarez Luna    53    M    55.0     1.62         262.0
13   Carolina Rubio Moreno    20    M    61.0     1.77         194.0
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;aplicar-una-función-de-agregación-por-grupos&#34;&gt;Aplicar una función de agregación por grupos&lt;/h2&gt;
&lt;p&gt;Una vez dividido el DataFame en grupos, es posible aplicar funciones de agregación a cada grupo mediante el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df.groupby(columnas).agg(funciones)&lt;/code&gt; : Devuelve un DataFrame con el resultado de aplicar las funciones de agregación de la lista &lt;code&gt;funciones&lt;/code&gt; a cada uno de los DataFrames que resultan de dividir el DataFrame según las columnas de la lista &lt;code&gt;columnas&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Una función de agregación toma como argumento una lista y devuelve una único valor. Algunas de las funciones de agregación más comunes son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;np.min&lt;/code&gt; : Devuelve el mínimo de una lista de valores.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.max&lt;/code&gt; : Devuelve el máximo de una lista de valores.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.count_nonzero&lt;/code&gt; : Devuelve el número de valores no nulos de una lista de valores.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.sum&lt;/code&gt; : Devuelve la suma de una lista de valores.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.mean&lt;/code&gt; : Devuelve la media de una lista de valores.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.std&lt;/code&gt; : Devuelve la desviación típica de una lista de valores.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; print(df.groupby(&#39;sexo&#39;).agg(np.mean))
           edad       peso    altura  colesterol
sexo                                            
H     40.875000  80.714286  1.837500     228.375
M     34.666667  59.500000  1.676667     207.200
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;reestructurar-un-dataframe&#34;&gt;Reestructurar un DataFrame&lt;/h2&gt;
&lt;p&gt;A menudo la disposición de los datos en un DataFrame no es la adecuada para su tratamiento y es necesario reestructurar el DataFrame. Los datos que contiene un DataFrame pueden organizarse en dos formatos: ancho y largo.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/formatos-dataframe.png&#34; alt=&#34;Formatos de un DataFrame&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;convertir-un-dataframe-a-formato-largo&#34;&gt;Convertir un DataFrame a formato largo&lt;/h2&gt;
&lt;p&gt;Para convertir un DataFrame de formato ancho a formato largo (columnas a filas) se utiliza el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df.melt(id_vars=id-columnas, value_vars=columnas, var_name=nombre-columnas, var_value=nombre-valores)&lt;/code&gt; : Devuelve el DataFrame que resulta de convertir el DataFrame &lt;code&gt;df&lt;/code&gt; de formato ancho a formato largo. Todas las columnas de lista &lt;code&gt;columnas&lt;/code&gt; se reestructuran en dos nuevas columnas con nombres &lt;code&gt;nombre-columnas&lt;/code&gt; y &lt;code&gt;nombre-valores&lt;/code&gt; que contienen los nombres de las columnas originales y sus valores, respectivamente. Las columnas en la lista &lt;code&gt;id-columnas&lt;/code&gt; se mantienen sin reestructurar. Si no se pasa la lista &lt;code&gt;columnas&lt;/code&gt; entonces se reestructuran todas las columnas excepto las columnas de la lista &lt;code&gt;id-columnas&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; datos = {&#39;nombre&#39;:[&#39;María&#39;, &#39;Luis&#39;, &#39;Carmen&#39;],
... &#39;edad&#39;:[18, 22, 20],
... &#39;Matemáticas&#39;:[8.5, 7, 3.5],
... &#39;Economía&#39;:[8, 6.5, 5],
... &#39;Programación&#39;:[6.5, 4, 9]}
&amp;gt;&amp;gt;&amp;gt; df = pd.DataFrame(datos)
&amp;gt;&amp;gt;&amp;gt; df1 = df.melt(id_vars=[&#39;nombre&#39;, &#39;edad&#39;], var_name=&#39;asignatura&#39;, value_name=&#39;nota&#39;)
&amp;gt;&amp;gt;&amp;gt; print(df1)
   nombre  edad    asignatura  nota
0   María    18   Matemáticas   8.5
1    Luis    22   Matemáticas   7.0
2  Carmen    20   Matemáticas   3.5
3   María    18      Economía   8.0
4    Luis    22      Economía   6.5
5  Carmen    20      Economía   5.0
6   María    18  Programación   6.5
7    Luis    22  Programación   4.0
8  Carmen    20  Programación   9.0
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;convertir-un-dataframe-a-formato-ancho&#34;&gt;Convertir un DataFrame a formato ancho&lt;/h2&gt;
&lt;p&gt;Para convertir un DataFrame de formato largo a formato ancho (filas a columnas) se utiliza el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df.pivot(index=filas, columns=columna, values=valores)&lt;/code&gt; : Devuelve el DataFrame que resulta de convertir el DataFrame &lt;code&gt;df&lt;/code&gt; de formato largo a formato ancho. Se crean tantas columnas nuevas como valores distintos haya en la columna &lt;code&gt;columna&lt;/code&gt;. Los nombres de estas nuevas columnas son los valores de la columna &lt;code&gt;columna&lt;/code&gt; mientras que sus valores se toman de la columna &lt;code&gt;valores&lt;/code&gt;. Los nombres del índice del nuevo DataFrame se toman de los valores de la columna &lt;code&gt;filas&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Continuación del código anterior
&amp;gt;&amp;gt;&amp;gt; print(df1.pivot(index=&#39;nombre&#39;, columns=&#39;asignatura&#39;, values=&#39;nota&#39;))
asignatura  Economía  Matemáticas  Programación
nombre                                  
Carmen           5.0          3.5           9.0
Luis             6.5          7.0           4.0
María            8.0          8.5           6.5
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
