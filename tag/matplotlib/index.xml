<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Matplotlib | Aprende con Alf</title><link>/tag/matplotlib/</link><atom:link href="/tag/matplotlib/index.xml" rel="self" type="application/rss+xml"/><description>Matplotlib</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>es-es</language><image><url>/images/logo_hude38443eeb2faa5fa84365aba7d86a77_3514_300x300_fit_lanczos_3.png</url><title>Matplotlib</title><link>/tag/matplotlib/</link></image><item><title>Ejercicios de la librería Matplotlib</title><link>/docencia/python/ejercicios/matplotlib/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docencia/python/ejercicios/matplotlib/</guid><description>&lt;h2 id="ejercicio-1">Ejercicio 1&lt;/h2>
&lt;p>Escribir un programa que pregunte al usuario por las ventas de un rango de años y muestre por pantalla un diagrama de líneas con la evolución de las ventas.&lt;/p>
&lt;p>&lt;a href="https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/matplotlib/ejercicio1.ipynb" class="btn btn-info">Solución&lt;/a>&lt;/p>
&lt;h2 id="ejercicio-2">Ejercicio 2&lt;/h2>
&lt;p>Escribir una función que reciba una diccionario con las notas de las asignaturas de un curso y una cadena con el nombre de un color y devuelva un diagrama de barras de las notas en el color dado.&lt;/p>
&lt;p>&lt;a href="https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/matplotlib/ejercicio2.ipynb" class="btn btn-info">Solución&lt;/a>&lt;/p>
&lt;h2 id="ejercicio-3">Ejercicio 3&lt;/h2>
&lt;p>Escribir una función que reciba una serie de Pandas con las notas de los alumnos de un curso y devuelva un diagrama de cajas con las notas. El diagrama debe tener el título &amp;ldquo;Distribución de notas&amp;rdquo;.&lt;/p>
&lt;p>&lt;a href="https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/matplotlib/ejercicio3.ipynb" class="btn btn-info">Solución&lt;/a>&lt;/p>
&lt;h2 id="ejercicio-4">Ejercicio 4&lt;/h2>
&lt;p>Escribir una función que reciba una serie de Pandas con el número de ventas de un producto durante los meses de un trimestre y un título y cree un diagrama de sectores con las ventas en formato png con el titulo dado. El diagrama debe guardarse en un fichero con formato png y el título dado.&lt;/p>
&lt;p>&lt;a href="https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/matplotlib/ejercicio4.ipynb" class="btn btn-info">Solución&lt;/a>&lt;/p>
&lt;h2 id="ejercicio-5">Ejercicio 5&lt;/h2>
&lt;p>Escribir una función que reciba una serie de Pandas con el número de ventas de un producto por años y una cadena con el tipo de gráfico a generar (lineas, barras, sectores, areas) y devuelva un diagrama del tipo indicado con la evolución de las ventas por años y con el título &amp;ldquo;Evolución del número de ventas&amp;rdquo;.&lt;/p>
&lt;p>&lt;a href="https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/matplotlib/ejercicio5.ipynb" class="btn btn-info">Solución&lt;/a>&lt;/p>
&lt;h2 id="ejercicio-6">Ejercicio 6&lt;/h2>
&lt;p>Escribir una función que reciba un dataframe de Pandas con los ingresos y gastos de una empresa por meses y devuelva un diagrama de líneas con dos líneas, una para los ingresos y otra para los gastos. El diagrama debe tener una leyenda identificando la línea de los ingresos y la de los gastos, un título con el nombre &amp;ldquo;Evolución de ingresos y gastos&amp;rdquo; y el eje y debe empezar en 0.&lt;/p>
&lt;p>&lt;a href="https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/matplotlib/ejercicio6.ipynb" class="btn btn-info">Solución&lt;/a>&lt;/p>
&lt;h2 id="ejercicio-7">Ejercicio 7&lt;/h2>
&lt;p>El fichero
&lt;a href="../soluciones/matplotlib/bancos.csv">&lt;code>bancos.csv&lt;/code>&lt;/a> contiene las cotizaciones de los principales bancos de España con : &lt;code>Empresa&lt;/code> (nombre de la empresa), &lt;code>Apertura&lt;/code> (precio de la acción a la apertura de bolsa), &lt;code>Máximo&lt;/code> (precio máximo de la acción durante la jornada), &lt;code>Mínimo&lt;/code> (precio mínimo de la acción durante la jornada), &lt;code>Cierre&lt;/code> (precio de la acción al cierre de bolsa), &lt;code>Volumen&lt;/code> (volumen al cierre de bolsa). Construir una función reciba el fichero &lt;code>bancos.csv&lt;/code> y cree un diagrama de líneas con las series temporales de las cotizaciones de cierre de cada banco.&lt;/p>
&lt;p>&lt;a href="https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/matplotlib/ejercicio7.ipynb" class="btn btn-info">Solución&lt;/a>&lt;/p>
&lt;h2 id="ejercicio-8">Ejercicio 8&lt;/h2>
&lt;p>El fichero
&lt;a href="../soluciones/matplotlib/titanic.csv">titanic.csv&lt;/a> contiene información sobre los pasajeros del Titanic. Crear un dataframe con Pandas y a partir de él generar los siguientes diagramas.&lt;/p>
&lt;ol>
&lt;li>Diagrama de sectores con los fallecidos y supervivientes.&lt;/li>
&lt;li>Histograma con las edades.&lt;/li>
&lt;li>Diagrama de barras con el número de personas en cada clase.&lt;/li>
&lt;li>Diagrama de barras con el número de personas fallecidas y supervivientes en cada clase.&lt;/li>
&lt;li>Diagrama de barras con el número de personas fallecidas y supervivientes acumuladas en cada clase.&lt;/li>
&lt;/ol>
&lt;p>&lt;a href="https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/matplotlib/ejercicio8.ipynb" class="btn btn-info">Solución&lt;/a>&lt;/p></description></item><item><title>La librería Matplotlib</title><link>/docencia/python/manual/matplotlib/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docencia/python/manual/matplotlib/</guid><description>&lt;p>
&lt;a href="https://matplotlib.org/" target="_blank" rel="noopener">Matplotlib&lt;/a> es una librería de Python especializada en la creación de gráficos en dos dimensiones.&lt;/p>
&lt;p>&lt;img src="../img/matplotlib-logo.png" alt="Gráfico con matplotlib">&lt;/p>
&lt;p>Permite crear y personalizar los tipos de gráficos más comunes, entre ellos:&lt;/p>
&lt;ul>
&lt;li>Diagramas de barras&lt;/li>
&lt;li>Histograma&lt;/li>
&lt;li>Diagramas de sectores&lt;/li>
&lt;li>Diagramas de caja y bigotes&lt;/li>
&lt;li>Diagramas de violín&lt;/li>
&lt;li>Diagramas de dispersión o puntos&lt;/li>
&lt;li>Diagramas de lineas&lt;/li>
&lt;li>Diagramas de areas&lt;/li>
&lt;li>Diagramas de contorno&lt;/li>
&lt;li>Mapas de color&lt;/li>
&lt;/ul>
&lt;p>y combinaciones de todos ellos.&lt;/p>
&lt;p>En la siguiente
&lt;a href="https://matplotlib.org/gallery/index.html" target="_blank" rel="noopener">galería de gráficos&lt;/a> pueden apreciarse todos los tipos de gráficos que pueden crearse con esta librería.&lt;/p>
&lt;h2 id="creación-de-gráficos-con-matplotlib">Creación de gráficos con matplotlib&lt;/h2>
&lt;p>Para crear un gráfico con matplotlib es habitual seguir los siguientes pasos:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Importar el módulo &lt;code>pyplot&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Definir la figura que contendrá el gráfico, que es la region (ventana o página) donde se dibujará y los ejes sobre los que se dibujarán los datos. Para ello se utiliza la función &lt;code>subplots()&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Dibujar los datos sobre los ejes. Para ello se utilizan distintas funciones dependiendo del tipo de gráfico que se quiera.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Personalizar el gráfico. Para ello existen multitud de funciones que permiten añadir un título, una leyenda, una rejilla, cambiar colores o personalizar los ejes.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Guardar el gráfico. Para ello se utiliza la función &lt;code>savefig()&lt;/code>.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Mostrar el gráfico. Para ello se utiliza la función &lt;code>show()&lt;/code>.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;pre>&lt;code class="language-python"># Importar el módulo pyplot con el alias plt
import matplotlib.pyplot as plt
# Crear la figura y los ejes
fig, ax = plt.subplots()
# Dibujar puntos
ax.scatter(x = [1, 2, 3], y = [3, 2, 1])
# Guardar el gráfico en formato png
plt.savefig('diagrama-dispersion.png')
# Mostrar el gráfico
plt.show()
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="../img/diagrama-dispersion.png" alt="Gráfico con matplotlib">&lt;/p>
&lt;h2 id="diagramas-de-dispersión-o-puntos">Diagramas de dispersión o puntos&lt;/h2>
&lt;ul>
&lt;li>&lt;code>scatter(x, y)&lt;/code>: Dibuja un diagrama de puntos con las coordenadas de la lista &lt;code>x&lt;/code> en el eje X y las coordenadas de la lista &lt;code>y&lt;/code> en el eje Y.
&lt;a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.scatter.html#matplotlib.pyplot.scatter" target="_blank" rel="noopener">&lt;i class="fa fa-info-circle" aria-hidden="true">&lt;/i>&lt;/a>&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-python">import matplotlib.pyplot as plt
fig, ax = plt.subplots()
ax.scatter([1, 2, 3, 4], [1, 2, 0, 0.5])
plt.show()
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="../img/diagrama-puntos.png" alt="Gráfico con matplotlib">&lt;/p>
&lt;h2 id="diagramas-de-líneas">Diagramas de líneas&lt;/h2>
&lt;ul>
&lt;li>&lt;code>plot(x, y)&lt;/code>: Dibuja un polígono con los vértices dados por las coordenadas de la lista &lt;code>x&lt;/code> en el eje X y las coordenadas de la lista &lt;code>y&lt;/code> en el eje Y.
&lt;a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot" target="_blank" rel="noopener">&lt;i class="fa fa-info-circle" aria-hidden="true">&lt;/i>&lt;/a>&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-python">import matplotlib.pyplot as plt
fig, ax = plt.subplots()
ax.plot([1, 2, 3, 4], [1, 2, 0, 0.5])
plt.show()
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="../img/diagrama-lineas.png" alt="Gráfico con matplotlib">&lt;/p>
&lt;h2 id="diagramas-de-areas">Diagramas de areas&lt;/h2>
&lt;ul>
&lt;li>&lt;code>fill_between(x, y)&lt;/code>: Dibuja el area bajo el polígono con los vértices dados por las coordenadas de la lista &lt;code>x&lt;/code> en el eje X y las coordenadas de la lista &lt;code>y&lt;/code> en el eje Y.
&lt;a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.fill_between.html#matplotlib.pyplot.fill_between" target="_blank" rel="noopener">&lt;i class="fa fa-info-circle" aria-hidden="true">&lt;/i>&lt;/a>&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-python">import matplotlib.pyplot as plt
fig, ax = plt.subplots()
ax.fill_between([1, 2, 3, 4], [1, 2, 0, 0.5])
plt.show()
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="../img/diagrama-areas.png" alt="Gráfico con matplotlib">&lt;/p>
&lt;h2 id="diagramas-de-barras-verticales">Diagramas de barras verticales&lt;/h2>
&lt;ul>
&lt;li>&lt;code>bar(x, y)&lt;/code>: Dibuja un diagrama de barras verticales donde &lt;code>x&lt;/code> es una lista con la posición de las barras en el eje X, e &lt;code>y&lt;/code> es una lista con la altura de las barras en el eje Y.
&lt;a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.bar.html#matplotlib.pyplot.bar" target="_blank" rel="noopener">&lt;i class="fa fa-info-circle" aria-hidden="true">&lt;/i>&lt;/a>&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-python">import matplotlib.pyplot as plt
fig, ax = plt.subplots()
ax.bar([1, 2, 3], [3, 2, 1])
plt.show()
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="../img/diagrama-barras.png" alt="Gráfico con matplotlib">&lt;/p>
&lt;h2 id="diagramas-de-barras-horizontales">Diagramas de barras horizontales&lt;/h2>
&lt;ul>
&lt;li>&lt;code>barh(x, y)&lt;/code>: Dibuja un diagrama de barras horizontales donde &lt;code>x&lt;/code> es una lista con la posición de las barras en el eje Y, e &lt;code>y&lt;/code> es una lista con la longitud de las barras en el eje X.
&lt;a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.barh.html#matplotlib.pyplot.barh" target="_blank" rel="noopener">&lt;i class="fa fa-info-circle" aria-hidden="true">&lt;/i>&lt;/a>&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-python">import matplotlib.pyplot as plt
fig, ax = plt.subplots()
ax.barh([1, 2, 3], [3, 2, 1])
plt.show()
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="../img/diagrama-barras-horizontales.png" alt="Gráfico con matplotlib">&lt;/p>
&lt;h2 id="histogramas">Histogramas&lt;/h2>
&lt;ul>
&lt;li>&lt;code>hist(x, bins)&lt;/code>: Dibuja un histograma con las frecuencias resultantes de agrupar los datos de la lista &lt;code>x&lt;/code> en las clases definidas por la lista &lt;code>bins&lt;/code>.
&lt;a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.hist.html#matplotlib.pyplot.hist" target="_blank" rel="noopener">&lt;i class="fa fa-info-circle" aria-hidden="true">&lt;/i>&lt;/a>&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-python">import numpy as np
import matplotlib.pyplot as plt
fig, ax = plt.subplots()
x = np.random.normal(5, 1.5, size=1000)
ax.hist(x, np.arange(0, 11))
plt.show()
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="../img/histograma.png" alt="Gráfico con matplotlib">&lt;/p>
&lt;h2 id="diagramas-de-sectores">Diagramas de sectores&lt;/h2>
&lt;ul>
&lt;li>&lt;code>pie(x)&lt;/code>: Dibuja un diagrama de sectores con las frecuencias de la lista &lt;code>x&lt;/code>.
&lt;a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.pie.html#matplotlib.pyplot.pie" target="_blank" rel="noopener">&lt;i class="fa fa-info-circle" aria-hidden="true">&lt;/i>&lt;/a>&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-python">import matplotlib.pyplot as plt
fig, ax = plt.subplots()
ax.pie([5, 4, 3, 2, 1])
plt.show()
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="../img/diagrama-sectores.png" alt="Gráfico con matplotlib">&lt;/p>
&lt;h2 id="diagramas-de-caja-y-bigotes">Diagramas de caja y bigotes&lt;/h2>
&lt;ul>
&lt;li>&lt;code>boxplot(x)&lt;/code>: Dibuja un diagrama de caja y bigotes con los datos de la lista &lt;code>x&lt;/code>.
&lt;a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.boxplot.html#matplotlib.pyplot.boxplot" target="_blank" rel="noopener">&lt;i class="fa fa-info-circle" aria-hidden="true">&lt;/i>&lt;/a>&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-python">import matplotlib.pyplot as plt
fig, ax = plt.subplots()
ax.boxplot([1, 2, 1, 2, 3, 4, 3, 3, 5, 7])
plt.show()
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="../img/diagrama-caja.png" alt="Gráfico con matplotlib">&lt;/p>
&lt;h2 id="diagramas-de-violín">Diagramas de violín&lt;/h2>
&lt;ul>
&lt;li>&lt;code>violinplot(x)&lt;/code>: Dibuja un diagrama de violín con los datos de la lista &lt;code>x&lt;/code>.
&lt;a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.violinplot.html#matplotlib.pyplot.violinplot" target="_blank" rel="noopener">&lt;i class="fa fa-info-circle" aria-hidden="true">&lt;/i>&lt;/a>&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-python">import matplotlib.pyplot as plt
fig, ax = plt.subplots()
ax.violinplot([1, 2, 1, 2, 3, 4, 3, 3, 5, 7])
plt.show()
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="../img/diagrama-violin.png" alt="Gráfico con matplotlib">&lt;/p>
&lt;h2 id="diagramas-de-contorno">Diagramas de contorno&lt;/h2>
&lt;ul>
&lt;li>&lt;code>contourf(x, y, z)&lt;/code>: Dibuja un diagrama de contorno con las curvas de nivel de la superficie dada por los puntos con las coordenadas de las listas &lt;code>x&lt;/code>, &lt;code>y&lt;/code> y &lt;code>z&lt;/code> en los ejes X, Y y Z respectivamente.
&lt;a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.contourf.html#matplotlib.pyplot.contourf" target="_blank" rel="noopener">&lt;i class="fa fa-info-circle" aria-hidden="true">&lt;/i>&lt;/a>&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-python">import matplotlib.pyplot as plt
fig, ax = plt.subplots()
x = np.linspace(-3.0, 3.0, 100)
y = np.linspace(-3.0, 3.0, 100)
x, y = np.meshgrid(x, y)
z = np.sqrt(x**2 + 2*y**2)
ax.contourf(x, y, z)
plt.show()
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="../img/diagrama-contorno.png" alt="Gráfico con matplotlib">&lt;/p>
&lt;h2 id="mapas-de-color">Mapas de color&lt;/h2>
&lt;ul>
&lt;li>&lt;code>imshow(x)&lt;/code>: Dibuja un mapa de color a partir de una matriz (array bidimensiona) &lt;code>x&lt;/code>.
&lt;a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.imshow.html#matplotlib.pyplot.imshow" target="_blank" rel="noopener">&lt;i class="fa fa-info-circle" aria-hidden="true">&lt;/i>&lt;/a>&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-python">import matplotlib.pyplot as plt
fig, ax = plt.subplots()
x = np.random.random((16, 16))
ax.imshow(x)
plt.show()
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="../img/mapa-calor.png" alt="Gráfico con matplotlib">&lt;/p>
&lt;ul>
&lt;li>&lt;code>hist2d(x, y)&lt;/code>: Dibuja un mapa de color que simula un histograma bidimensional, donde los colores de los cuadrados dependen de las frecuencias de las clases de la muestra dada por las listas &lt;code>x&lt;/code> e &lt;code>y&lt;/code>.
&lt;a href="https://matplotlib.org/api/_as_gen/matplotlib.pyplot.hist2d.html#matplotlib.pyplot.hist2d" target="_blank" rel="noopener">&lt;i class="fa fa-info-circle" aria-hidden="true">&lt;/i>&lt;/a>&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-python">import matplotlib.pyplot as plt
fig, ax = plt.subplots()
x, y = np.random.multivariate_normal(mean=[0.0, 0.0], cov=[[1.0, 0.4], [0.4, 0.5]], size=1000).T
ax.hist2d(x, y)
plt.show()
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="../img/histograma2D.png" alt="Gráfico con matplotlib">&lt;/p>
&lt;h2 id="cambiar-el-aspecto-de-los-gráficos">Cambiar el aspecto de los gráficos&lt;/h2>
&lt;p>Los gráficos creados con Matplotlib son personalizables y puede cambiarse el aspecto de casi todos sus elementos. Los elementos que suelen modificarse más a menudo son:&lt;/p>
&lt;ul>
&lt;li>Colores&lt;/li>
&lt;li>Marcadores de puntos&lt;/li>
&lt;li>Estilo de líneas&lt;/li>
&lt;li>Títulos&lt;/li>
&lt;li>Ejes&lt;/li>
&lt;li>Leyenda&lt;/li>
&lt;li>Rejilla&lt;/li>
&lt;/ul>
&lt;h2 id="colores">Colores&lt;/h2>
&lt;p>Para cambiar el color de los objetos se utiliza el parámetro &lt;code>color = nombre-color&lt;/code>, donde &lt;code>nombre-color&lt;/code> es una cadena con el nombre del color de entre los
&lt;a href="https://matplotlib.org/3.2.1/gallery/color/named_colors.html" target="_blank" rel="noopener">colores disponibles&lt;/a>.&lt;/p>
&lt;pre>&lt;code class="language-python">import matplotlib.pyplot as plt
fig, ax = plt.subplots()
dias = ['L', 'M', 'X', 'J', 'V', 'S', 'D']
temperaturas = {'Madrid':[28.5, 30.5, 31, 30, 28, 27.5, 30.5], 'Barcelona':[24.5, 25.5, 26.5, 25, 26.5, 24.5, 25]}
ax.plot(dias, temperaturas['Madrid'], color = 'tab:purple')
ax.plot(dias, temperaturas['Barcelona'], color = 'tab:green')
plt.show()
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="../img/lineas-colores.png" alt="Gráfico con matplotlib">&lt;/p>
&lt;h2 id="marcadores">Marcadores&lt;/h2>
&lt;p>Para cambiar la forma de los puntos marcadores se utiliza el parámetro &lt;code>marker = nombre-marcador&lt;/code> donde &lt;code>nombre-marcador&lt;/code> es una cadena con el nombre del marcador de entre los
&lt;a href="https://matplotlib.org/3.2.1/api/markers_api.html" target="_blank" rel="noopener">marcadores disponibles&lt;/a>&lt;/p>
&lt;pre>&lt;code class="language-python">import matplotlib.pyplot as plt
fig, ax = plt.subplots()
dias = ['L', 'M', 'X', 'J', 'V', 'S', 'D']
temperaturas = {'Madrid':[28.5, 30.5, 31, 30, 28, 27.5, 30.5], 'Barcelona':[24.5, 25.5, 26.5, 25, 26.5, 24.5, 25]}
ax.plot(dias, temperaturas['Madrid'], marker = '^')
ax.plot(dias, temperaturas['Barcelona'], marker = 'o')
plt.show()
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="../img/lineas-marcadores.png" alt="Gráfico con matplotlib">&lt;/p>
&lt;h2 id="líneas">Líneas&lt;/h2>
&lt;p>Para cambiar el estilo de las líneas se utiliza el parámetro &lt;code>linestyle = nombre-estilo&lt;/code> donde &lt;code>nombre-estilo&lt;/code> es una cadena con el nombre del estilo de entre los
&lt;a href="https://matplotlib.org/3.2.1/gallery/lines_bars_and_markers/linestyles.html" target="_blank" rel="noopener">estilos disponibles&lt;/a>&lt;/p>
&lt;pre>&lt;code class="language-python">import matplotlib.pyplot as plt
fig, ax = plt.subplots()
dias = ['L', 'M', 'X', 'J', 'V', 'S', 'D']
temperaturas = {'Madrid':[28.5, 30.5, 31, 30, 28, 27.5, 30.5], 'Barcelona':[24.5, 25.5, 26.5, 25, 26.5, 24.5, 25]}
ax.plot(dias, temperaturas['Madrid'], linestyle = 'dashed')
ax.plot(dias, temperaturas['Barcelona'], linestyle = 'dotted')
plt.show()
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="../img/lineas-estilo.png" alt="Gráfico con matplotlib">&lt;/p>
&lt;h2 id="títulos">Títulos&lt;/h2>
&lt;p>Para añadir un título principal al gráfico se utiliza el siguiente método:&lt;/p>
&lt;ul>
&lt;li>&lt;code>ax.set_title(titulo, loc=alineacion, fontdict=fuente)&lt;/code> : Añade un título con el contenido de la cadena &lt;code>titulo&lt;/code> a los ejes &lt;code>ax&lt;/code>. El parámetro &lt;code>loc&lt;/code> indica la alineación del título, que puede ser &lt;code>'left'&lt;/code> (izquierda), &lt;code>'center'&lt;/code> (centro) o &lt;code>'right'&lt;/code> (derecha), y el parámetro &lt;code>fontdict&lt;/code> indica mediante un diccionario las características de la fuente (la el tamaño &lt;code>fontisize&lt;/code>, el grosor &lt;code>fontweight&lt;/code> o el color &lt;code>color&lt;/code>).&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-python">import matplotlib.pyplot as plt
fig, ax = plt.subplots()
dias = ['L', 'M', 'X', 'J', 'V', 'S', 'D']
temperaturas = {'Madrid':[28.5, 30.5, 31, 30, 28, 27.5, 30.5], 'Barcelona':[24.5, 25.5, 26.5, 25, 26.5, 24.5, 25]}
ax.plot(dias, temperaturas['Madrid'])
ax.plot(dias, temperaturas['Barcelona'])
ax.set_title('Evolución de la temperatura diaria', loc = &amp;quot;left&amp;quot;, fontdict = {'fontsize':14, 'fontweight':'bold', 'color':'tab:blue'})
plt.show()
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="../img/titulo.png" alt="Gráfico con matplotlib">&lt;/p>
&lt;h2 id="ejes">Ejes&lt;/h2>
&lt;p>Para cambiar el aspecto de los ejes se suelen utilizar los siguientes métodos:&lt;/p>
&lt;ul>
&lt;li>&lt;code>ax.set_xlabel(titulo)&lt;/code> : Añade un título con el contenido de la cadena &lt;code>titulo&lt;/code> al eje x de &lt;code>ax&lt;/code>. Se puede personalizar la alineación y la fuente con los mismos parámetros que para el título principal.&lt;/li>
&lt;li>&lt;code>ax.set_ylabel(titulo)&lt;/code> : Añade un título con el contenido de la cadena &lt;code>titulo&lt;/code> al eje y de &lt;code>ax&lt;/code>. Se puede personalizar la alineación y la fuente con los mismos parámetros que para el título principal.&lt;/li>
&lt;li>&lt;code>ax.set_xlim([limite-inferior, limite-superior])&lt;/code> : Establece los límites que se muestran en el eje x de &lt;code>ax&lt;/code>.&lt;/li>
&lt;li>&lt;code>ax.set_ylim([limite-inferior, limite-superior])&lt;/code> : Establece los límites que se muestran en el eje y de &lt;code>ax&lt;/code>.&lt;/li>
&lt;li>&lt;code>ax.set_xticks(marcas)&lt;/code> : Dibuja marcas en el eje x de &lt;code>ax&lt;/code> en las posiciones indicadas en la lista &lt;code>marcas&lt;/code>.&lt;/li>
&lt;li>&lt;code>ax.set_yticks(marcas)&lt;/code> : Dibuja marcas en el eje y de &lt;code>ax&lt;/code> en las posiciones indicadas en la lista &lt;code>marcas&lt;/code>.&lt;/li>
&lt;li>&lt;code>ax.set_xscale(escala)&lt;/code> : Establece la escala del eje x de &lt;code>ax&lt;/code>, donde el parámetro &lt;code>escala&lt;/code> puede ser &lt;code>'linear'&lt;/code> (lineal) o &lt;code>'log'&lt;/code> (logarítmica).&lt;/li>
&lt;li>&lt;code>ax.set_yscale(escala)&lt;/code> : Establece la escala del eje y de &lt;code>ax&lt;/code>, donde el parámetro &lt;code>escala&lt;/code> puede ser &lt;code>'linear'&lt;/code> (lineal) o &lt;code>'log'&lt;/code> (logarítmica).&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-python">import matplotlib.pyplot as plt
fig, ax = plt.subplots()
dias = ['L', 'M', 'X', 'J', 'V', 'S', 'D']
temperaturas = {'Madrid':[28.5, 30.5, 31, 30, 28, 27.5, 30.5], 'Barcelona':[24.5, 25.5, 26.5, 25, 26.5, 24.5, 25]}
ax.plot(dias, temperaturas['Madrid'])
ax.plot(dias, temperaturas['Barcelona'])
ax.set_xlabel(&amp;quot;Días&amp;quot;, fontdict = {'fontsize':14, 'fontweight':'bold', 'color':'tab:blue'})
ax.set_ylabel(&amp;quot;Temperatura ºC&amp;quot;)
ax.set_ylim([20,35])
ax.set_yticks(range(20, 35))
plt.show()
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="../img/ejes.png" alt="Gráfico con matplotlib">&lt;/p>
&lt;h2 id="leyenda">Leyenda&lt;/h2>
&lt;p>Para añadir una leyenda a un gráfico se utiliza el siguiente método:&lt;/p>
&lt;ul>
&lt;li>&lt;code>ax.legend(leyendas, loc = posición)&lt;/code> : Dibuja un leyenda en los ejes &lt;code>ax&lt;/code> con los nombres indicados en la lista &lt;code>leyendas&lt;/code>. El parámetro &lt;code>loc&lt;/code> indica la posición en la que se dibuja la leyenda y puede ser &lt;code>'upper left'&lt;/code> (arriba izquierda), &lt;code>'upper center'&lt;/code> (arriba centro), &lt;code>'upper right'&lt;/code> (arriba derecha), &lt;code>'center left'&lt;/code> (centro izquierda), &lt;code>'center'&lt;/code> (centro), &lt;code>'center right'&lt;/code> (centro derecha), &lt;code>'lower left'&lt;/code> (abajo izquierda), &lt;code>'lower center'&lt;/code> (abajo centro), &lt;code>'lower right'&lt;/code> (abajo derecha). Se puede omitir la lista &lt;code>leyendas&lt;/code> si se indica la leyenda de cada serie en la función que la dibuja mediante el parámetro &lt;code>label&lt;/code>.&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-python">import matplotlib.pyplot as plt
fig, ax = plt.subplots()
dias = ['L', 'M', 'X', 'J', 'V', 'S', 'D']
temperaturas = {'Madrid':[28.5, 30.5, 31, 30, 28, 27.5, 30.5], 'Barcelona':[24.5, 25.5, 26.5, 25, 26.5, 24.5, 25]}
ax.plot(dias, temperaturas['Madrid'], label = 'Madrid')
ax.plot(dias, temperaturas['Barcelona'], label = 'Barcelona')
ax.legend(loc = 'upper right')
plt.show()
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="../img/leyenda.png" alt="Gráfico con matplotlib">&lt;/p>
&lt;h2 id="rejilla">Rejilla&lt;/h2>
&lt;p>&lt;code>ax.grid(axis=ejes, color=color, linestyle=estilo)&lt;/code> : Dibuja una rejilla en los ejes de &lt;code>ax&lt;/code>. El parámetro &lt;code>axis&lt;/code> indica los ejes sobre los que se dibuja la regilla y puede ser &lt;code>'x'&lt;/code> (eje x), &lt;code>'y'&lt;/code> (eje y) o &lt;code>'both'&lt;/code> (ambos). Los parámetros &lt;code>color&lt;/code> y &lt;code>linestyle&lt;/code> establecen el color y el estilo de las líneas de la rejilla, y pueden tomar los mismos valores vistos en los apartados de colores y líneas.&lt;/p>
&lt;pre>&lt;code class="language-python">import matplotlib.pyplot as plt
fig, ax = plt.subplots()
dias = ['L', 'M', 'X', 'J', 'V', 'S', 'D']
temperaturas = {'Madrid':[28.5, 30.5, 31, 30, 28, 27.5, 30.5], 'Barcelona':[24.5, 25.5, 26.5, 25, 26.5, 24.5, 25]}
ax.plot(dias, temperaturas['Madrid'])
ax.plot(dias, temperaturas['Barcelona'])
ax.grid(axis = 'y', color = 'gray', linestyle = 'dashed')
plt.show()
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="../img/rejilla.png" alt="Gráfico con matplotlib">&lt;/p>
&lt;h2 id="múltiples-gráficos">Múltiples gráficos&lt;/h2>
&lt;p>Es posible dibujar varios gráficos en distintos ejes en una misma figura organizados en forma de tabla. Para ello, cuando se inicializa la figura y los ejes, hay que pasarle a la función &lt;code>subplots&lt;/code> el número de filas y columnas de la tabla que contendrá los gráficos. Con esto los distintos ejes se organizan en un array y se puede acceder a cada uno de ellos a través de sus índices. Si se quiere que los distintos ejes compartan los mismos límites para los ejes se pueden pasar los parámetros &lt;code>sharex = True&lt;/code> para el eje x o &lt;code>sharey = True&lt;/code> para el eje y.&lt;/p>
&lt;pre>&lt;code class="language-python">import matplotlib.pyplot as plt
fig, ax = plt.subplots(2, 2, sharey = True)
dias = ['L', 'M', 'X', 'J', 'V', 'S', 'D']
temperaturas = {'Madrid':[28.5, 30.5, 31, 30, 28, 27.5, 30.5], 'Barcelona':[24.5, 25.5, 26.5, 25, 26.5, 24.5, 25]}
ax[0, 0].plot(dias, temperaturas['Madrid'])
ax[0, 1].plot(dias, temperaturas['Barcelona'], color = 'tab:orange')
ax[1, 0].bar(dias, temperaturas['Madrid'])
ax[1, 1].bar(dias, temperaturas['Barcelona'], color = 'tab:orange')
plt.show()
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="../img/multiples-graficos.png" alt="Gráfico con matplotlib">&lt;/p>
&lt;h2 id="integración-con-pandas">Integración con Pandas&lt;/h2>
&lt;p>Matplotlib se integra a la perfección con la librería Pandas, permitiendo dibujar gráficos a partir de los datos de las series y DataFrames de Pandas.&lt;/p>
&lt;ul>
&lt;li>&lt;code>df.plot(kind=tipo, x=columnax, y=columnay, ax=ejes)&lt;/code> : Dibuja un diagrama del tipo indicado por el parámetro &lt;code>kind&lt;/code> en los ejes indicados en el parámetro &lt;code>ax&lt;/code>, representando en el eje x la columna del parámetro &lt;code>x&lt;/code> y en el eje y la columna del parámetro &lt;code>y&lt;/code>. El parámetro &lt;code>kind&lt;/code> puede tomar como argumentos &lt;code>'line'&lt;/code> (lineas), &lt;code>'scatter'&lt;/code> (puntos), &lt;code>'bar'&lt;/code> (barras verticales), &lt;code>'barh'&lt;/code> (barras horizontales), &lt;code>'hist'&lt;/code> (histograma), &lt;code>'box'&lt;/code> (cajas), &lt;code>'density'&lt;/code> (densidad), &lt;code>'area'&lt;/code> (area) o &lt;code>'pie'&lt;/code> (sectores). Es posible pasar otros parámetros para indicar el color, el marcador o el estilo de línea como se vió en los apartados anteriores.&lt;/li>
&lt;/ul>
&lt;pre>&lt;code class="language-python">import pandas as pd
import matplotlib.pyplot as plt
df = pd.DataFrame({'Días':['L', 'M', 'X', 'J', 'V', 'S', 'D'],
'Madrid':[28.5, 30.5, 31, 30, 28, 27.5, 30.5],
'Barcelona':[24.5, 25.5, 26.5, 25, 26.5, 24.5, 25]})
fig, ax = plt.subplots()
df.plot(x = 'Días', y = 'Madrid', ax = ax)
df.plot(x = 'Días', y = 'Barcelona', ax = ax)
plt.show()
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="../img/matplotlib-pandas.png" alt="Gráfico con matplotlib">&lt;/p>
&lt;p>Si no se indican los parámetros &lt;code>x&lt;/code> e &lt;code>y&lt;/code> se representa el índice de las filas en el eje x y una serie por cada columna del Dataframe. Las columnas no numéricas se ignoran.&lt;/p>
&lt;pre>&lt;code class="language-python">import pandas as pd
import matplotlib.pyplot as plt
df = pd.DataFrame({'Días':['L', 'M', 'X', 'J', 'V', 'S', 'D'],
'Madrid':[28.5, 30.5, 31, 30, 28, 27.5, 30.5],
'Barcelona':[24.5, 25.5, 26.5, 25, 26.5, 24.5, 25]})
df = df.set_index('Días')
fig, ax = plt.subplots()
df.plot(ax = ax)
plt.show()
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="../img/matplotlib-pandas2.png" alt="Gráfico con matplotlib">&lt;/p></description></item></channel></rss>