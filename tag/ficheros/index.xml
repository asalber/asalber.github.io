<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ficheros | Aprende con Alf</title><link>/tag/ficheros/</link><atom:link href="/tag/ficheros/index.xml" rel="self" type="application/rss+xml"/><description>Ficheros</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>es-es</language><lastBuildDate>Thu, 01 Jan 1970 00:33:39 +0000</lastBuildDate><image><url>/images/logo_hude38443eeb2faa5fa84365aba7d86a77_3514_300x300_fit_lanczos_3.png</url><title>Ficheros</title><link>/tag/ficheros/</link></image><item><title>Ejercicios de Ficheros</title><link>/docencia/python/ejercicios/ficheros/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docencia/python/ejercicios/ficheros/</guid><description>&lt;h2 id="ejercicio-1">Ejercicio 1&lt;/h2>
&lt;p>Escribir una función que pida un número entero entre 1 y 10 y guarde en un fichero con el nombre &lt;code>tabla-n.txt&lt;/code> la tabla de multiplicar de ese número, done &lt;code>n&lt;/code> es el número introducido.&lt;/p>
&lt;p>&lt;a href="https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/ficheros/ejercicio1.ipynb" class="btn btn-info">Solución&lt;/a>&lt;/p>
&lt;h2 id="ejercicio-2">Ejercicio 2&lt;/h2>
&lt;p>Escribir una función que pida un número entero entre 1 y 10, lea el fichero &lt;code>tabla-n.txt&lt;/code> con la tabla de multiplicar de ese número, done &lt;code>n&lt;/code> es el número introducido, y la muestre por pantalla. Si el fichero no existe debe mostrar un mensaje por pantalla informando de ello.&lt;/p>
&lt;p>&lt;a href="https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/ficheros/ejercicio2.ipynb" class="btn btn-info">Solución&lt;/a>&lt;/p>
&lt;h2 id="ejercicio-3">Ejercicio 3&lt;/h2>
&lt;p>Escribir una función que pida dos números &lt;code>n&lt;/code> y &lt;code>m&lt;/code> entre 1 y 10, lea el fichero &lt;code>tabla-n.txt&lt;/code> con la tabla de multiplicar de ese número, y muestre por pantalla la línea &lt;code>m&lt;/code> del fichero. Si el fichero no existe debe mostrar un mensaje por pantalla informando de ello.&lt;/p>
&lt;p>&lt;a href="https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/ficheros/ejercicio3.ipynb" class="btn btn-info">Solución&lt;/a>&lt;/p>
&lt;h2 id="ejercicio-4">Ejercicio 4&lt;/h2>
&lt;p>Escribir un programa que acceda a un fichero de internet mediante su url y muestre por pantalla el número de palabras que contiene.&lt;/p>
&lt;p>&lt;a href="https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/ficheros/ejercicio4.ipynb" class="btn btn-info">Solución&lt;/a>&lt;/p>
&lt;h2 id="ejercicio-5">Ejercicio 5&lt;/h2>
&lt;p>Escribir un programa que abra el fichero con información sobre el PIB per cápita de los países de la Unión Europea (url:&lt;code>https://ec.europa.eu/eurostat/estat-navtree-portlet-prod/BulkDownloadListing?file=data/sdg_08_10.tsv.gz&amp;amp;unzip=true&lt;/code>), pregunte por las iniciales de un país y muestre el PIB per cápita de ese país de todos los años disponibles.&lt;/p>
&lt;p>&lt;a href="https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/ficheros/ejercicio5.ipynb" class="btn btn-info">Solución&lt;/a>&lt;/p>
&lt;h2 id="ejercicio-6">Ejercicio 6&lt;/h2>
&lt;p>Escribir un programa para gestionar un listín telefónico con los nombres y los teléfonos de los clientes de una empresa. El programa incorporar funciones crear el fichero con el listín si no existe, para consultar el teléfono de un cliente, añadir el teléfono de un nuevo cliente y eliminar el teléfono de un cliente. El listín debe estar guardado en el fichero de texto &lt;code>listin.txt&lt;/code> donde el nombre del cliente y su teléfono deben aparecer separados por comas y cada cliente en una línea distinta.&lt;/p>
&lt;p>&lt;a href="https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/ficheros/ejercicio6.ipynb" class="btn btn-info">Solución&lt;/a>&lt;/p>
&lt;h2 id="ejercicio-7">Ejercicio 7&lt;/h2>
&lt;p>El fichero
&lt;a href="../soluciones/ficheros/cotizacion.csv">cotizacion.csv&lt;/a> contiene las cotizaciones de las empresas del IBEX35 con las siguientes columnas: &lt;code>Nombre&lt;/code> (nombre de la empresa), &lt;code>Final&lt;/code> (precio de la acción al cierre de bolsa), &lt;code>Máximo&lt;/code> (precio máximo de la acción durante la jornada), &lt;code>Mínimo&lt;/code> (precio mínimo de la acción durante la jornada), &lt;code>Volumen&lt;/code> (Volumen al cierre de bolsa), &lt;code>Efectivo&lt;/code> (capitalización al cierre en miles de euros).&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Construir una función reciba el fichero de cotizaciones y devuelva un diccionario con los datos del fichero por columnas.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Construir una función que reciba el diccionario devuelto por la función anterior y cree un fichero en formato csv con el mínimo, el máximo y la media de dada columna.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;a href="https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/ficheros/ejercicio7.ipynb" class="btn btn-info">Solución&lt;/a>&lt;/p>
&lt;h2 id="ejercicio-8">Ejercicio 8&lt;/h2>
&lt;p>El fichero
&lt;a href="../soluciones/ficheros/calificaciones.csv">calificaciones.csv&lt;/a> contiene las calificaciones de un curso. Durante el curso se realizaron dos exámenes parciales de teoría y un examen de prácticas. Los alumnos que tuvieron menos de 4 en alguno de estos exámenes pudieron repetirlo en la al final del curso (convocatoria ordinaria). Escribir un programa que contenga las siguientes funciones:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>Una función que reciba el fichero de calificaciones y devuelva una lista de diccionarios, donde cada diccionario contiene la información de los exámenes y la asistencia de un alumno. La lista tiene que estar ordenada por apellidos.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Una función que reciba una lista de diccionarios como la que devuelve la función anterior y añada a cada diccionario un nuevo par con la nota final del curso. El peso de cada parcial de teoría en la nota final es de un 30% mientras que el peso del examen de prácticas es de un 40%.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Una función que reciba una lista de diccionarios como la que devuelve la función anterior y devuelva dos listas, una con los alumnos aprobados y otra con los alumnos suspensos. Para aprobar el curso, la asistencia tiene que ser mayor o igual que el 75%, la nota de los exámenes parciales y de prácticas mayor o igual que 4 y la nota final mayor o igual que 5.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;a href="https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/ficheros/ejercicio8.ipynb" class="btn btn-info">Solución&lt;/a>&lt;/p></description></item><item><title>Ficheros</title><link>/docencia/python/manual/ficheros/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docencia/python/manual/ficheros/</guid><description>&lt;h2 id="ficheros">Ficheros&lt;/h2>
&lt;p>Hasta ahora hemos visto como interactuar con un programa a través del teclado (entrada de datos) y la terminal (salida), pero en la mayor parte de las aplicaciones reales tendremos que leer y escribir datos en ficheros.&lt;/p>
&lt;p>Al utilizar ficheros para guardar los datos estos perdurarán tras la ejecución del programa, pudiendo ser consultados o utilizados más tarde.&lt;/p>
&lt;p>Las operaciones más habituales con ficheros son:&lt;/p>
&lt;ul>
&lt;li>Crear un fichero.&lt;/li>
&lt;li>Escribir datos en un fichero.&lt;/li>
&lt;li>Leer datos de un fichero.&lt;/li>
&lt;li>Borrar un fichero.&lt;/li>
&lt;/ul>
&lt;h3 id="creación-y-escritura-de-ficheros">Creación y escritura de ficheros&lt;/h3>
&lt;p>Para crear un fichero nuevo se utiliza la instrucción&lt;/p>
&lt;p>&lt;code>open(ruta, 'w')&lt;/code> : Crea el fichero con la ruta &lt;code>ruta&lt;/code>, lo abre en modo escritura (el argumento &amp;lsquo;w&amp;rsquo; significa &lt;em>write&lt;/em>) y devuelve un objeto que lo referencia.&lt;/p>
&lt;p>&lt;i class="fa fa-exclamation-triangle" style="color:red;">&lt;/i> Si el fichero indicado por la ruta ya existe en el sistema, se reemplazará por el nuevo.&lt;/p>
&lt;p>Una vez creado el fichero, para escribir datos en él se utiliza el método&lt;/p>
&lt;p>&lt;code>fichero.write(c)&lt;/code> : Escribe la cadena &lt;code>c&lt;/code> en el fichero referenciado por &lt;code>fichero&lt;/code>.&lt;/p>
&lt;pre>&lt;code class="language-python">&amp;gt;&amp;gt;&amp;gt; f = open('bienvenida.txt', 'w')
... f.write('¡Bienvenido a Python!')
&lt;/code>&lt;/pre>
&lt;h3 id="añadir-datos-a-un-fichero">Añadir datos a un fichero&lt;/h3>
&lt;p>Si en lugar de crear un fichero nuevo queremos añadir datos a un fichero existente se debe utilizar la instrucción&lt;/p>
&lt;p>&lt;code>open(ruta, 'a')&lt;/code> : Abre el fichero con la ruta &lt;code>ruta&lt;/code> en modo añadir (el argumento &amp;lsquo;a&amp;rsquo; significa &lt;em>append&lt;/em>) y devuelve un objeto que lo referencia.&lt;/p>
&lt;p>Una vez abierto el fichero, se utiliza el método de escritura anterior y los datos se añaden al final del fichero.&lt;/p>
&lt;pre>&lt;code class="language-python">&amp;gt;&amp;gt;&amp;gt; f = open('bienvenida.txt', 'a')
... f.write('\n¡Hasta pronto!')
&lt;/code>&lt;/pre>
&lt;h3 id="leer-datos-de-un-fichero">Leer datos de un fichero&lt;/h3>
&lt;p>Para abrir un fichero en modo lectura se utiliza la instrucción&lt;/p>
&lt;p>&lt;code>open(ruta, 'r')&lt;/code> : Abre el fichero con la ruta &lt;code>ruta&lt;/code> en modo lectura (el argumento &amp;lsquo;r&amp;rsquo; significa &lt;em>read&lt;/em>) y devuelve un objeto que lo referencia.&lt;/p>
&lt;p>Una vez abierto el fichero, se puede leer todo el contenido del fichero o se puede leer línea a línea.&lt;/p>
&lt;h3 id="leer-datos-de-un-fichero-1">Leer datos de un fichero&lt;/h3>
&lt;p>&lt;code>fichero.read()&lt;/code> : Devuelve todos los datos contenidos en &lt;code>fichero&lt;/code> como una cadena de caracteres.&lt;/p>
&lt;p>&lt;code>fichero.readlines()&lt;/code> : Devuelve una lista de cadenas de caracteres donde cada cadena es una linea del fichero referenciado por &lt;code>fichero&lt;/code>.&lt;/p>
&lt;pre>&lt;code class="language-python">&amp;gt;&amp;gt;&amp;gt; f = open('bienvenida.txt', 'r')
... print(f.read())
¡Bienvenido a Python!
¡Hasta pronto!
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-python">&amp;gt;&amp;gt;&amp;gt; f = open('bienvenida.txt', 'r')
... lineas = f.readlines()
&amp;gt;&amp;gt;&amp;gt; print(lineas)
['Bienvenido a Python!\n', '¡Hasta pronto!']
&lt;/code>&lt;/pre>
&lt;h3 id="cerrar-un-fichero">Cerrar un fichero&lt;/h3>
&lt;p>Para cerrar un fichero se utiliza el método&lt;/p>
&lt;p>&lt;code>fichero.close()&lt;/code> : Cierra el fichero referenciado por el objeto &lt;code>fichero&lt;/code>.&lt;/p>
&lt;p>Cuando se termina de trabajar con un fichero conviene cerrarlo, sobre todo si se abre en modo escritura, ya que mientras está abierto en este modo no se puede abrir por otra aplicación. Si no se cierra explícitamente un fichero, Python intentará cerrarlo cuando estime que ya no se va a usar más.&lt;/p>
&lt;pre>&lt;code class="language-python">&amp;gt;&amp;gt;&amp;gt; f = open('bienvenida.txt'):
... print(f.read())
... f.close() # Cierre del fichero
...
¡Bienvenido a Python!
¡Hasta pronto!
&lt;/code>&lt;/pre>
&lt;h3 id="renombrado-y-borrado-de-un-fichero">Renombrado y borrado de un fichero&lt;/h3>
&lt;p>Para renombra o borrar un fichero se utilizan funciones del módulo &lt;code>os&lt;/code>.&lt;/p>
&lt;p>&lt;code>os.rename(ruta1, ruta2)&lt;/code> : Renombra y mueve el fichero de la ruta &lt;code>ruta1&lt;/code> a la ruta &lt;code>ruta2&lt;/code>.&lt;/p>
&lt;p>&lt;code>os.remove(ruta)&lt;/code> : Borra el fichero de la ruta &lt;code>ruta&lt;/code>.&lt;/p>
&lt;p>Antes de borrar o renombra un directorio conviene comprobar que existe para que no se produzca un error. Para ello se utiliza la función&lt;/p>
&lt;p>&lt;code>os.path.isfile(ruta)&lt;/code> : Devuelve &lt;code>True&lt;/code> si existe un fichero en la ruta &lt;code>ruta&lt;/code> y &lt;code>False&lt;/code> en caso contrario.&lt;/p>
&lt;h3 id="renombrado-y-borrado-de-un-fichero-o-directorio">Renombrado y borrado de un fichero o directorio&lt;/h3>
&lt;pre>&lt;code class="language-python">&amp;gt;&amp;gt;&amp;gt; import os
&amp;gt;&amp;gt;&amp;gt; f = 'bienvenida.txt'
&amp;gt;&amp;gt;&amp;gt; if os.path.isfile(f):
... os.rename(f, 'saludo.txt') # renombrado
... else:
... print('¡El fichero', f, 'no existe!')
...
&amp;gt;&amp;gt;&amp;gt; f = 'saludo.txt'
&amp;gt;&amp;gt;&amp;gt; if os.path.isfile(f):
... os.remove(f) # borrado
... else:
... print('¡El fichero', f, 'no existe!')
...
&lt;/code>&lt;/pre>
&lt;h3 id="creación-cambio-y-eliminación-de-directorios">Creación, cambio y eliminación de directorios&lt;/h3>
&lt;p>Para trabajar con directorios también se utilizan funciones del módulo &lt;code>os&lt;/code>.&lt;/p>
&lt;p>&lt;code>os.listdir(ruta)&lt;/code> : Devuelve una lista con los ficheros y directiorios contenidos en la ruta &lt;code>ruta&lt;/code>.&lt;/p>
&lt;p>&lt;code>os.mkdir(ruta)&lt;/code> : Crea un nuevo directorio en la ruta &lt;code>ruta&lt;/code>.&lt;/p>
&lt;p>&lt;code>os.chdir(ruta)&lt;/code> : Cambia el directorio actual al indicado por la ruta &lt;code>ruta&lt;/code>.&lt;/p>
&lt;p>&lt;code>os.getcwd()&lt;/code> : Devuelve una cadena con la ruta del directorio actual.&lt;/p>
&lt;p>&lt;code>os.rmdir(ruta)&lt;/code> : Borra el directorio de la ruta &lt;code>ruta&lt;/code>, siempre y cuando esté vacío.&lt;/p>
&lt;h3 id="leer-un-fichero-de-internet">Leer un fichero de internet&lt;/h3>
&lt;p>Para leer un fichero de internet hay que utilizar la función &lt;code>urlopen&lt;/code> del módulo &lt;code>urllib.request&lt;/code>.&lt;/p>
&lt;p>&lt;code>urlopen(url)&lt;/code> : Abre el fichero con la &lt;code>url&lt;/code> especificada y devuelve un objeto del tipo fichero al que se puede acceder con los métodos de lectura de ficheros anteriores.&lt;/p>
&lt;pre>&lt;code class="language-python">&amp;gt;&amp;gt;&amp;gt; from urllib import request
&amp;gt;&amp;gt;&amp;gt; f = request.urlopen('https://raw.githubusercontent.com/asalber/asalber.github.io/master/README.md')
&amp;gt;&amp;gt;&amp;gt; datos = f.read()
&amp;gt;&amp;gt;&amp;gt; print(datos.decode('utf-8'))
Aprende con Alf
===============
Este es el repositorio del sitio web Aprende con Alf: http://aprendeconalf.es
&lt;/code>&lt;/pre></description></item><item><title>Ajedrez</title><link>/docencia/python/retos/ajedrez/</link><pubDate>Thu, 01 Jan 1970 00:33:39 +0000</pubDate><guid>/docencia/python/retos/ajedrez/</guid><description>&lt;h2 id="tarea-1">Tarea 1&lt;/h2>
&lt;p>La primera tarea consiste en escribir un programa que guarde en un fichero la secuencia de tableros de una partida de ajedrez. Partiremos del tablero inicial donde las filas del tablero están separadas por cambios de línea y las columnas por tabuladores.&lt;/p>
&lt;p>El programa debe guardar el tablero inicial en un fichero con el nombre que elija el usuario. Después debe preguntar al usuario si quiere hacer un movimiento o terminar la partida. Cada vez que el usuario quiera hacer un nuevo movimiento debe preguntar la fila y la columna de la pieza que quiere mover y la fila y la columna a la que la quiere mover. Tras ello añadirá el tablero resultante al final del fichero anterior.&lt;/p>
&lt;p>El fichero
&lt;a href="doc/partida-ajedrez.txt">partida-ajedrez.txt&lt;/a> contiene un ejemplo con el fichero resultante de una partida con 3 movimientos.&lt;/p>
&lt;h2 id="tarea-2">Tarea 2&lt;/h2>
&lt;p>Una vez generado el fichero con los tableros sucesivos de una partida de ajedrez, el programa preguntará por un movimiento y mostrará por pantalla el tablero correspondiente ese movimiento.
Por ejemplo, utilizando el fichero
&lt;a href="doc/partida-ajedrez.txt">partida-ajedrez.txt&lt;/a>, si el usuario introduce el movimiento 2, debería mostrar por pantalla el siguiente tablero:&lt;/p>
&lt;pre>&lt;code class="language-sh">♜ ♞ ♝ ♛ ♚ ♝ ♞ ♜
♟ ♟ ♟ ♟ ♟ ♟ ♟
♟
♙
♙ ♙ ♙ ♙ ♙ ♙ ♙
♖ ♘ ♗ ♕ ♔ ♗ ♘ ♖
&lt;/code>&lt;/pre>
&lt;h2 id="solución">Solución&lt;/h2>
&lt;p>&lt;a href="https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/retos/soluciones/ajedrez.ipynb" class="btn btn-info" target="_blank">Solución&lt;/a>&lt;/p></description></item></channel></rss>