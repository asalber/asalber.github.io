<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Numpy | Aprende con Alf</title>
    <link>/tag/numpy/</link>
      <atom:link href="/tag/numpy/index.xml" rel="self" type="application/rss+xml" />
    <description>Numpy</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>es-es</language>
    <image>
      <url>/images/logo_hude38443eeb2faa5fa84365aba7d86a77_3514_300x300_fit_lanczos_3.png</url>
      <title>Numpy</title>
      <link>/tag/numpy/</link>
    </image>
    
    <item>
      <title>La librería Numpy</title>
      <link>/docencia/python/manual/numpy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/manual/numpy/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://www.numpy.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NumPy&lt;/a&gt; es una librería de Python especializada en el cálculo numérico y el análisis de datos, especialmente para un gran volumen de datos.&lt;/p&gt;
&lt;p&gt;Incorpora una nueva clase de objetos llamados &lt;strong&gt;arrays&lt;/strong&gt; que permite representar colecciones de datos de un mismo tipo en varias dimensiones, y funciones muy eficientes para su manipulación.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/numpy-logo.png&#34; alt=&#34;Logo librería numpy&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;la-clase-de-objetos-array&#34;&gt;La clase de objetos &lt;code&gt;array&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Un array es una estructura de datos de un mismo tipo organizada en forma de tabla o cuadrícula de distintas dimensiones.&lt;/p&gt;
&lt;p&gt;Las dimensiones de un array también se conocen como &lt;strong&gt;ejes&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/arrays.png&#34; alt=&#34;Arrays&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;creación-de-arrays&#34;&gt;Creación de arrays&lt;/h2&gt;
&lt;p&gt;Para crear un array se utiliza la siguiente función de NumPy&lt;/p&gt;
&lt;p&gt;&lt;code&gt;np.array(lista)&lt;/code&gt; : Crea un array a partir de la lista o tupla &lt;code&gt;lista&lt;/code&gt; y devuelve una referencia a él. El número de dimensiones del array dependerá de las listas o tuplas anidadas en &lt;code&gt;lista&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Para una lista de valores se crea un array de una dimensión, también conocido como &lt;strong&gt;vector&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Para una lista de listas de valores se crea un array de dos dimensiones, también conocido como &lt;strong&gt;matriz&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Para una lista de listas de listas de valores se crea un array de tres dimensiones, también conocido como &lt;strong&gt;cubo&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Y así sucesivamente. No hay límite en el número de dimensiones del array más allá de la memoria disponible en el sistema.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;i class=&#34;fa fa-exclamation-triangle&#34; style=&#34;color:red;&#34;&gt;&lt;/i&gt; Los elementos de la lista o tupla deben ser del mismo tipo.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; # Array de una dimensión
&amp;gt;&amp;gt;&amp;gt; a1 = np.array([1, 2, 3])
&amp;gt;&amp;gt;&amp;gt; print(a1)
[1 2 3]
&amp;gt;&amp;gt;&amp;gt; # Array de dos dimensiones
&amp;gt;&amp;gt;&amp;gt; a2 = np.array([[1, 2, 3], [4, 5, 6]])
&amp;gt;&amp;gt;&amp;gt; print(a2)
[[1 2 3]
 [4 5 6]]
&amp;gt;&amp;gt;&amp;gt; # Array de tres dimensiones
&amp;gt;&amp;gt;&amp;gt; a3 = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])
&amp;gt;&amp;gt;&amp;gt; print(a3)
[[[ 1  2  3]
  [ 4  5  6]]

 [[ 7  8  9]
  [10 11 12]]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Otras funciones útiles que permiten generar arrays son:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;np.empty(dimensiones)&lt;/code&gt; : Crea y devuelve una referencia a un array vacío con las dimensiones especificadas en la tupla &lt;code&gt;dimensiones&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;np.zeros(dimensiones)&lt;/code&gt; : Crea y devuelve una referencia a un array con las dimensiones especificadas en la tupla &lt;code&gt;dimensiones&lt;/code&gt; cuyos elementos son todos ceros.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;np.ones(dimensiones)&lt;/code&gt; : Crea y devuelve una referencia a un array con las dimensiones especificadas en la tupla &lt;code&gt;dimensiones&lt;/code&gt; cuyos elementos son todos unos.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;np.full(dimensiones, valor)&lt;/code&gt; : Crea y devuelve una referencia a un array con las dimensiones especificadas en la tupla &lt;code&gt;dimensiones&lt;/code&gt; cuyos elementos son todos &lt;code&gt;valor&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;np.identity(n)&lt;/code&gt; : Crea y devuelve una referencia a la matriz identidad de dimensión &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;np.arange(inicio, fin, salto)&lt;/code&gt; : Crea y devuelve una referencia a un array de una dimensión cuyos elementos son la secuencia desde &lt;code&gt;inicio&lt;/code&gt; hasta &lt;code&gt;fin&lt;/code&gt; tomando valores cada &lt;code&gt;salto&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;np.linspace(inicio, fin, n)&lt;/code&gt; : Crea y devuelve una referencia a un array de una dimensión cuyos elementos son la secuencia de &lt;code&gt;n&lt;/code&gt; valores equidistantes desde &lt;code&gt;inicio&lt;/code&gt; hasta &lt;code&gt;fin&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;np.random.random(dimensiones)&lt;/code&gt; : Crea y devuelve una referencia a un array con las dimensiones especificadas en la tupla &lt;code&gt;dimensiones&lt;/code&gt; cuyos elementos son aleatorios.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(np.zeros(3,2))
[[0. 0. 0.]
 [0. 0. 0.]]
&amp;gt;&amp;gt;&amp;gt; print(np.idendity(3))
[[1. 0. 0.]
 [0. 1. 0.]
 [0. 0. 1.]]
&amp;gt;&amp;gt;&amp;gt; print(np.arange(1, 10, 2))
[1 3 5 7 9]
&amp;gt;&amp;gt;&amp;gt; print(np.linspace(0, 10, 5))
[ 0.   2.5  5.   7.5 10. ]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;atributos-de-un-array&#34;&gt;Atributos de un array&lt;/h2&gt;
&lt;p&gt;Existen varios atributos y funciones que describen las características de un array.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a.ndi&lt;/code&gt; : Devuelve el número de dimensiones del array &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a.shape&lt;/code&gt; : Devuelve una tupla con las dimensiones del array &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a.size&lt;/code&gt; : Devuelve el número de elementos del array &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a.dtype&lt;/code&gt;: Devuelve el tipo de datos de los elementos del array &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;acceso-a-los-elementos-de-un-array&#34;&gt;Acceso a los elementos de un array&lt;/h2&gt;
&lt;p&gt;Para acceder a los elementos contenidos en un array se usan índices al igual que para acceder a los elementos de una lista, pero indicando los índices de cada dimensión separados por comas.&lt;/p&gt;
&lt;p&gt;Al igual que para listas, los índices de cada dimensión comienzn en 0.&lt;/p&gt;
&lt;p&gt;También es posible obtener subarrays con el operador dos puntos &lt;code&gt;:&lt;/code&gt; indicando el índice inicial y el siguiente al final para cada dimensión, de nuevo separados por comas.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = np.array([[1, 2, 3], [4, 5, 6]])
&amp;gt;&amp;gt;&amp;gt; print(a[1, 0])  # Acceso al elemento de la fila 1 columna 0
4
&amp;gt;&amp;gt;&amp;gt; print(a[1][0])  # Otra forma de acceder al mismo elemento
4
&amp;gt;&amp;gt;&amp;gt; print(a[:, 0:2])
[[1 2]
 [4 5]]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;filtrado-de-elementos-de-un-array&#34;&gt;Filtrado de elementos de un array&lt;/h2&gt;
&lt;p&gt;Una característica muy útil de los arrays es que es muy fácil obtener otro array con los elementos que cumplen una condición.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a[condicion]&lt;/code&gt; : Devuelve una lista con los elementos del array &lt;code&gt;a&lt;/code&gt; que cumplen la condición &lt;code&gt;condicion&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = np.array([[1, 2, 3], [4, 5, 6]])
&amp;gt;&amp;gt;&amp;gt; print(a[(a % 2 == 0)])
[2 4 6]
&amp;gt;&amp;gt;&amp;gt; print(a[(a % 2 == 0) &amp;amp;  (a &amp;gt; 2)])
[2 4]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;operaciones-matemáticas-con-arrays&#34;&gt;Operaciones matemáticas con arrays&lt;/h2&gt;
&lt;p&gt;Existen dos formas de realizar operaciones matemáticas con arrays: a nivel de elemento y a nivel de array.&lt;/p&gt;
&lt;p&gt;Las operaciones a nivel de elemento operan los elementos que ocupan la misma posición en dos arrays. Se necesitan, por tanto, dos arrays con las mismas dimensiones y el resultado es una array de la misma dimensión.&lt;/p&gt;
&lt;p&gt;Los operadores mamemáticos &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;**&lt;/code&gt; se utilizan para la realizar suma, resta, producto, cociente, resto y potencia a nivel de elemento.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = np.array([[1, 2, 3], [4, 5, 6]])
&amp;gt;&amp;gt;&amp;gt; b = np.array([[1, 1, 1], [2, 2, 2]])
&amp;gt;&amp;gt;&amp;gt; print(a + b )
[[2 3 4]
 [6 7 8]]
&amp;gt;&amp;gt;&amp;gt; print(a / b)
[[1.  2.  3. ]
 [2.  2.5 3. ]]
&amp;gt;&amp;gt;&amp;gt; print(a ** 2)
[[ 1  4  9]
 [16 25 36]]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;operaciones-matemáticas-a-nivel-de-array&#34;&gt;Operaciones matemáticas a nivel de array&lt;/h2&gt;
&lt;p&gt;Para realizar el producto matricial se utiliza el método&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a.dot(b)&lt;/code&gt; : Devuelve el array resultado del producto matricial de los arrays &lt;code&gt;a&lt;/code&gt; y &lt;code&gt;b&lt;/code&gt; siempre y cuando sus dimensiones sean compatibles.&lt;/p&gt;
&lt;p&gt;Y para trasponer una matriz se utiliza el método&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a.T&lt;/code&gt; : Devuelve el array resultado de trasponer el array &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = np.array([[1, 2, 3], [4, 5, 6]])
&amp;gt;&amp;gt;&amp;gt; b = np.array([[1, 1], [2, 2], [3, 3]])
&amp;gt;&amp;gt;&amp;gt; print(a.dot(b))
[[14 14]
 [32 32]]
&amp;gt;&amp;gt;&amp;gt; print(a.T)
[[1 4]
 [2 5]
 [3 6]]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
