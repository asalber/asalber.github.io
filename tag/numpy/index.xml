<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Numpy | Aprende con Alf</title><link>/tag/numpy/</link><atom:link href="/tag/numpy/index.xml" rel="self" type="application/rss+xml"/><description>Numpy</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>es-es</language><image><url>/images/logo_hude38443eeb2faa5fa84365aba7d86a77_3514_300x300_fit_lanczos_3.png</url><title>Numpy</title><link>/tag/numpy/</link></image><item><title>La librería Numpy</title><link>/docencia/python/manual/numpy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docencia/python/manual/numpy/</guid><description>&lt;p>
&lt;a href="https://www.numpy.org" target="_blank" rel="noopener">NumPy&lt;/a> es una librería de Python especializada en el cálculo numérico y el análisis de datos, especialmente para un gran volumen de datos.&lt;/p>
&lt;p>Incorpora una nueva clase de objetos llamados &lt;strong>arrays&lt;/strong> que permite representar colecciones de datos de un mismo tipo en varias dimensiones, y funciones muy eficientes para su manipulación.&lt;/p>
&lt;p>&lt;img src="../img/numpy-logo.png" alt="Logo librería numpy">&lt;/p>
&lt;h2 id="la-clase-de-objetos-array">La clase de objetos &lt;code>array&lt;/code>&lt;/h2>
&lt;p>Un array es una estructura de datos de un mismo tipo organizada en forma de tabla o cuadrícula de distintas dimensiones.&lt;/p>
&lt;p>Las dimensiones de un array también se conocen como &lt;strong>ejes&lt;/strong>.&lt;/p>
&lt;p>&lt;img src="../img/arrays.png" alt="Arrays">&lt;/p>
&lt;h2 id="creación-de-arrays">Creación de arrays&lt;/h2>
&lt;p>Para crear un array se utiliza la siguiente función de NumPy&lt;/p>
&lt;p>&lt;code>np.array(lista)&lt;/code> : Crea un array a partir de la lista o tupla &lt;code>lista&lt;/code> y devuelve una referencia a él. El número de dimensiones del array dependerá de las listas o tuplas anidadas en &lt;code>lista&lt;/code>:&lt;/p>
&lt;ul>
&lt;li>Para una lista de valores se crea un array de una dimensión, también conocido como &lt;strong>vector&lt;/strong>.&lt;/li>
&lt;li>Para una lista de listas de valores se crea un array de dos dimensiones, también conocido como &lt;strong>matriz&lt;/strong>.&lt;/li>
&lt;li>Para una lista de listas de listas de valores se crea un array de tres dimensiones, también conocido como &lt;strong>cubo&lt;/strong>.&lt;/li>
&lt;li>Y así sucesivamente. No hay límite en el número de dimensiones del array más allá de la memoria disponible en el sistema.&lt;/li>
&lt;/ul>
&lt;p>&lt;i class="fa fa-exclamation-triangle" style="color:red;">&lt;/i> Los elementos de la lista o tupla deben ser del mismo tipo.&lt;/p>
&lt;pre>&lt;code class="language-python">&amp;gt;&amp;gt;&amp;gt; # Array de una dimensión
&amp;gt;&amp;gt;&amp;gt; a1 = np.array([1, 2, 3])
&amp;gt;&amp;gt;&amp;gt; print(a1)
[1 2 3]
&amp;gt;&amp;gt;&amp;gt; # Array de dos dimensiones
&amp;gt;&amp;gt;&amp;gt; a2 = np.array([[1, 2, 3], [4, 5, 6]])
&amp;gt;&amp;gt;&amp;gt; print(a2)
[[1 2 3]
[4 5 6]]
&amp;gt;&amp;gt;&amp;gt; # Array de tres dimensiones
&amp;gt;&amp;gt;&amp;gt; a3 = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])
&amp;gt;&amp;gt;&amp;gt; print(a3)
[[[ 1 2 3]
[ 4 5 6]]
[[ 7 8 9]
[10 11 12]]]
&lt;/code>&lt;/pre>
&lt;p>Otras funciones útiles que permiten generar arrays son:&lt;/p>
&lt;p>&lt;code>np.empty(dimensiones)&lt;/code> : Crea y devuelve una referencia a un array vacío con las dimensiones especificadas en la tupla &lt;code>dimensiones&lt;/code>.&lt;/p>
&lt;p>&lt;code>np.zeros(dimensiones)&lt;/code> : Crea y devuelve una referencia a un array con las dimensiones especificadas en la tupla &lt;code>dimensiones&lt;/code> cuyos elementos son todos ceros.&lt;/p>
&lt;p>&lt;code>np.ones(dimensiones)&lt;/code> : Crea y devuelve una referencia a un array con las dimensiones especificadas en la tupla &lt;code>dimensiones&lt;/code> cuyos elementos son todos unos.&lt;/p>
&lt;p>&lt;code>np.full(dimensiones, valor)&lt;/code> : Crea y devuelve una referencia a un array con las dimensiones especificadas en la tupla &lt;code>dimensiones&lt;/code> cuyos elementos son todos &lt;code>valor&lt;/code>.&lt;/p>
&lt;p>&lt;code>np.identity(n)&lt;/code> : Crea y devuelve una referencia a la matriz identidad de dimensión &lt;code>n&lt;/code>.&lt;/p>
&lt;p>&lt;code>np.arange(inicio, fin, salto)&lt;/code> : Crea y devuelve una referencia a un array de una dimensión cuyos elementos son la secuencia desde &lt;code>inicio&lt;/code> hasta &lt;code>fin&lt;/code> tomando valores cada &lt;code>salto&lt;/code>.&lt;/p>
&lt;p>&lt;code>np.linspace(inicio, fin, n)&lt;/code> : Crea y devuelve una referencia a un array de una dimensión cuyos elementos son la secuencia de &lt;code>n&lt;/code> valores equidistantes desde &lt;code>inicio&lt;/code> hasta &lt;code>fin&lt;/code>.&lt;/p>
&lt;p>&lt;code>np.random.random(dimensiones)&lt;/code> : Crea y devuelve una referencia a un array con las dimensiones especificadas en la tupla &lt;code>dimensiones&lt;/code> cuyos elementos son aleatorios.&lt;/p>
&lt;pre>&lt;code class="language-python">&amp;gt;&amp;gt;&amp;gt; print(np.zeros(3,2))
[[0. 0. 0.]
[0. 0. 0.]]
&amp;gt;&amp;gt;&amp;gt; print(np.idendity(3))
[[1. 0. 0.]
[0. 1. 0.]
[0. 0. 1.]]
&amp;gt;&amp;gt;&amp;gt; print(np.arange(1, 10, 2))
[1 3 5 7 9]
&amp;gt;&amp;gt;&amp;gt; print(np.linspace(0, 10, 5))
[ 0. 2.5 5. 7.5 10. ]
&lt;/code>&lt;/pre>
&lt;h2 id="atributos-de-un-array">Atributos de un array&lt;/h2>
&lt;p>Existen varios atributos y funciones que describen las características de un array.&lt;/p>
&lt;p>&lt;code>a.ndi&lt;/code> : Devuelve el número de dimensiones del array &lt;code>a&lt;/code>.&lt;/p>
&lt;p>&lt;code>a.shape&lt;/code> : Devuelve una tupla con las dimensiones del array &lt;code>a&lt;/code>.&lt;/p>
&lt;p>&lt;code>a.size&lt;/code> : Devuelve el número de elementos del array &lt;code>a&lt;/code>.&lt;/p>
&lt;p>&lt;code>a.dtype&lt;/code>: Devuelve el tipo de datos de los elementos del array &lt;code>a&lt;/code>.&lt;/p>
&lt;h2 id="acceso-a-los-elementos-de-un-array">Acceso a los elementos de un array&lt;/h2>
&lt;p>Para acceder a los elementos contenidos en un array se usan índices al igual que para acceder a los elementos de una lista, pero indicando los índices de cada dimensión separados por comas.&lt;/p>
&lt;p>Al igual que para listas, los índices de cada dimensión comienzn en 0.&lt;/p>
&lt;p>También es posible obtener subarrays con el operador dos puntos &lt;code>:&lt;/code> indicando el índice inicial y el siguiente al final para cada dimensión, de nuevo separados por comas.&lt;/p>
&lt;pre>&lt;code class="language-python">&amp;gt;&amp;gt;&amp;gt; a = np.array([[1, 2, 3], [4, 5, 6]])
&amp;gt;&amp;gt;&amp;gt; print(a[1, 0]) # Acceso al elemento de la fila 1 columna 0
4
&amp;gt;&amp;gt;&amp;gt; print(a[1][0]) # Otra forma de acceder al mismo elemento
4
&amp;gt;&amp;gt;&amp;gt; print(a[:, 0:2])
[[1 2]
[4 5]]
&lt;/code>&lt;/pre>
&lt;h2 id="filtrado-de-elementos-de-un-array">Filtrado de elementos de un array&lt;/h2>
&lt;p>Una característica muy útil de los arrays es que es muy fácil obtener otro array con los elementos que cumplen una condición.&lt;/p>
&lt;p>&lt;code>a[condicion]&lt;/code> : Devuelve una lista con los elementos del array &lt;code>a&lt;/code> que cumplen la condición &lt;code>condicion&lt;/code>.&lt;/p>
&lt;pre>&lt;code class="language-python">&amp;gt;&amp;gt;&amp;gt; a = np.array([[1, 2, 3], [4, 5, 6]])
&amp;gt;&amp;gt;&amp;gt; print(a[(a % 2 == 0)])
[2 4 6]
&amp;gt;&amp;gt;&amp;gt; print(a[(a % 2 == 0) &amp;amp; (a &amp;gt; 2)])
[2 4]
&lt;/code>&lt;/pre>
&lt;h2 id="operaciones-matemáticas-con-arrays">Operaciones matemáticas con arrays&lt;/h2>
&lt;p>Existen dos formas de realizar operaciones matemáticas con arrays: a nivel de elemento y a nivel de array.&lt;/p>
&lt;p>Las operaciones a nivel de elemento operan los elementos que ocupan la misma posición en dos arrays. Se necesitan, por tanto, dos arrays con las mismas dimensiones y el resultado es una array de la misma dimensión.&lt;/p>
&lt;p>Los operadores mamemáticos &lt;code>+&lt;/code>, &lt;code>-&lt;/code>, &lt;code>*&lt;/code>, &lt;code>/&lt;/code>, &lt;code>%&lt;/code>, &lt;code>**&lt;/code> se utilizan para la realizar suma, resta, producto, cociente, resto y potencia a nivel de elemento.&lt;/p>
&lt;pre>&lt;code class="language-python">&amp;gt;&amp;gt;&amp;gt; a = np.array([[1, 2, 3], [4, 5, 6]])
&amp;gt;&amp;gt;&amp;gt; b = np.array([[1, 1, 1], [2, 2, 2]])
&amp;gt;&amp;gt;&amp;gt; print(a + b )
[[2 3 4]
[6 7 8]]
&amp;gt;&amp;gt;&amp;gt; print(a / b)
[[1. 2. 3. ]
[2. 2.5 3. ]]
&amp;gt;&amp;gt;&amp;gt; print(a ** 2)
[[ 1 4 9]
[16 25 36]]
&lt;/code>&lt;/pre>
&lt;h2 id="operaciones-matemáticas-a-nivel-de-array">Operaciones matemáticas a nivel de array&lt;/h2>
&lt;p>Para realizar el producto matricial se utiliza el método&lt;/p>
&lt;p>&lt;code>a.dot(b)&lt;/code> : Devuelve el array resultado del producto matricial de los arrays &lt;code>a&lt;/code> y &lt;code>b&lt;/code> siempre y cuando sus dimensiones sean compatibles.&lt;/p>
&lt;p>Y para trasponer una matriz se utiliza el método&lt;/p>
&lt;p>&lt;code>a.T&lt;/code> : Devuelve el array resultado de trasponer el array &lt;code>a&lt;/code>.&lt;/p>
&lt;pre>&lt;code class="language-python">&amp;gt;&amp;gt;&amp;gt; a = np.array([[1, 2, 3], [4, 5, 6]])
&amp;gt;&amp;gt;&amp;gt; b = np.array([[1, 1], [2, 2], [3, 3]])
&amp;gt;&amp;gt;&amp;gt; print(a.dot(b))
[[14 14]
[32 32]]
&amp;gt;&amp;gt;&amp;gt; print(a.T)
[[1 4]
[2 5]
[3 6]]
&lt;/code>&lt;/pre></description></item></channel></rss>