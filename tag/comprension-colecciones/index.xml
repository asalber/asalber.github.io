<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Comprensión Colecciones | Aprende con Alf</title><link>/tag/comprension-colecciones/</link><atom:link href="/tag/comprension-colecciones/index.xml" rel="self" type="application/rss+xml"/><description>Comprensión Colecciones</description><generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>es-es</language><image><url>/images/logo_hude38443eeb2faa5fa84365aba7d86a77_3514_300x300_fit_lanczos_2.png</url><title>Comprensión Colecciones</title><link>/tag/comprension-colecciones/</link></image><item><title>Comprensión de Colecciones</title><link>/docencia/python/manual/comprension-colecciones/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docencia/python/manual/comprension-colecciones/</guid><description>&lt;h2 id="comprensión-de-colecciones">Comprensión de colecciones&lt;/h2>
&lt;p>En muchas aplicaciones es habitual aplicar una función o realizar una operación con los elementos de una colección (lista, tupla o diccionario) y obtener una nueva colección de elementos transformados. Aunque esto se puede hacer recorriendo la secuencia con un bucle iterativo, y en programación funcional mediante la función &lt;code>map&lt;/code>, Python incorpora un mecanismo muy potente que permite esto mismo de manera más simple.&lt;/p>
&lt;h3 id="comprensión-de-listas">Comprensión de listas&lt;/h3>
&lt;blockquote>
&lt;p>[&lt;em>expresion&lt;/em> &lt;code>for&lt;/code> &lt;em>variable&lt;/em> &lt;code>in&lt;/code> &lt;em>lista&lt;/em> &lt;code>if&lt;/code> &lt;em>condicion&lt;/em>]&lt;/p>
&lt;/blockquote>
&lt;p>Esta instrucción genera la lista cuyos elementos son el resultado de evaluar la expresión &lt;em>expresion&lt;/em>, para cada valor que toma la variable &lt;em>variable&lt;/em>, donde &lt;em>variable&lt;/em> toma todos los valores de la lista &lt;em>lista&lt;/em> que cumplen la condición &lt;em>condición&lt;/em>.&lt;/p>
&lt;pre>&lt;code class="language-python">&amp;gt;&amp;gt;&amp;gt; [x ** 2 for x in range(10)]
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
&amp;gt;&amp;gt;&amp;gt; [x for x in range(10) if x % 2 == 0]
[0, 2, 4, 6, 8]
&amp;gt;&amp;gt;&amp;gt; [x ** 2 for x in range(10) if x % 2 == 0]
[0, 4, 16, 36, 64]
&amp;gt;&amp;gt;&amp;gt; notas = {'Carmen':5, 'Antonio':4, 'Juan':8, 'Mónica':9, 'María': 6, 'Pablo':3}
&amp;gt;&amp;gt;&amp;gt; [nombre for (nombre, nota) in notas.items() if nota &amp;gt;= 5]
['Carmen', 'Juan', 'Mónica', 'María']
&lt;/code>&lt;/pre>
&lt;h3 id="comprensión-de-diccionarios">Comprensión de diccionarios&lt;/h3>
&lt;blockquote>
&lt;p>{&lt;em>expresion-clave&lt;/em>&lt;code>:&lt;/code>&lt;em>expresion-valor&lt;/em> &lt;code>for&lt;/code> &lt;em>variables&lt;/em> &lt;code>in&lt;/code> &lt;em>lista&lt;/em> &lt;code>if&lt;/code> &lt;em>condicion&lt;/em>}&lt;/p>
&lt;/blockquote>
&lt;p>Esta instrucción genera el diccionario formado por los pares cuyas claves son el resultado de evaluar la expresión &lt;em>expresion-clave&lt;/em> y cuyos valores son el resultado de evaluar la expresión &lt;em>expresion-valor&lt;/em>, para cada valor que toma la variable &lt;em>variable&lt;/em>, donde &lt;em>variable&lt;/em> toma todos los valores de la lista &lt;em>lista&lt;/em> que cumplen la condición &lt;em>condición&lt;/em>.&lt;/p>
&lt;pre>&lt;code class="language-python">&amp;gt;&amp;gt;&amp;gt; {palabra:len(palabra) for palabra in ['I', 'love', 'Python']}
{'I': 1, 'love': 4, 'Python': 6}
&amp;gt;&amp;gt;&amp;gt; notas = {'Carmen':5, 'Antonio':4, 'Juan':8, 'Mónica':9, 'María': 6, 'Pablo':3}
&amp;gt;&amp;gt;&amp;gt; {nombre: nota +1 for (nombre, nota) in notas.items() if nota &amp;gt;= 5])
{'Carmen': 6, 'Juan': 9, 'Mónica': 10, 'María': 7}
&lt;/code>&lt;/pre></description></item></channel></rss>