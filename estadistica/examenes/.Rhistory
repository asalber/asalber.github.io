require(plotly)
data = read.table("datos/deuda_ayuntamiento_madrid.csv", header = TRUE, sep=",")
p <- plot_ly(data, x=~Año, y=~Deuda, type='bar', color=~Alcalde, name = 'Evolución Deuda Ayuntamiento madrid') %>%
layout(yaxis = list(title="Deuda (en millones de €)"))
p
require(leaflet)
m <- leaflet(data = datos.fichas) %>%
setView(lng=-3.70453, lat=40.41358, zoom = 12) %>%
addTiles() %>%
addMarkers(lng=40.3909201, lat=-3.6928518, popup="Oficina de Atención al Contribuyente")
require(leaflet)
m <- leaflet() %>%
setView(lng=-3.70453, lat=40.41358, zoom = 12) %>%
addTiles() %>%
addMarkers(lng=40.3909201, lat=-3.6928518, popup="Oficina de Atención al Contribuyente")
m
require(leaflet)
m <- leaflet() %>%
setView(lng=-3.70453, lat=40.41358, zoom = 12) %>%
addTiles() %>%
addMarkers(lat=40.3909201, lng=-3.6928518, popup="Oficina de Atención al Contribuyente")
m
freq <- length(data[["Age"]][data[["Age"]]>])
library(rk.Teaching)
library(rk.Teaching)
library(tennis.elbow)
data(tennis.elbow, package="tennis.elbow")
data <- tennis.elbow
confint <- function (ci){
return(paste(attr(ci$conf.int, "conf.level")*100, "% confidence interval: (", round(ci$conf.int[1],4), " , ", round(ci$conf.int[2],4), ")", sep=""));
}
# Function to print the confidence interval for proportions expresses in percentages
confint.percentage <- function (ci){
return(paste(attr(ci$conf.int, "conf.level")*100, "% confidence interval: (", round(ci$conf.int[1]*100,2), " , ", round(ci$conf.int[2]*100,2), ")", sep=""));
}
freq <- length(data[["Age"]][data[["Age"]]>])
freq <- length(data[["Age"]][data[["Age"]]>50])
n  <- length(data[["Age"]])
result <- prop.test (freq, n, alternative="two.sided", p=0.5, conf.level=0.90)
writeLines(confint(result))
data.old <- data[data[["Age"]]>50]
data.old <- subset(data, "Age">50)
result <- t.test (data.old[["Pain.Relief.24h"]], alternative="two.sided", mu=0, conf.level=0.95)
writeLines(confint(result))
View(data.old)
View(data)
data.old <- subset(data, Age>50)
result <- t.test (data.old[["Pain.Relief.24h"]], alternative="two.sided", mu=0, conf.level=0.95)
writeLines(confint(result))
result <- t.test (data.old[["Pain.Relief.Max"]], alternative="two.sided", mu=0, conf.level=0.95)
writeLines(confint(result))
result <- t.test (data[["Pai.Relief.Max"]], data[["Pain.Relief.12h"]], alternative="two.sided", paired=TRUE, conf.level=0.99)
result <- t.test (data[["Pain.Relief.Max"]], data[["Pain.Relief.12h"]], alternative="two.sided", paired=TRUE, conf.level=0.99)
writeLines(confint(result))
x <- data.placebo[["Pain.Relief.Max"]]
data.placebo <- subset(data, Treatment=="placebo")
data.ibuprofen <- subset(data, Treatment=="ibuprofen")
x <- data.placebo[["Pain.Relief.Max"]]
y <- data.placebo[["Pain.Relief.12h"]]
x <- data.placebo[["Pain.Relief.Max"]]
y <- data.placebo[["Pain.Relief.12h"]]
result <- t.test (x, y, alternative="two.sided", paired=TRUE, conf.level=0.99)
writeLines(confint(result))
x <- data.ibuprofen[["Pain.Relief.Max"]]
y <- data.ibuprofen[["Pain.Relief.12h"]]
result <- t.test (x, y, alternative="two.sided", paired=TRUE, conf.level=0.99)
writeLines(confint(result))
x <- data[["Pain.Relief.Global"]][data[["Gender"]]=="male"]
x
x <- data[["Pain.Relief.Global"]][data[["Gender"]]=="male"]
y <- data[["Pain.Relief.Global"]][data[["Gender"]]=="female"]
result.var <- var.test (x, y, conf.level=0.95)
if (result.var[["p.value"]]<0.05){
result <- t.test (x, y, alternative="two.sided", conf.level=0.95, var.equal=FALSE)
} else {
result <- t.test (x, y, alternative="two.sided", conf.level=0.98, var.equal=TRUE)
writeLines(confint(result))
}
x <- data.males[["Pain.Relief.Global"]]
data.males <- subset(data, Gender=="male")
data.females <- subset(data, Gender=="female")
x <- data.males[["Pain.Relief.Global"]]
y <- data.females[["Pain.Relief.Global"]]
result.var <- var.test (x, y, conf.level=0.95)
if (result.var[["p.value"]]<0.05){
result <- t.test (x, y, alternative="two.sided", conf.level=0.95, var.equal=FALSE)
} else {
result <- t.test (x, y, alternative="two.sided", conf.level=0.98, var.equal=TRUE)
writeLines(confint(result))
}
x <- data.ibuprofen[["Pain.Relief.Max"]]
y <- data.placebo[["Pain.Relief.Max"]]
result.var <- var.test (x, y, conf.level=0.95)
if (result.var[["p.value"]]<0.05){
result <- t.test (x, y, alternative="two.sided", conf.level=0.95, var.equal=FALSE)
} else {
result <- t.test (x, y, alternative="two.sided", conf.level=0.98, var.equal=TRUE)
writeLines(confint(result))
}
x <- data.ibuprofen[["Pain.Relief.Global"]]
y <- data.placebo[["Pain.Relief.Global"]]
result.var <- var.test (x, y, conf.level=0.95)
if (result.var[["p.value"]]<0.05){
result <- t.test (x, y, alternative="two.sided", conf.level=0.95, var.equal=FALSE)
} else {
result <- t.test (x, y, alternative="two.sided", conf.level=0.98, var.equal=TRUE)
writeLines(confint(result))
}
x <- data.males[["Pain.Relief.Max"]]
y <- data.females[["Pain.Relief.Max"]]
result.var <- var.test (x, y)
writeLines(paste("P-value:", result.var$p.value))
}
x <- data.males[["Pain.Relief.Max"]]
y <- data.females[["Pain.Relief.Max"]]
result.var <- var.test (x, y)
writeLines(paste("P-value:", result.var$p.value))
x <- data.males[["Pain.Relief.Max"]]
y <- data.females[["Pain.Relief.Max"]]
result.var <- var.test (x, y)
writeLines(paste("P-value:", round(result.var$p.value,4)))
x <- data.ibuprofen[["Pain.Relief.Max"]]
y <- data.placebo[["Pain.Relief.Max"]]
result.var <- var.test (x, y, conf.level=0.95)
if (result.var[["p.value"]]<0.05){
result <- t.test (x, y, alternative="two.sided", conf.level=0.95, var.equal=FALSE)
} else {
result <- t.test (x, y, alternative="two.sided", conf.level=0.98, var.equal=TRUE)
}
writeLines(confint(result))
x <- data.ibuprofen[["Pain.Relief.Global"]]
y <- data.placebo[["Pain.Relief.Global"]]
result.var <- var.test (x, y, conf.level=0.95)
if (result.var[["p.value"]]<0.05){
result <- t.test (x, y, alternative="two.sided", conf.level=0.95, var.equal=FALSE)
} else {
result <- t.test (x, y, alternative="two.sided", conf.level=0.98, var.equal=TRUE)
}
writeLines(confint(result))
data.males.placebo <- subset(data, Gender=="male" & Treatment=="placebo")
x <- data.males.ibuprofen[["Pain.Relief.Max"]]
data.males.ibuprofen <- subset(data, Gender=="male" & Treatment=="ibuprofen")
data.males.placebo <- subset(data, Gender=="male" & Treatment=="placebo")
x <- data.males.ibuprofen[["Pain.Relief.Max"]]
y <- data.males.placebo[["Pain.Relief.Max"]]
result.var <- var.test (x, y)
if (result.var[["p.value"]]<0.05){
result <- t.test (x, y, alternative="greater", var.equal=FALSE)
} else {
result <- t.test (x, y, alternative="greater", var.equal=TRUE)
}
writeLines(confint(result))
data.females.ibuprofen <- subset(data, Gender=="female" & Treatment=="ibuprofen")
data.females.placebo <- subset(data, Gender=="female" & Treatment=="placebo")
x <- data.females.ibuprofen[["Pain.Relief.Max"]]
y <- data.females.placebo[["Pain.Relief.Max"]]
result.var <- var.test (x, y)
if (result.var[["p.value"]]<0.05){
result <- t.test (x, y, alternative="greater", var.equal=FALSE)
} else {
result <- t.test (x, y, alternative="greater", var.equal=TRUE)
}
writeLines(confint(result))
if (result.var[["p.value"]]<0.05){
result <- t.test (x, y, alternative="two.sided", var.equal=FALSE)
} else {
result <- t.test (x, y, alternative="two.sided", var.equal=TRUE)
}
writeLines(paste("P-value:", round(result.var$p.value,4)))
data.males.ibuprofen <- subset(data, Gender=="male" & Treatment=="ibuprofen")
data.males.placebo <- subset(data, Gender=="male" & Treatment=="placebo")
x <- data.males.ibuprofen[["Pain.Relief.Max"]]
y <- data.males.placebo[["Pain.Relief.Max"]]
result.var <- var.test (x, y)
if (result.var[["p.value"]]<0.05){
result <- t.test (x, y, alternative="greater", var.equal=FALSE)
} else {
result <- t.test (x, y, alternative="greater", var.equal=TRUE)
}
writeLines(paste("P-value:", round(result.var$p.value,4)))
data.females.ibuprofen <- subset(data, Gender=="female" & Treatment=="ibuprofen")
data.females.placebo <- subset(data, Gender=="female" & Treatment=="placebo")
x <- data.females.ibuprofen[["Pain.Relief.Max"]]
y <- data.females.placebo[["Pain.Relief.Max"]]
result.var <- var.test (x, y)
if (result.var[["p.value"]]<0.05){
result <- t.test (x, y, alternative="greater", var.equal=FALSE)
} else {
result <- t.test (x, y, alternative="greater", var.equal=TRUE)
}
writeLines(paste("P-value:", round(result.var$p.value,4)))
data.females.ibuprofen <- subset(data, Gender=="female" & Treatment=="ibuprofen")
data.females.placebo <- subset(data, Gender=="female" & Treatment=="placebo")
x <- data.females.ibuprofen[["Pain.Relief.Max"]]
y <- data.females.placebo[["Pain.Relief.Max"]]
result.var <- var.test (x, y)
if (result.var[["p.value"]]<0.05){
result <- t.test (x, y, alternative="greater", var.equal=FALSE)
} else {
result <- t.test (x, y, alternative="greater", var.equal=TRUE)
}
writeLines(confint(result))
data.females.ibuprofen <- subset(data, Gender=="female" & Treatment=="ibuprofen")
data.females.placebo <- subset(data, Gender=="female" & Treatment=="placebo")
x <- data.females.ibuprofen[["Pain.Relief.Max"]]
y <- data.females.placebo[["Pain.Relief.Max"]]
result.var <- var.test (x, y)
if (result.var[["p.value"]]<0.05){
result <- t.test (x, y, alternative="greater", var.equal=FALSE)
} else {
result <- t.test (x, y, alternative="greater", var.equal=TRUE)
}
writeLines(confint(result))
if (result.var[["p.value"]]<0.05){
result <- t.test (x, y, alternative="two.sided", var.equal=FALSE)
} else {
result <- t.test (x, y, alternative="two.sided", var.equal=TRUE)
}
writeLines(paste("P-value:", round(result$p.value,4)))
data.males.ibuprofen <- subset(data, Gender=="male" & Treatment=="ibuprofen")
data.males.placebo <- subset(data, Gender=="male" & Treatment=="placebo")
x <- data.males.ibuprofen[["Pain.Relief.Max"]]
y <- data.males.placebo[["Pain.Relief.Max"]]
result.var <- var.test (x, y)
if (result.var[["p.value"]]<0.05){
result <- t.test (x, y, alternative="greater", var.equal=FALSE)
} else {
result <- t.test (x, y, alternative="greater", var.equal=TRUE)
}
writeLines(paste("P-value:", round(result$p.value,4)))
data.females.ibuprofen <- subset(data, Gender=="female" & Treatment=="ibuprofen")
data.females.placebo <- subset(data, Gender=="female" & Treatment=="placebo")
x <- data.females.ibuprofen[["Pain.Relief.Max"]]
y <- data.females.placebo[["Pain.Relief.Max"]]
result.var <- var.test (x, y)
if (result.var[["p.value"]]<0.05){
result <- t.test (x, y, alternative="greater", var.equal=FALSE)
} else {
result <- t.test (x, y, alternative="greater", var.equal=TRUE)
}
writeLines(paste("P-value:", round(result$p.value,4)))
x <- data[["Pain.Relief.12h"]]
y <- data[["Pain.Relief.Global"]]
result <- t.test (x, y, alternative="two.sided", paired=TRUE)
writeLines(paste("P-value:", round(result$p.value,4)))
data.females.ibuprofen.old <- subset(data, Gender=="female" & Treatment=="ibuprofen" & Age>50)
data.females.placebo.old <- subset(data, Gender=="female" & Treatment=="placebo" & Age>50)
x <- data.females.ibuprofen.old[["Pain.Relief.24h"]]
y <- data.females.placebo.old[["Pain.Relief.24h"]]
result.var <- var.test (x, y)
if (result.var[["p.value"]]<0.05){
result <- t.test (x, y, alternative="greater", var.equal=FALSE)
} else {
result <- t.test (x, y, alternative="greater", var.equal=TRUE)
}
result.var <- var.test (x, y)
result.var$p.value
View(data.females)
View(data.females.ibuprofen)
View(data.females.ibuprofen.old)
View(data.females.placebo)
View(data.males.placebo)
View(data.females.placebo.old)
data.females.ibuprofen.young <- subset(data, Gender=="female" & Treatment=="ibuprofen" & Age<50)
data.females.placebo.young <- subset(data, Gender=="female" & Treatment=="placebo" & Age<50)
x <- data.females.ibuprofen.young[["Pain.Relief.24h"]]
y <- data.females.placebo.young[["Pain.Relief.24h"]]
result.var <- var.test (x, y)
if (result.var[["p.value"]]<0.05){
result <- t.test (x, y, alternative="greater", var.equal=FALSE)
} else {
result <- t.test (x, y, alternative="greater", var.equal=TRUE)
}
writeLines(paste("P-value:", round(result$p.value,4)))
x <- data.males.placebo[["Pain.Relief.Max"]]
y <- data.males.placebo[["Pain.Relief.24h"]]
result <- t.test (x, y, alternative="two.sided", paired=TRUE)
writeLines(paste("P-value:", round(result$p.value,4)))
x <- data.males.ibuprofen[["Pain.Relief.Max"]]
y <- data.males.ibuprofen[["Pain.Relief.24h"]]
result <- t.test (x, y, alternative="two.sided", paired=TRUE)
writeLines(paste("P-value:", round(result$p.value,4)))
data <- cbind(data, subjectid=factor(1:nrow(data)))
anova.results <- ezANOVA(data=data[!is.na(data$Pain.Relief.12h),], dv=.(Pain.Relief.12h), wid=.(subjectid), between=.(Gender.Treatment), return_aov=TRUE)
data <- cbind(data, subjectid=factor(1:nrow(data)))
anova.results <- ezANOVA(data=data[!is.na(data$Pain.Relief.12h),], dv=.(Pain.Relief.12h), wid=.(subjectid), between=.(Gender.Treatment), return_aov=TRUE)
data <- cbind(data, subjectid=factor(1:nrow(data)))
View(data)
result <- ezANOVA(data=data[!is.na(data$Pain.Relief.12h),], dv=.(Pain.Relief.12h), wid=.(subjectid), between=.(Gender.Treatment), return_aov=TRUE)
data <- cbind(data, subjectid=factor(1:nrow(data)))
result <- ezANOVA(data=data[!is.na(data$Pain.Relief.12h),], dv=.(Pain.Relief.12h), wid=.(subjectid), between=.(Gender.Treatment), return_aov=TRUE)
data <- cbind(data, subjectid=factor(1:nrow(data)))
result <- ezANOVA(data=data[!is.na(data$Pain.Relief.12h),], dv=.(Pain.Relief.12h), wid=.(subjectid), between=.(Gender.Treatment), return_aov=TRUE)
library(knitr)
library(knitr)
library(rk.Teaching)
library(rk.Teaching)
library(tennis.elbow)
data(tennis.elbow, package="tennis.elbow")
data <- tennis.elbow
confint <- function (ci){
return(paste(attr(ci$conf.int, "conf.level")*100, "% confidence interval: (", round(ci$conf.int[1],4), " , ", round(ci$conf.int[2],4), ")", sep=""));
}
# Function to print the confidence interval for proportions expresses in percentages
confint.percentage <- function (ci){
return(paste(attr(ci$conf.int, "conf.level")*100, "% confidence interval: (", round(ci$conf.int[1]*100,2), " , ", round(ci$conf.int[2]*100,2), ")", sep=""));
}
# confint <- function (ci){
#   return(paste("Intervalo: ({1:NUMERICAL:=", round(ci$conf.int[1],4), ":0.001} , {1:NUMERICAL:=", round(ci$conf.int[2],4), ":0.001})\nPor tanto, se puede afirmar: {2:MULTICHOICE:=No existen diferencias significativas\n~%-25% Opcion 2\n~%-25% Opcion 3\n~%-25% Opcion 4\n~%-25% El resto de las opciones son falsas.}" , sep=""));
# }
#
# confint.percentage <- function (ci){
#   return(paste("Intervalo: ({1:NUMERICAL:=", round(ci$conf.int[1]*100,2), ":0.1} , {1:NUMERICAL:=", round(ci$conf.int[2]*100,2), ":0.1})\nPor tanto, se puede afirmar: {2:MULTICHOICE:=No existen diferencias significativas\n~%-25% Opcion 2\n~%-25% Opcion 3\n~%-25% Opcion 4\n~%-25% El resto de las opciones son falsas.}" , sep=""));
# }
# Function to interpret the coefficient of variati
cv.interpretation <- function(x) {
if (x<0.3) return("The dispersion around the mean is very low and the mean is very representative.")
else if (x<0.7) return("The dispersion around the mean is moderate and the mean is moderately representative.")
else return("The dispersion around the mean is very high and the mean is less representative.")
}
# Function to interpret the coefficient of skewess
skewness.interpretation <- function(x) {
if (x< -2) return("The sample distribution is too much left skew to come from a normal population.")
else if (x< -1) return("The sample distribution is quite left skew but we can assume that it comes from a normal population.")
else if (x< -0.2) return("The sample distribution is left skew but we can assume that it comes from a normal population.")
else if (x<0) return("The sample distribution is a little bit left skew but almost symmetric.")
else if (x==0) return("The sample distribution is symmetric.")
else if (x<=0.2) return("The sample distribution is a little bit right skew but almost symmetric.")
else if (x<=1) return("The sample distribution is right skew but we can assume that it comes from a normal population.")
else if (x<=2) return("The sample distribution is quite right skew but we can assume that it comes from a normal population.")
else return("The sample distribution is too much right skew to come from a normal population.")
}
# Function to interpret the coefficient of kurtosis
kurtosis.interpretation <- function(x) {
if (x< -2) return("The sample distribution is too much platykurtic to come from a normal population.")
else if (x< -1) return("The sample distribution is quite platykurtic but we can assume that it comes from a normal population.")
else if (x< -0.2) return("The sample distribution is platykurtic but we can assume that it comes from a normal population.")
else if (x<0) return("The sample distribution is a little bit platykurtic but almost mesokurtic.")
else if (x==0) return("The sample distribution is mesokurtic")
else if (x<=0.2) return("The sample distribution is a little bit leptokurtic but almost mesokurtic.")
else if (x<=1) return("The sample distribution is leptokurtic but we can assume that it comes from a normal population.")
else if (x<=2) return("The sample distribution is quite leptokurtic but we can assume that it comes from a normal population.")
else return("The sample distribution is too much leptokurtic to come from a normal population.")
}
# Function to interpret the coefficient of determination
r2.interpretation <- function(x) {
if (x<0.2) return("There is no linear relation between the variables.")
else if (x<0.4) return("There is a weak linear relation between the varibles.")
else if (x<0.6) return("There is a moderate linear relation between the varibles.")
else if (x<0.8) return("There is a strong linear relation between the varibles.")
else return("There is a very strong relation between the variables.")
}
# Function to interpret the correlation coefficient
r.interpretation <- function(x) {
if (x< -sqrt(0.8)) return("There is a very strong inverse linear relation between the varibles.")
else if (x< -sqrt(0.6)) return("There is a strong inverse linear relation between the varibles.")
else if (x< -sqrt(0.4)) return("There is a moderate inverse linear relation between the varibles.")
else if (x< -sqrt(0.2)) return("There is a weak inverse linear relation between the variables.")
else if (x<0) return("There is a very weak inverse linear relation between the variables.")
else if (x==0) return("There is no linear relation between the variables.")
else if (x<0.2) return("There is a very weak direct linear relation between the variables.")
else if (x<sqrt(0.4)) return("There is a weak direct linear relation between the varibles.")
else if (x<sqrt(0.6)) return("There is a moderate direct linear relation between the varibles.")
else if (x<sqrt(0.8)) return("There is a strong direct linear relation between the varibles.")
else return("There is a very strong direct relation between the variables.")
}
# Function to compute the best regression model
best.regression.model <- function (y, x){
result <- regcomp(y, x, models=c('linear','cuadratic','cubic','potential','exponential','logarithmic','inverse','sigmoid'))
best.model <- result[1,"Model"]
writeLines(paste("Best regression model: ", best.model))
if (best.model == "Linear")
model <- lm(y ~ x)
else if (best.model == "Cuadratic")
model <- lm(y ~ x + I(x^2))
else if (best.model == "Cubic")
model <- lm(y ~ x + I(x^2) + I(x^3))
else if (best.model == "Exponential")
model <- lm(log(y) ~ x)
else if (best.model == "Logarithmic")
model <- lm(y ~ log(x))
else if (best.model == "Potential")
model <- lm(log(y) ~ log(x))
else if (best.model == "Inverse")
model <- lm(y ~ I(1/x))
else
model <- lm(log(y) ~ I(1/x))
return(model)
}
# Function to extract answers from the answers sheet
extract_answers <- function(answer){
return(c(strsplit(answer, "part 1:|; part 2:|; part 3:|; part 4:|; part 5:|; part 6:|; part 7:|; part 8:|; part 9:|; part 10:|; part 11:|; part 12:|; part 13:")[[1]], ""))
}
# Function to correct a confidence interval
correct.confint <- function (ci, li, ls, error=0.0001){
writeLines("Your answer")
writeLines(paste(" ", attr(ci$conf.int, "conf.level")*100, "% confidence interval: (", li, " , ", ls, ")", sep=""));
writeLines("Correct answer")
writeLines(paste(" ", attr(ci$conf.int, "conf.level")*100, "% confidence interval: (", round(ci$conf.int[1],5), " , ", round(ci$conf.int[2],5), ")", sep=""))
if (is.na(li) | is.na(ls))
return(0)
if (abs(ci$conf.int[1]-li)<error & abs(ci$conf.int[2]-ls)<error)
return(1)
else
return(0)
}
# Function to correct a confidence interval for a percentage
correct.confint.percentage <- function (ci, li, ls, error=0.01){
writeLines("Your answer")
writeLines(paste(" ", attr(ci$conf.int, "conf.level")*100, "% confidence interval: (", li, " , ", ls, ")", sep=""));
writeLines("Correct answer")
writeLines(paste(" ", attr(ci$conf.int, "conf.level")*100, "% confidence interval: (", round(ci$conf.int[1]*100,5), " , ", round(ci$conf.int[2]*100,5), ")", sep=""))
if (is.na(li) | is.na(ls))
return(0)
if (abs(ci$conf.int[1]*100-li)<error & abs(ci$conf.int[2]*100-ls)<error)
return(1)
else
return(0)
}
# Function to correct the interpretation of a confidence interval
correct.interpretation <- function(correct, answer){
answer <- trimws(answer, "l")
cat(paste("Interpetation\nYour answer\n", answer,  "\nCorrect answer\n"), correct)
if (answer=="")
return (0)
if (answer==correct)
return(1)
else
return(0)
}
# Function to correct a sample size computation
correct.sample.size <- function(correct, answer, error=1){
writeLines("Your answer")
writeLines(paste(" ", answer, sep=""));
writeLines("Correct answer")
writeLines(paste(" ", round(correct$n,2), sep=""))
if (is.na(answer))
return(0)
if (abs(correct$n-answer)<error)
return(1)
else
return(0)
}
score = 0
data <- cbind(data, subjectid=factor(1:nrow(data)))
result <- ezANOVA(data=data[!is.na(data$Pain.Relief.12h),], dv=.(Pain.Relief.12h), wid=.(subjectid), between=.(Gender.Treatment), return_aov=TRUE)
writeLines(paste("P-value:", round(results[["ANOVA"]]$p,4)))
writeLines(paste("P-value:", round(result[["ANOVA"]]$p,4)))
pairs <- TukeyHSD(result[["aov"]])
pairs
result
pairs[[4]]
length(pairs)
require(ez)
require(nlme)
require(multcomp)
data <- cbind(data, subjectid=factor(1:nrow(data)))
result <- ezANOVA(data=data[!is.na(data$Pain.Relief.12h),], dv=.(Pain.Relief.12h), wid=.(subjectid), between=.(Gender.Treatment), return_aov=TRUE)
pairs <- TukeyHSD(result[["aov"]])
pairs[[1]]
pairs[[1]][4,4]
pairs <- TukeyHSD(result[["aov"]])
writeLines(paste("P-value:", round(pairs[[1]][4,4],4)))
cuasidesv <- descriptiveStats(data["Pain.Relief.Global"], statistics=c('sd'), quantiles= c())
cuasidesv
x <- data[["Pain.Relief.Global"]]
result <- sampleSizeOneMean(mean=, sd=sd(x), sig.level= 1-0.95, error=0.02,error.type="absolute")
writeLines(paste("Sample size:", round(result$n)))
x <- data[["Pain.Relief.Global"]]
result <- sampleSizeOneMean(mean=, sd=sd(x), sig.level= 1-0.95, error=0.2,error.type="absolute")
writeLines(paste("Sample size:", round(result$n)))
freq <- nrow(data.females)
data.males <- subset(data, Gender=="male")
data.females <- subset(data, Gender=="female")
freq <- nrow(data.females)
n  <- nrow(data)
freq
n
freq <- nrow(data.females)
n  <- nrow(data)
result <- sampleSizeOneProportion(p=freq/n, sig.level= 1-0.90, error=0.05)
writeLines(paste("Sample size:", round(result$n)))
confint <- function (ci){
return(paste("Intervalo: ({1:NUMERICAL:=", round(ci$conf.int[1],4), ":0.001} , {1:NUMERICAL:=", round(ci$conf.int[2],4), ":0.001})\nTherefore, we can assert: {2:MULTICHOICE:=There is no significant difference\n~%-25% Opcion 2\n~%-25% Opcion 3\n~%-25% Opcion 4\n~%-25% The other assertions are false.}" , sep=""));
}
confint.percentage <- function (ci){
return(paste("Intervalo: ({1:NUMERICAL:=", round(ci$conf.int[1]*100,2), ":0.1} , {1:NUMERICAL:=", round(ci$conf.int[2]*100,2), ":0.1})\nTherefore, we can assert: {2:MULTICHOICE:=There is no significant difference\n~%-25% Opcion 2\n~%-25% Opcion 3\n~%-25% Opcion 4\n~%-25% The other assertions are false.}" , sep=""));
}
library(knitr)
library(rmarkdown)
library(xlsx)
library(dplyr)
data.answers <- arrange(read.csv("answers.csv"), Surname)
grades <- data.frame(Surname=character(0), Name=character(0), Grade=numeric(0))
library(knitr)
library(rmarkdown)
library(xlsx)
library(dplyr)
datos.respuestas <- arrange(read.csv("respuestas.csv"), Apellido)
notas.trabajo <- data.frame(Apellido=character(0), Nombre=character(0), Nota=numeric(0))
factorial(5)
factorial(20)
2.8*8
setwd("/media/alf/datos/web/asalber.github.io/estadistica/examenes")
library(knitr)
knit("farmacia-2017-11-27.Rmd","farmacia-2017-11-27.md")
knit("farmacia-2017-11-27.Rmd","farmacia-2017-11-27.md")
setwd("/media/alf/datos/web/asalber.github.io/statistics/exams")
knit("pharmacy-2017-11-27.Rmd","pharmacy-2017-11-27.md")
setwd("/media/alf/datos/web/asalber.github.io/estadistica/examenes")
knit("farmacia-2017-11-27.Rmd","farmacia-2017-11-27.md")
knit("farmacia-2017-11-27.Rmd","farmacia-2017-11-27.md")
