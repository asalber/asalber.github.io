<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python | Aprende con Alf</title>
    <link>/category/python/</link>
      <atom:link href="/category/python/index.xml" rel="self" type="application/rss+xml" />
    <description>Python</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>es-es</language><lastBuildDate>Thu, 24 Mar 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/logo_hude38443eeb2faa5fa84365aba7d86a77_3514_300x300_fit_lanczos_3.png</url>
      <title>Python</title>
      <link>/category/python/</link>
    </image>
    
    <item>
      <title>Introducción a Python</title>
      <link>/docencia/python/manual/introduccion-python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/manual/introduccion-python/</guid>
      <description>&lt;h2 id=&#34;qué-es-python&#34;&gt;¿Qué es Python?&lt;/h2&gt;
&lt;p&gt;
&lt;a href=&#34;https://www.python.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python&lt;/a&gt; es un lenguaje de programación de alto nivel multiparadigma que permite:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Programación imperativa&lt;/li&gt;
&lt;li&gt;Programación funcional&lt;/li&gt;
&lt;li&gt;Programación orientada a objetos&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fue creado por Guido van Rossum en 1990 aunque actualmente es desarrollado y mantenido por la 
&lt;a href=&#34;https://www.python.org/psf-landing/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python Software Foundation&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;principales-ventajas-de-python&#34;&gt;Principales ventajas de Python&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Es de código abierto (certificado por la OSI).&lt;/li&gt;
&lt;li&gt;Es interpretable y compilable.&lt;/li&gt;
&lt;li&gt;Es fácil de aprender gracias a que su sintaxis es bastante legible para los humanos.&lt;/li&gt;
&lt;li&gt;Es un lenguaje maduro (29 años).&lt;/li&gt;
&lt;li&gt;Es fácilmente extensible e integrable en otros lenguajes (C, java).&lt;/li&gt;
&lt;li&gt;Esta mantenido por una gran comunidad de desarrolladores y hay multitud de recursos para su aprendizaje.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tipos-de-ejecución&#34;&gt;Tipos de ejecución&lt;/h2&gt;
&lt;h3 id=&#34;interpretado-en-la-consola-de-python&#34;&gt;Interpretado en la consola de Python&lt;/h3&gt;
&lt;p&gt;Se ejecuta cada instrucción que introduce el usuario de manera interactiva.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt; python
&amp;gt;&amp;gt;&amp;gt; name = &amp;quot;Alf&amp;quot;
&amp;gt;&amp;gt;&amp;gt; print(&amp;quot;Hola &amp;quot;, name)
Hola Alf
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;interpretado-en-fichero&#34;&gt;Interpretado en fichero&lt;/h3&gt;
&lt;p&gt;Se leen y se ejecutan una a una todas las instrucciones del fichero.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Fichero hola.py
name = &amp;quot;Alf&amp;quot;
print(&amp;quot;Hola &amp;quot;, name)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt; python hola.py
Hola Alf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;También se puede hacer el fichero ejecutable indicando en la primera línea la ruta hasta el intérprete de Python.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-{python}&#34;&gt;#!/usr/bin/python3
name = &amp;quot;Alf&amp;quot;
print(&amp;quot;Hola&amp;quot;, name)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt; chmod +x hola.py
&amp;gt; ./hola.py
Hola Alf
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;compilado-a-bytecode&#34;&gt;Compilado a bytecode&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Fichero hola.py
name = &amp;quot;Alf&amp;quot;
print(&amp;quot;Hola &amp;quot; + name)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt; python -O -m py_compile hola.py
&amp;gt; python __pycache__/hola.cpython-37.pyc
Hola Alf
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;compilado-a-ejecutable-del-sistema&#34;&gt;Compilado a ejecutable del sistema&lt;/h3&gt;
&lt;p&gt;Hay distintos paquetes que permiten compilar a un ejecutable del sistema operativo usado, por ejemplo &lt;code&gt;pyinstaller&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt; conda install pyinstaller
&amp;gt; pyinstaller hola.py
&amp;gt; ./dist/hola/hola
Hola Alf
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Ejercicios de Tipos de Datos Simples</title>
      <link>/docencia/python/ejercicios/tipos-datos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/ejercicios/tipos-datos/</guid>
      <description>&lt;!-- Datacamp light
&lt;script async type=&#34;text/javascript&#34; src=&#34;https://cdn.datacamp.com/dcl-react-dev.js.gz&#34;&gt;&lt;/script&gt;  
--&gt;
&lt;h2 id=&#34;ejercicio-1&#34;&gt;Ejercicio 1&lt;/h2&gt;
&lt;p&gt;Escribir un programa que muestre por pantalla la cadena &lt;code&gt;¡Hola Mundo!&lt;/code&gt;.&lt;/p&gt;
&lt;!-- &lt;div&gt;&lt;button class=&#34;resolution&#34;&gt;Resolver&lt;/button&gt;&lt;/div&gt;
&lt;div data-datacamp-exercise data-lang=&#34;python&#34; id=&#34;solution&#34; style=&#34;display: none&#34;&gt;

  &lt;code data-type=&#34;sample-code&#34;&gt;
    # Mostrar por pantalla la cadena &#34;¡Hola mundo!&#34;

  &lt;/code&gt;

  &lt;code data-type=&#34;solution&#34;&gt;
  # Mostrar por pantalla la cadena &#34;¡Hola mundo!&#34;
  print(&#34;¡Hola mundo!&#34;)
  &lt;/code&gt;
  
  &lt;code data-type=&#34;sct&#34;&gt;

  Ex().multi(
    check_function(&#34;print&#34;),
    has_output(&#34;¡Hola mundo!&#34;, pattern = False)
  )
  success_msg(&#34;¡Correcto!&#34;)
  &lt;/code&gt;
  
  &lt;div data-type=&#34;hint&#34;&gt;
    Usa la función &lt;code&gt;print&lt;/code&gt; para mostrar cadenas por pantalla.
  &lt;/div&gt;
&lt;/div&gt; --&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/tipos-datos/ejercicio1.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-2&#34;&gt;Ejercicio 2&lt;/h2&gt;
&lt;p&gt;Escribir un programa que almacene la cadena &lt;code&gt;¡Hola Mundo!&lt;/code&gt; en una variable y luego muestre por pantalla el contenido de la variable.&lt;/p&gt;
&lt;!-- &lt;div&gt;&lt;button class=&#34;resolution&#34;&gt;Resolver&lt;/button&gt;&lt;/div&gt;
&lt;div data-datacamp-exercise data-lang=&#34;python&#34; id=&#34;solution&#34; style=&#34;display: none&#34;&gt;

  &lt;code data-type=&#34;sample-code&#34;&gt;
    # Guardar la cadena &#34;¡Hola mundo!&#34; en la variable a

    # Mostrar por pantalla contenido de la variable a

  &lt;/code&gt;

  &lt;code data-type=&#34;solution&#34;&gt;
    # Guardar la cadena &#34;¡Hola mundo!&#34; en la variable a
    a = &#34;¡Hola mundo!&#34;

    # Mostrar por pantalla contenido de la variable a  
    print(a)
    &lt;/code&gt;
  
  &lt;code data-type=&#34;sct&#34;&gt;
    Ex().multi(
      check_object(&#34;a&#34;).has_equal_value(),
      check_function(&#34;print&#34;),
      has_output(&#34;¡Hola mundo!&#34;, pattern = False)
    )
    success_msg(&#34;¡Correcto!&#34;)
  &lt;/code&gt;
  
  &lt;div data-type=&#34;hint&#34;&gt;
    Usa el símbolo `=` para asignar un valor a una variable y la función &lt;code&gt;print&lt;/code&gt; para mostrar el contenido de la variable por pantalla.
  &lt;/div&gt;
&lt;/div&gt; --&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/tipos-datos/ejercicio2.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-3&#34;&gt;Ejercicio 3&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pregunte el nombre del usuario en la consola y después de que el usuario lo introduzca muestre por pantalla la cadena &lt;code&gt;¡Hola &amp;lt;nombre&amp;gt;!&lt;/code&gt;, donde &lt;code&gt;&amp;lt;nombre&amp;gt;&lt;/code&gt; es el nombre que el usuario haya introducido.&lt;/p&gt;
&lt;!-- &lt;div&gt;&lt;button class=&#34;resolution&#34;&gt;Resolver&lt;/button&gt;&lt;/div&gt;
&lt;div data-datacamp-exercise data-lang=&#34;python&#34; id=&#34;solution&#34; style=&#34;display: none&#34;&gt;

&lt;code data-type=&#34;pre-exercise-code&#34;&gt;
    import sys
    from io import StringIO
    sys.stdin = StringIO(&#34;input\n&#34;)
    del sys
&lt;/code&gt;

  &lt;code data-type=&#34;sample-code&#34;&gt;
    # Preguntar el nombre del usuario y guardarlo en la variable nombre

    # Mostrar por pantalla el saludo con el nombre

  &lt;/code&gt;

  &lt;code data-type=&#34;solution&#34;&gt;
    # Preguntar el nombre del usuario y guardarlo en la variable nombre
    nombre = input(&#34;¿Cómo te llamas?&#34;)
    # Mostrar por pantalla el saludo con el nombre
    print(&#34;Hola &#34; + nombre + &#34;!&#34;)
  &lt;/code&gt;
  
  &lt;code data-type=&#34;sct&#34;&gt;
    Ex().multi(
      check_function(&#34;input&#34;),
      check_object(&#34;nombre&#34;),
      check_function(&#34;print&#34;),
      has_output(&#34;¡Hola \w+!&#34;)
    )
    success_msg(&#34;¡Correcto!&#34;)
  &lt;/code&gt;
  
  &lt;div data-type=&#34;hint&#34;&gt;
    Usa la función &lt;code&gt;input&lt;/code&gt; para leer una cadena desde la terminal, el símbolo `=` para asignar la cadena a la variable y la función &lt;code&gt;print&lt;/code&gt; para mostrar el saludo por pantalla.
  &lt;/div&gt;
&lt;/div&gt; --&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/tipos-datos/ejercicio3.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-4&#34;&gt;Ejercicio 4&lt;/h2&gt;
&lt;p&gt;Escribir un programa que muestre por pantalla el resultado de la siguiente operación aritmética $\left(\frac{3+2}{2\cdot 5}\right)^2$.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/tipos-datos/ejercicio4.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-5&#34;&gt;Ejercicio 5&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pregunte al usuario por el número de horas trabajadas y el coste por hora.
Después debe mostrar por pantalla la paga que le corresponde.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/tipos-datos/ejercicio5.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-6&#34;&gt;Ejercicio 6&lt;/h2&gt;
&lt;p&gt;Escribir un programa que lea un entero positivo, $n$, introducido por el usuario y después muestre en pantalla la suma de todos los enteros desde 1 hasta $n$.
La suma de los $n$ primeros enteros positivos puede ser calculada de la siguiente forma:&lt;/p&gt;
&lt;p&gt;$$ \mbox{suma} = \frac{n(n+1)}{2} $$&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/tipos-datos/ejercicio6.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-7&#34;&gt;Ejercicio 7&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pida al usuario su peso (en kg) y estatura (en metros), calcule el índice de masa corporal y lo almacene en una variable, y muestre por pantalla la frase &lt;code&gt;Tu índice de masa corporal es &amp;lt;imc&amp;gt;&lt;/code&gt; donde &lt;code&gt;&amp;lt;imc&amp;gt;&lt;/code&gt; es el índice de masa corporal calculado redondeado con dos decimales.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/tipos-datos/ejercicio7.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-8&#34;&gt;Ejercicio 8&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pida al usuario dos números enteros y muestre por pantalla la &lt;code&gt;&amp;lt;n&amp;gt; entre &amp;lt;m&amp;gt; da un cociente &amp;lt;c&amp;gt; y un resto &amp;lt;r&amp;gt;&lt;/code&gt; donde &lt;code&gt;&amp;lt;n&amp;gt;&lt;/code&gt; y &lt;code&gt;&amp;lt;m&amp;gt;&lt;/code&gt; son los números introducidos por el usuario, y &lt;code&gt;&amp;lt;c&amp;gt;&lt;/code&gt; y &lt;code&gt;&amp;lt;r&amp;gt;&lt;/code&gt; son el cociente y el resto de la división entera respectivamente.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/tipos-datos/ejercicio8.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-9&#34;&gt;Ejercicio 9&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pregunte al usuario una cantidad a invertir, el interés anual y el número de años, y muestre por pantalla el capital obtenido en la inversión.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/tipos-datos/ejercicio9.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-10&#34;&gt;Ejercicio 10&lt;/h2&gt;
&lt;p&gt;Una juguetería tiene mucho éxito en dos de sus productos: payasos y muñecas.
Suele hacer venta por correo y la empresa de logística les cobra por peso de cada paquete así que deben calcular el peso de los payasos y muñecas que saldrán en cada paquete a demanda. Cada payaso pesa 112 g y cada muñeca 75 g.
Escribir un programa que lea el número de payasos y muñecas vendidos en el último pedido y calcule el peso total del paquete que será enviado.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/tipos-datos/ejercicio10.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-11&#34;&gt;Ejercicio 11&lt;/h2&gt;
&lt;p&gt;Imagina que acabas de abrir una nueva cuenta de ahorros que te ofrece el 4% de interés al año. Estos ahorros debido a intereses, que no se cobran hasta finales de año, se te añaden al balance final de tu cuenta de ahorros.
Escribir un programa que comience leyendo la cantidad de dinero depositada en la cuenta de ahorros, introducida por el usuario. Después el programa debe calcular y mostrar por pantalla la cantidad de ahorros tras el primer, segundo y tercer años.
Redondear cada cantidad a dos decimales.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/tipos-datos/ejercicio11.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-12&#34;&gt;Ejercicio 12&lt;/h2&gt;
&lt;p&gt;Una panadería vende barras de pan a 3.49€ cada una. El pan que no es el día tiene un descuento del 60%.
Escribir un programa que comience leyendo el número de barras vendidas que no son del día. Después el programa debe mostrar el precio habitual de una barra de pan, el descuento que se le hace por no ser fresca y el coste final total.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/tipos-datos/ejercicio12.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ejercicios de Cadenas</title>
      <link>/docencia/python/ejercicios/cadenas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/ejercicios/cadenas/</guid>
      <description>&lt;h2 id=&#34;ejercicio-1&#34;&gt;Ejercicio 1&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pregunte el nombre del usuario en la consola y un número entero e imprima por pantalla en líneas distintas el nombre del usuario tantas veces como el número introducido.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/cadenas/ejercicio1.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-2&#34;&gt;Ejercicio 2&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pregunte el nombre completo del usuario en la consola y después muestre por pantalla el nombre completo del usuario tres veces, una con todas las letras minúsculas, otra con todas las letras mayúsculas y otra solo con la primera letra del nombre y de los apellidos en mayúscula. El usuario puede introducir su nombre combinando mayúsculas y minúsculas como quiera.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/cadenas/ejercicio2.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-3&#34;&gt;Ejercicio 3&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pregunte el nombre del usuario en la consola y después de que el usuario lo introduzca muestre por pantalla &lt;code&gt;&amp;lt;NOMBRE&amp;gt; tiene &amp;lt;n&amp;gt; letras&lt;/code&gt;, donde &lt;code&gt;&amp;lt;NOMBRE&amp;gt;&lt;/code&gt; es el nombre de usuario en mayúsculas y &lt;code&gt;&amp;lt;n&amp;gt;&lt;/code&gt; es el número de letras que tienen el nombre.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/cadenas/ejercicio3.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-4&#34;&gt;Ejercicio 4&lt;/h2&gt;
&lt;p&gt;Los teléfonos de una empresa tienen el siguiente formato &lt;code&gt;prefijo-número-extension&lt;/code&gt; donde el prefijo es el código del país &lt;code&gt;+34&lt;/code&gt;, y la extensión tiene dos dígitos (por ejemplo &lt;code&gt;+34-913724710-56&lt;/code&gt;). Escribir un programa que pregunte por un número de teléfono con este formato y muestre por pantalla el número de teléfono sin el prefijo y la extensión.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/cadenas/ejercicio4.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-5&#34;&gt;Ejercicio 5&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pida al usuario que introduzca una frase en la consola y muestre por pantalla la frase invertida.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/cadenas/ejercicio5.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-6&#34;&gt;Ejercicio 6&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pida al usuario que introduzca una frase en la consola y una vocal, y después muestre por pantalla la misma frase pero con la vocal introducida en mayúscula.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/cadenas/ejercicio6.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-7&#34;&gt;Ejercicio 7&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pregunte el correo electrónico del usuario en la consola y muestre por pantalla otro correo electrónico con el mismo nombre (la parte delante de la arroba &lt;code&gt;@&lt;/code&gt;) pero con dominio &lt;code&gt;ceu.es&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/cadenas/ejercicio7.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-8&#34;&gt;Ejercicio 8&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pregunte por consola el precio de un producto en euros con dos decimales y muestre por pantalla el número de euros y el número de céntimos del precio introducido.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/cadenas/ejercicio8.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-9&#34;&gt;Ejercicio 9&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pregunte al usuario la fecha de su nacimiento en formato &lt;code&gt;dd/mm/aaaa&lt;/code&gt; y muestra por pantalla, el día, el mes y el año. Adaptar el programa anterior para que también funcione cuando el día o el mes se introduzcan con un solo carácter.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/cadenas/ejercicio9.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-10&#34;&gt;Ejercicio 10&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pregunte por consola por los productos de una cesta de la compra, separados por comas, y muestre por pantalla cada uno de los productos en una línea distinta.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/cadenas/ejercicio10.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-11&#34;&gt;Ejercicio 11&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pregunte el nombre el un producto, su precio y un número de unidades y muestre por pantalla una cadena con el nombre del producto seguido de su precio unitario con 6 dígitos enteros y 2 decimales, el número de unidades con tres dígitos y el coste total con 8 dígitos enteros y 2 decimales.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/cadenas/ejercicio11.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ejercicios de Condicionales</title>
      <link>/docencia/python/ejercicios/condicionales/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/ejercicios/condicionales/</guid>
      <description>&lt;h2 id=&#34;ejercicio-1&#34;&gt;Ejercicio 1&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pregunte al usuario su edad y muestre por pantalla si es mayor de edad o no.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/condicionales/ejercicio1.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-2&#34;&gt;Ejercicio 2&lt;/h2&gt;
&lt;p&gt;Escribir un programa que almacene la cadena de caracteres &lt;code&gt;contraseña&lt;/code&gt; en una variable, pregunte al usuario por la contraseña e imprima por pantalla si la contraseña introducida por el usuario coincide con la guardada en la variable sin tener en cuenta mayúsculas y minúsculas.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/condicionales/ejercicio2.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-3&#34;&gt;Ejercicio 3&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pida al usuario dos números y muestre por pantalla su división. Si el divisor es cero el programa debe mostrar un error.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/condicionales/ejercicio3.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-4&#34;&gt;Ejercicio 4&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pida al usuario un número entero y muestre por pantalla si es par o impar.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/condicionales/ejercicio4.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-5&#34;&gt;Ejercicio 5&lt;/h2&gt;
&lt;p&gt;Para tributar un determinado impuesto se debe ser mayor de 16 años y tener unos ingresos iguales o superiores a 1000 € mensuales.
Escribir un programa que pregunte al usuario su edad y sus ingresos mensuales y muestre por pantalla si el usuario tiene que tributar o no.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/condicionales/ejercicio5.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-6&#34;&gt;Ejercicio 6&lt;/h2&gt;
&lt;p&gt;Los alumnos de un curso se han dividido en dos grupos A y B de acuerdo al sexo y el nombre. El grupo A esta formado por las mujeres con un nombre anterior a la M y los hombres con un nombre posterior a la N y el grupo B por el resto.
Escribir un programa que pregunte al usuario su nombre y sexo, y muestre por pantalla el grupo que le corresponde.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/condicionales/ejercicio6.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-7&#34;&gt;Ejercicio 7&lt;/h2&gt;
&lt;p&gt;Los tramos impositivos para la declaración de la renta en un determinado país son los siguientes:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Renta&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Tipo impositivo&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Menos de 10000€&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;5%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Entre 10000€ y 20000€&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;15%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Entre 20000€ y 35000€&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;20%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Entre 35000€ y 60000€&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;30%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Más de 60000€&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;45%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Escribir un programa que pregunte al usuario su renta anual y muestre por pantalla el tipo impositivo que le corresponde.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/condicionales/ejercicio7.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-8&#34;&gt;Ejercicio 8&lt;/h2&gt;
&lt;p&gt;En una determinada empresa, sus empleados son evaluados al final de cada año. Los puntos que pueden obtener en la evaluación comienzan en 0.0 y pueden ir aumentando, traduciéndose en mejores beneficios.
Los puntos que pueden conseguir los empleados pueden ser 0.0, 0.4, 0.6 o más, pero no valores intermedios entre las cifras mencionadas.
A continuación se muestra una tabla con los niveles correspondientes a cada puntuación.
La cantidad de dinero conseguida en cada nivel es de 2.400€ multiplicada por la puntuación del nivel.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Nivel&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Puntuación&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Inaceptable&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0.0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Aceptable&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0.4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Meritorio&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0.6 o más&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Escribir un programa que lea la puntuación del usuario e indique su nivel de rendimiento, así como la cantidad de dinero que recibirá el usuario.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/condicionales/ejercicio8.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-9&#34;&gt;Ejercicio 9&lt;/h2&gt;
&lt;p&gt;Escribir un programa para una empresa que tiene salas de juegos para todas las edades y quiere calcular de forma automática el precio que debe cobrar a sus clientes por entrar.
El programa debe preguntar al usuario la edad del cliente y mostrar el precio de la entrada.
Si el cliente es menor de 4 años puede entrar gratis, si tiene entre 4 y 18 años debe pagar 5€ y si es mayor de 18 años, 10€.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/condicionales/ejercicio9.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-10&#34;&gt;Ejercicio 10&lt;/h2&gt;
&lt;p&gt;La pizzería Bella Napoli ofrece pizzas vegetarianas y no vegetarianas a sus clientes.
Los ingredientes para cada tipo de pizza aparecen a continuación.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ingredientes vegetarianos: Pimiento y tofu.&lt;/li&gt;
&lt;li&gt;Ingredientes no vegetarianos: Peperoni, Jamón y Salmón.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Escribir un programa que pregunte al usuario si quiere una pizza vegetariana o no, y en función de su respuesta le muestre un menú con los ingredientes disponibles para que elija.
Solo se puede eligir un ingrediente además de la mozzarella y el tomate que están en todas la pizzas.
Al final se debe mostrar por pantalla si la pizza elegida es vegetariana o no y todos los ingredientes que lleva.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/condicionales/ejercicio10.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tipos de Datos Primitivos Simples</title>
      <link>/docencia/python/manual/tipos-datos-simples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/manual/tipos-datos-simples/</guid>
      <description>&lt;h2 id=&#34;tipos-de-datos-primitivos-simples&#34;&gt;Tipos de datos primitivos simples&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Números&lt;/strong&gt; (numbers): Secuencia de dígitos (pueden incluir el - para negativos y el . para decimales) que representan números.&lt;br&gt;
&lt;strong&gt;Ejemplo&lt;/strong&gt;. 0, -1, 3.1415.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cadenas&lt;/strong&gt; (strings): Secuencia de caracteres alfanuméricos que representan texto. Se escriben entre comillas simples o dobles.&lt;br&gt;
&lt;strong&gt;Ejemplo&lt;/strong&gt;. &amp;lsquo;Hola&amp;rsquo;, &amp;ldquo;Adiós&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Booleanos&lt;/strong&gt; (boolean): Contiene únicamente dos elementos &lt;code&gt;True&lt;/code&gt; y &lt;code&gt;False&lt;/code&gt; que representan los valores lógicos verdadero y falso respectivamente.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Estos datos son inmutables, es decir, su valor es constante y no puede cambiar.&lt;/p&gt;
&lt;h2 id=&#34;tipos-de-datos-primitivos-compuestos-contenedores&#34;&gt;Tipos de datos primitivos compuestos (contenedores)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Listas&lt;/strong&gt; (lists): Colecciones de objetos que representan secuencias ordenadas de objetos de distintos tipos. Se representan con corchetes y los elementos se separan por comas.&lt;br&gt;
&lt;strong&gt;Ejemplo&lt;/strong&gt;. [1, &amp;ldquo;dos&amp;rdquo;, [3, 4], True].&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tuplas&lt;/strong&gt; (tuples). Colecciones de objetos que representan secuencias ordenadas de objetos de distintos tipos. A diferencia de las listas son inmutables, es decir, que no cambian durante la ejecución. Se representan mediante paréntesis y los elementos se separan por comas.&lt;br&gt;
&lt;strong&gt;Ejemplo&lt;/strong&gt;. (1, &amp;lsquo;dos&amp;rsquo;, 3)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Diccionarios&lt;/strong&gt; (dictionaries): Colecciones de objetos con una clave asociada. Se representan con llaves, los pares separados por comas y cada par contiene una clave y un objeto asociado separados por dos puntos.&lt;br&gt;
&lt;strong&gt;Ejemplo&lt;/strong&gt;. {&amp;lsquo;pi&amp;rsquo;:3.1416, &amp;rsquo;e&amp;rsquo;:2.718}.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;clase-de-un-dato-type&#34;&gt;Clase de un dato (&lt;code&gt;type()&lt;/code&gt;)&lt;/h2&gt;
&lt;p&gt;La clase a la que pertenece un dato se obtiene con el comando &lt;code&gt;type()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; type(1)
&amp;lt;class &#39;int&#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; type(&amp;quot;Hola&amp;quot;)
&amp;lt;class &#39;str&#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; type([1, &amp;quot;dos&amp;quot;, [3, 4], True])
&amp;lt;class &#39;list&#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt;type({&#39;pi&#39;:3.1416, &#39;e&#39;:2.718})
&amp;lt;class &#39;dict&#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt;type((1, &#39;dos&#39;, 3))
&amp;lt;class &#39;tuple&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;números-clases-int-y-float&#34;&gt;Números (clases &lt;code&gt;int&lt;/code&gt; y &lt;code&gt;float&lt;/code&gt;)&lt;/h2&gt;
&lt;p&gt;Secuencia de dígitos (pueden incluir el - para negativos y el . para decimales) que representan números.
Pueden ser enteros (&lt;code&gt;int&lt;/code&gt;) o reales (&lt;code&gt;float&lt;/code&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; type(1)
&amp;lt;class &#39;int&#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; type(-2)
&amp;lt;class &#39;int&#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; type(2.3)
&amp;lt;class &#39;float&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;operadores-aritméticos&#34;&gt;Operadores aritméticos&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Operadores aritméticos: &lt;code&gt;+&lt;/code&gt; (suma), &lt;code&gt;-&lt;/code&gt; (resta), &lt;code&gt;*&lt;/code&gt; (producto), &lt;code&gt;/&lt;/code&gt; (cociente), &lt;code&gt;//&lt;/code&gt; (cociente división entera), &lt;code&gt;%&lt;/code&gt; (resto división entera), &lt;code&gt;**&lt;/code&gt; (potencia).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Orden de prioridad de evaluación:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Funciones predefinidas&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Potencias&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Productos y cocientes&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Sumas y restas&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Se puede saltar el orden de evaluación utilizando paréntesis &lt;code&gt;( )&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; 2+3
5
&amp;gt;&amp;gt;&amp;gt; 5*-2
-10
&amp;gt;&amp;gt;&amp;gt; 5/2
2.5
&amp;gt;&amp;gt;&amp;gt; 5//2
2
&amp;gt;&amp;gt;&amp;gt; (2+3)**2
25
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;operadores-lógicos-con-números&#34;&gt;Operadores lógicos con números&lt;/h3&gt;
&lt;p&gt;Devuelven un valor lógico o booleano.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Operadores lógicos: &lt;code&gt;==&lt;/code&gt; (igual que), &lt;code&gt;&amp;gt;&lt;/code&gt; (mayor que), &lt;code&gt;&amp;lt;&lt;/code&gt; (menor que), &lt;code&gt;&amp;gt;=&lt;/code&gt; (mayor o igual que), &lt;code&gt;&amp;lt;=&lt;/code&gt; (menor o igual que), &lt;code&gt;!=&lt;/code&gt; (distinto de).&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; 3==3
True
&amp;gt;&amp;gt;&amp;gt; 3.1&amp;lt;=3
False
&amp;gt;&amp;gt;&amp;gt; -1!=1
True
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;cadenas-clase-str&#34;&gt;Cadenas (clase &lt;code&gt;str&lt;/code&gt;)&lt;/h2&gt;
&lt;p&gt;Secuencia de caracteres alfanuméricos que representan texto. Se escriben entre comillas sencillas &amp;rsquo; o dobles &amp;ldquo;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;Python&#39;
&amp;quot;123&amp;quot;
&#39;True&#39;
# Cadena vacía
&#39;&#39;
# Cadena con un espacio en blanco
&#39; &#39;
# Cambio de línea
&#39;\n&#39;
# Tabulador
&#39;\t&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;acceso-a-los-elementos-de-una-cadena&#34;&gt;Acceso a los elementos de una cadena&lt;/h3&gt;
&lt;p&gt;Cada carácter tiene asociado un índice que permite acceder a él.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Cadena&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;code&gt;P&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;code&gt;y&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;code&gt;t&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;code&gt;h&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;code&gt;o&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;code&gt;n&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Índice positivo&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Índice negativo&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-6&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-5&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-4&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-3&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;c[i]&lt;/code&gt; devuelve el carácter de la cadena &lt;code&gt;c&lt;/code&gt; con el índice &lt;code&gt;i&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;i class=&#34;fa fa-exclamation-triangle&#34; style=&#34;color:red;&#34;&gt;&lt;/i&gt; &lt;em&gt;El índice del primer carácter de la cadena es 0.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;También se pueden utilizar índices negativos para recorrer la cadena del final al principio.&lt;/p&gt;
&lt;p&gt;&lt;i class=&#34;fa fa-exclamation-triangle&#34; style=&#34;color:red;&#34;&gt;&lt;/i&gt; &lt;em&gt;El índice del último carácter de la cadena es -1.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;Python&#39;[0]
&#39;P&#39;
&amp;gt;&amp;gt;&amp;gt; &#39;Python&#39;[1]
&#39;y&#39;
&amp;gt;&amp;gt;&amp;gt; &#39;Python&#39;[-1]
&#39;n&#39;
&amp;gt;&amp;gt;&amp;gt; &#39;Python&#39;[6]
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
IndexError: string index out of range
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;subcadenas&#34;&gt;Subcadenas&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;c[i:j:k]&lt;/code&gt; : Devuelve la subcadena de &lt;code&gt;c&lt;/code&gt; desde el carácter con el índice &lt;code&gt;i&lt;/code&gt; hasta el carácter anterior al índice &lt;code&gt;j&lt;/code&gt;, tomando caracteres cada &lt;code&gt;k&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;Python&#39;[1:4]
&#39;yth&#39;
&amp;gt;&amp;gt;&amp;gt; &#39;Python&#39;[1:1]
&#39;&#39;
&amp;gt;&amp;gt;&amp;gt; &#39;Python&#39;[2:]
&#39;thon&#39;
&amp;gt;&amp;gt;&amp;gt; &#39;Python&#39;[:-2]
&#39;Pyth&#39;
&amp;gt;&amp;gt;&amp;gt; &#39;Python&#39;[:]
&#39;Python&#39;
&amp;gt;&amp;gt;&amp;gt; &#39;Python&#39;[0:6:2]
&#39;Pto&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;operaciones-con-cadenas&#34;&gt;Operaciones con cadenas&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;c1 + c2&lt;/code&gt; : Devuelve la cadena resultado de concatenar las cadenas &lt;code&gt;c1&lt;/code&gt; y &lt;code&gt;c2&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c * n&lt;/code&gt; : Devuelve la cadena resultado de concatenar &lt;code&gt;n&lt;/code&gt; copias de la cadena &lt;code&gt;c&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c1 in c2&lt;/code&gt; : Devuelve &lt;code&gt;True&lt;/code&gt; si &lt;code&gt;c1&lt;/code&gt; es una cadena concenida en &lt;code&gt;c2&lt;/code&gt; y &lt;code&gt;False&lt;/code&gt; en caso contrario.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c1 not in c2&lt;/code&gt; : Devuelve &lt;code&gt;True&lt;/code&gt; si &lt;code&gt;c1&lt;/code&gt; es una cadena no concenida en &lt;code&gt;c2&lt;/code&gt; y &lt;code&gt;False&lt;/code&gt; en caso contrario.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;Me gusta &#39; + &#39;Python&#39;
&#39;Me gusta Python&#39;
&amp;gt;&amp;gt;&amp;gt; &#39;Python&#39; * 3
&#39;PythonPythonPython&#39;
&amp;gt;&amp;gt;&amp;gt; &#39;y&#39; in &#39;Python&#39;
True
&amp;gt;&amp;gt;&amp;gt; &#39;tho&#39; in &#39;Python&#39;
True
&amp;gt;&amp;gt;&amp;gt; &#39;to&#39; not in &#39;Python&#39;
True
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;operaciones-de-comparación-de-cadenas&#34;&gt;Operaciones de comparación de cadenas&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;c1 == c2&lt;/code&gt; : Devuelve &lt;code&gt;True&lt;/code&gt; si la cadena &lt;code&gt;c1&lt;/code&gt; es igual que la cadena &lt;code&gt;c2&lt;/code&gt; y &lt;code&gt;False&lt;/code&gt; en caso contrario.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c1 &amp;gt; c2&lt;/code&gt; : Devuelve &lt;code&gt;True&lt;/code&gt; si la cadena &lt;code&gt;c1&lt;/code&gt; sucede a la cadena &lt;code&gt;c2&lt;/code&gt; y &lt;code&gt;False&lt;/code&gt; en caso contrario.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c1 &amp;lt; c2&lt;/code&gt; : Devuelve &lt;code&gt;True&lt;/code&gt; si la cadena &lt;code&gt;c1&lt;/code&gt; antecede a la cadena &lt;code&gt;c2&lt;/code&gt; y &lt;code&gt;False&lt;/code&gt; en caso contrario.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c1 &amp;gt;= c2&lt;/code&gt; : Devuelve &lt;code&gt;True&lt;/code&gt; si la cadena &lt;code&gt;c1&lt;/code&gt; sucede o es igual a la cadena &lt;code&gt;c2&lt;/code&gt; y &lt;code&gt;False&lt;/code&gt; en caso contrario.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c1 &amp;lt;= c2&lt;/code&gt; : Devuelve &lt;code&gt;True&lt;/code&gt; si la cadena &lt;code&gt;c1&lt;/code&gt; antecede o es igual a la cadena &lt;code&gt;c2&lt;/code&gt; y &lt;code&gt;False&lt;/code&gt; en caso contrario.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c1 != c2&lt;/code&gt; : Devuelve &lt;code&gt;True&lt;/code&gt; si la cadena &lt;code&gt;c1&lt;/code&gt; es distinta de la cadena &lt;code&gt;c2&lt;/code&gt; y &lt;code&gt;False&lt;/code&gt; en caso contrario.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;i class=&#34;fa fa-exclamation-triangle&#34; style=&#34;color:red;&#34;&gt;&lt;/i&gt; &lt;em&gt;Utilizan el orden establecido en el 
&lt;a href=&#34;https://www.codigosascii.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;código ASCII&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;Python&#39; == &#39;python&#39;
False
&amp;gt;&amp;gt;&amp;gt; &#39;Python&#39; &amp;lt; &#39;python&#39;
True
&amp;gt;&amp;gt;&amp;gt; &#39;a&#39; &amp;gt; &#39;Z&#39;
True
&amp;gt;&amp;gt;&amp;gt; &#39;A&#39; &amp;gt;= &#39;Z&#39;
False
&amp;gt;&amp;gt;&amp;gt; &#39;&#39; &amp;lt; &#39;Python&#39;
True
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;funciones-de-cadenas&#34;&gt;Funciones de cadenas&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;len(c)&lt;/code&gt; : Devuelve el número de caracteres de la cadena &lt;code&gt;c&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min(c)&lt;/code&gt; : Devuelve el carácter menor de la cadena &lt;code&gt;c&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max(c)&lt;/code&gt; : Devuelve el carácter mayor de la cadena &lt;code&gt;c&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c.upper()&lt;/code&gt; : Devuelve la cadena con los mismos caracteres que la cadena &lt;code&gt;c&lt;/code&gt; pero en mayúsculas.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c.lower()&lt;/code&gt; : Devuelve la cadena con los mismos caracteres que la cadena &lt;code&gt;c&lt;/code&gt; pero en minúsculas.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c.title()&lt;/code&gt; : Devuelve la cadena con los mismos caracteres que la cadena &lt;code&gt;c&lt;/code&gt; con el primer carácter en mayúsculas y el resto en minúsculas.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c.split(delimitador)&lt;/code&gt; : Devuelve la lista formada por las subcadenas que resultan de partir la cadena &lt;code&gt;c&lt;/code&gt; usando como delimitador la cadena &lt;code&gt;delimitador&lt;/code&gt;.
Si no se especifica el delimitador utiliza por defecto el espacio en blanco.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- TODO: Incluir más funciones de cadenas como replace --&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; len(&#39;Python&#39;)
6
&amp;gt;&amp;gt;&amp;gt; min(&#39;Python&#39;)
&#39;P&#39;
&amp;gt;&amp;gt;&amp;gt; max(&#39;Python&#39;)
&#39;y&#39;
&amp;gt;&amp;gt;&amp;gt; &#39;Python&#39;.upper()
&#39;PYTHON&#39;
&amp;gt;&amp;gt;&amp;gt; &#39;A,B,C&#39;.split(&#39;,&#39;)
[&#39;A&#39;, &#39;B&#39;, &#39;C&#39;]
&amp;gt;&amp;gt;&amp;gt; &#39;I love Python&#39;.split()
[&#39;I&#39;, &#39;love&#39;, &#39;Python&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;cadenas-formateadas-format&#34;&gt;Cadenas formateadas (&lt;code&gt;format()&lt;/code&gt;)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;c.format(valores)&lt;/code&gt;: Devuelve la cadena &lt;code&gt;c&lt;/code&gt; tras sustituir los valores de la secuencia &lt;code&gt;valores&lt;/code&gt; en los marcadores de posición de &lt;code&gt;c&lt;/code&gt;. Los marcadores de posición se indican mediante llaves &lt;code&gt;{}&lt;/code&gt; en la cadena &lt;code&gt;c&lt;/code&gt;, y el reemplazo de los valores se puede realizar por posición, indicando en número de orden del valor dentro de las llaves, o por nombre, indicando el nombre del valor, siempre y cuando los valores se pasen con el formato &lt;code&gt;nombre = valor&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;Un {} vale {} {}&#39;.format(&#39;€&#39;, 1.12, &#39;$&#39;)
&#39;Un € vale 1.12 $&#39;
&amp;gt;&amp;gt;&amp;gt; &#39;Un {2} vale {1} {0}&#39;.format(&#39;€&#39;, 1.12, &#39;$&#39;)
&#39;Un $ vale 1.12 €&#39;
&amp;gt;&amp;gt;&amp;gt; &#39;Un {moneda1} vale {cambio} {moneda2}&#39;.format(moneda1 = &#39;€&#39;, cambio = 1.12, moneda2 = &#39;$&#39;)
&#39;Un € vale 1.12 $&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Los marcadores de posición, a parte de indicar la posición de los valores de reemplazo, pueden indicar también el formato de estos. Para ello se utiliza la siguiente sintaxis:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{:n}&lt;/code&gt; : Alinea el valor a la izquierda rellenando con espacios por la derecha hasta los &lt;code&gt;n&lt;/code&gt; caracteres.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{:&amp;gt;n}&lt;/code&gt; : Alinea el valor a la derecha rellenando con espacios por la izquierda hasta los &lt;code&gt;n&lt;/code&gt; caracteres.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{:^n}&lt;/code&gt; : Alinea el valor en el centro rellenando con espacios por la izquierda y por la derecha hasta los &lt;code&gt;n&lt;/code&gt; caracteres.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{:nd}&lt;/code&gt; : Formatea el valor como un número entero con &lt;code&gt;n&lt;/code&gt; caracteres rellenando con espacios blancos por la izquierda.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;{:n.mf}&lt;/code&gt; : Formatea el valor como un número real con un tamaño de &lt;code&gt;n&lt;/code&gt; caracteres (incluído el separador de decimales) y &lt;code&gt;m&lt;/code&gt; cifras decimales, rellenando con espacios blancos por la izquierda.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &#39;Hoy es {:^10}, mañana {:10} y pasado {:&amp;gt;10}&#39;.format(&#39;lunes&#39;, &#39;martes&#39;, &#39;miércoles&#39;)
&#39;Hoy es   lunes   , mañana martes     y pasado  miércoles&#39;
&amp;gt;&amp;gt;&amp;gt; &#39;Cantidad {:5d}&#39;.format(12)&#39;
&#39;Cantidad    12&#39;
&amp;gt;&amp;gt;&amp;gt; &#39;Pi vale {:8.4f}&#39;.format(3.141592)
&#39;Pi vale   3.1416&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;datos-lógicos-o-booleanos-clase-bool&#34;&gt;Datos lógicos o booleanos (clase &lt;code&gt;bool&lt;/code&gt;)&lt;/h2&gt;
&lt;p&gt;Contiene únicamente dos elementos &lt;code&gt;True&lt;/code&gt; y &lt;code&gt;False&lt;/code&gt; que representan los valores lógicos verdadero y falso respectivamente.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;False&lt;/code&gt; tiene asociado el valor 0 y &lt;code&gt;True&lt;/code&gt; tiene asociado el valor 1.&lt;/p&gt;
&lt;h3 id=&#34;operaciones-con-valores-lógicos&#34;&gt;Operaciones con valores lógicos&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Operadores lógicos:  &lt;code&gt;==&lt;/code&gt; (igual que), &lt;code&gt;&amp;gt;&lt;/code&gt; (mayor), &lt;code&gt;&amp;lt;&lt;/code&gt; (menor), &lt;code&gt;&amp;gt;=&lt;/code&gt; (mayor o igual que), &lt;code&gt;&amp;lt;=&lt;/code&gt; (menor o igual que), &lt;code&gt;!=&lt;/code&gt; (distinto de).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;not b&lt;/code&gt; (negación) : Devuelve &lt;code&gt;True&lt;/code&gt; si el dato booleano &lt;code&gt;b&lt;/code&gt; es &lt;code&gt;False&lt;/code&gt; , y &lt;code&gt;False&lt;/code&gt; en caso contrario.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b1 and b2&lt;/code&gt; : Devuelve &lt;code&gt;True&lt;/code&gt; si los datos booleanos &lt;code&gt;b1&lt;/code&gt; y &lt;code&gt;b2&lt;/code&gt; son &lt;code&gt;True&lt;/code&gt;, y &lt;code&gt;False&lt;/code&gt; en caso contrario.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b1 or b2&lt;/code&gt; : Devuelve &lt;code&gt;True&lt;/code&gt; si alguno de los datos booleanos &lt;code&gt;b1&lt;/code&gt; o &lt;code&gt;b2&lt;/code&gt; son &lt;code&gt;True&lt;/code&gt;, y &lt;code&gt;False&lt;/code&gt; en caso contrario.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tabla-de-verdad&#34;&gt;Tabla de verdad&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;code&gt;x&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;code&gt;y&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;code&gt;not x&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;code&gt;x and y&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;code&gt;x or y&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; not True
False
&amp;gt;&amp;gt;&amp;gt; False or True
True
&amp;gt;&amp;gt;&amp;gt; True and False
False
&amp;gt;&amp;gt;&amp;gt; True and True
True
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;conversión-de-datos-primitivos-simples&#34;&gt;Conversión de datos primitivos simples&lt;/h2&gt;
&lt;p&gt;Las siguientes funciones convierten un dato de un tipo en otro, siempre y cuando la conversión sea posible.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int()&lt;/code&gt; convierte a entero.&lt;br&gt;
&lt;strong&gt;Ejemplo&lt;/strong&gt;. &lt;code&gt;int(&#39;12&#39;)&lt;/code&gt; &lt;i class=&#34;fa fa-arrow-right&#34;&gt;&lt;/i&gt; &lt;code&gt;12&lt;/code&gt;&lt;br&gt;
&lt;code&gt;int(True)&lt;/code&gt; &lt;i class=&#34;fa fa-arrow-right&#34;&gt;&lt;/i&gt; &lt;code&gt;1&lt;/code&gt;&lt;br&gt;
&lt;code&gt;int(&#39;c&#39;)&lt;/code&gt; &lt;i class=&#34;fa fa-arrow-right&#34;&gt;&lt;/i&gt; Error&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float()&lt;/code&gt; convierte a real.&lt;br&gt;
&lt;strong&gt;Ejemplo&lt;/strong&gt;. &lt;code&gt;float(&#39;3.14&#39;)&lt;/code&gt; &lt;i class=&#34;fa fa-arrow-right&#34;&gt;&lt;/i&gt; &lt;code&gt;3.14&lt;/code&gt;&lt;br&gt;
&lt;code&gt;float(True)&lt;/code&gt; &lt;i class=&#34;fa fa-arrow-right&#34;&gt;&lt;/i&gt; &lt;code&gt;1.0&lt;/code&gt;&lt;br&gt;
&lt;code&gt;float(&#39;III&#39;)&lt;/code&gt; &lt;i class=&#34;fa fa-arrow-right&#34;&gt;&lt;/i&gt; Error&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str()&lt;/code&gt; convierte a cadena.&lt;br&gt;
&lt;strong&gt;Ejemplo&lt;/strong&gt;. &lt;code&gt;str(3.14)&lt;/code&gt; &lt;i class=&#34;fa fa-arrow-right&#34;&gt;&lt;/i&gt; &lt;code&gt;&#39;3.14&#39;&lt;/code&gt;&lt;br&gt;
&lt;code&gt;str(True)&lt;/code&gt; &lt;i class=&#34;fa fa-arrow-right&#34;&gt;&lt;/i&gt; &lt;code&gt;&#39;True&#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool()&lt;/code&gt; convierte a lógico.&lt;br&gt;
&lt;strong&gt;Ejemplo&lt;/strong&gt;. &lt;code&gt;bool(&#39;0&#39;)&lt;/code&gt; &lt;i class=&#34;fa fa-arrow-right&#34;&gt;&lt;/i&gt; &lt;code&gt;False&lt;/code&gt;&lt;br&gt;
&lt;code&gt;bool(&#39;3.14&#39;)&lt;/code&gt; &lt;i class=&#34;fa fa-arrow-right&#34;&gt;&lt;/i&gt; &lt;code&gt;True&lt;/code&gt;&lt;br&gt;
&lt;code&gt;bool(&#39;&#39;)&lt;/code&gt; &lt;i class=&#34;fa fa-arrow-right&#34;&gt;&lt;/i&gt; &lt;code&gt;False&lt;/code&gt;&lt;br&gt;
&lt;code&gt;bool(&#39;Hola&#39;)&lt;/code&gt; &lt;i class=&#34;fa fa-arrow-right&#34;&gt;&lt;/i&gt; &lt;code&gt;True&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;variables&#34;&gt;Variables&lt;/h2&gt;
&lt;p&gt;Una variable es un identificador ligado a algún valor.&lt;/p&gt;
&lt;p&gt;Reglas para nombrarlas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Comienzan siempre por una letra, seguida de otras letras o números.&lt;/li&gt;
&lt;li&gt;No se pueden utilizarse palabras reservadas del lenguaje.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A diferencia de otros lenguajes no tienen asociado un tipo y no es necesario declararlas antes de usarlas (tipado dinámico).&lt;/p&gt;
&lt;p&gt;Para asignar un valor a una variable se utiliza el operador &lt;code&gt;=&lt;/code&gt; y para borrar una variable se utiliza la instrucción &lt;code&gt;del&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;lenguaje = &#39;Python&#39;
x = 3.14
y = 3 + 2
# Asignación múltiple
a1, a2 = 1, 2
# Intercambio de valores
a, b = b, a
# Incremento (equivale a x = x + 2)
x += 2
# Decremento (equivale a x = x - 1)
x -= 1
# Valor no definido
x = None
del x
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Ejercicios de Bucles</title>
      <link>/docencia/python/ejercicios/bucles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/ejercicios/bucles/</guid>
      <description>&lt;h2 id=&#34;ejercicio-1&#34;&gt;Ejercicio 1&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pida al usuario una palabra y la muestre por pantalla 10 veces.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/bucles/ejercicio1.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-2&#34;&gt;Ejercicio 2&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pregunte al usuario su edad y muestre por pantalla todos los años que ha cumplido (desde 1 hasta su edad).&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/bucles/ejercicio2.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-3&#34;&gt;Ejercicio 3&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pida al usuario un número entero positivo y muestre por pantalla todos los números impares desde 1 hasta ese número separados por comas.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/bucles/ejercicio3.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-4&#34;&gt;Ejercicio 4&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pida al usuario un número entero positivo y muestre por pantalla la cuenta atrás desde ese número hasta cero separados por comas.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/bucles/ejercicio4.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-5&#34;&gt;Ejercicio 5&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pregunte al usuario una cantidad a invertir, el interés anual y el número de años, y muestre por pantalla el capital obtenido en la inversión cada año que dura la inversión.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/bucles/ejercicio5.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-6&#34;&gt;Ejercicio 6&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pida al usuario un número entero y muestre por pantalla un triángulo rectángulo como el de más abajo, de altura el número introducido.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;*
**
***
****
*****
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/bucles/ejercicio6.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-7&#34;&gt;Ejercicio 7&lt;/h2&gt;
&lt;p&gt;Escribir un programa que muestre por pantalla la tabla de multiplicar del 1 al 10.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/bucles/ejercicio7.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-8&#34;&gt;Ejercicio 8&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pida al usuario un número entero y muestre por pantalla un triángulo rectángulo como el de más abajo.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;1
3 1
5 3 1
7 5 3 1
9 7 5 3 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/bucles/ejercicio8.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-9&#34;&gt;Ejercicio 9&lt;/h2&gt;
&lt;p&gt;Escribir un programa que almacene la cadena de caracteres &lt;code&gt;contraseña&lt;/code&gt; en una variable, pregunte al usuario por la contraseña hasta que introduzca la contraseña correcta.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/bucles/ejercicio9.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-10&#34;&gt;Ejercicio 10&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pida al usuario un número entero y muestre por pantalla si es un número primo o no.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/bucles/ejercicio10.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-11&#34;&gt;Ejercicio 11&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pida al usuario una palabra y luego muestre por pantalla una a una las letras de la palabra introducida empezando por la última.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/bucles/ejercicio11.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-12&#34;&gt;Ejercicio 12&lt;/h2&gt;
&lt;p&gt;Escribir un programa en el que se pregunte al usuario por una frase y una letra, y muestre por pantalla el número de veces que aparece la letra en la frase.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/bucles/ejercicio12.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-13&#34;&gt;Ejercicio 13&lt;/h2&gt;
&lt;p&gt;Escribir un programa que muestre el eco de todo lo que el usuario introduzca hasta que el usuario escriba “salir” que terminará.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/bucles/ejercicio13.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Entrada y Salida por Terminal</title>
      <link>/docencia/python/manual/entrada-salida/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/manual/entrada-salida/</guid>
      <description>&lt;h2 id=&#34;entrada-por-terminal-input&#34;&gt;Entrada por terminal (&lt;code&gt;input()&lt;/code&gt;)&lt;/h2&gt;
&lt;p&gt;Para asignar a una variable un valor introducido por el usuario en la consola se utiliza la instrucción&lt;/p&gt;
&lt;p&gt;&lt;code&gt;input(mensaje)&lt;/code&gt; : Muestra la cadena &lt;code&gt;mensaje&lt;/code&gt; por la terminal y devuelve una cadena con la entrada del usuario.&lt;/p&gt;
&lt;p&gt;&lt;i class=&#34;fa fa-exclamation-triangle&#34; style=&#34;color:red;&#34;&gt;&lt;/i&gt; &lt;em&gt;El valor devuelto siempre es una cadena, incluso si el usuario introduce un dato numérico.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; language = input(&#39;¿Cuál es tu lenguaje favorito? &#39;)
¿Cuál es tu lenguaje favorito? Python
&amp;gt;&amp;gt;&amp;gt; language
&#39;Python&#39;
&amp;gt;&amp;gt;&amp;gt; age = input(&#39;¿Cuál es tu edad? &#39;)
¿Cuál es tu edad? 20
&amp;gt;&amp;gt;&amp;gt; age
&#39;20&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;salida-por-terminal-print&#34;&gt;Salida por terminal (&lt;code&gt;print()&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;Para mostrar un dato por la terminal se utiliza la instrucción&lt;/p&gt;
&lt;p&gt;&lt;code&gt;print(dato1, ..., sep=&#39; &#39;, end=&#39;\n&#39;, file=sys.stdout&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;donde&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dato1, ...&lt;/code&gt; son los datos a imprimir y pueden indicarse tantos como se quieran separados por comas.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sep&lt;/code&gt; establece el separador entre los datos, que por defecto es un espacio en blanco &lt;code&gt;&#39; &#39;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;end&lt;/code&gt; indica la cadena final de la impresión, que por defecto es un cambio de línea &lt;code&gt;\n&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;file&lt;/code&gt; indica la dirección del flujo de salida, que por defecto es la salida estándar &lt;code&gt;sys.stdout&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(&#39;Hola&#39;)
Hola
&amp;gt;&amp;gt;&amp;gt; name = &#39;Alf&#39;
&amp;gt;&amp;gt;&amp;gt; print(&#39;Hola&#39;, name)
Hola Alf
&amp;gt;&amp;gt;&amp;gt; print(&#39;El valor de pi es&#39;, 3.1415)
El valor de pi es 3.1415
&amp;gt;&amp;gt;&amp;gt; print(&#39;Hola&#39;, name, sep=&#39;&#39;)
HolaAlf
&amp;gt;&amp;gt;&amp;gt; print(&#39;Hola&#39;, name, end=&#39;!\n&#39;)
Hola Alf!
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Condicionales</title>
      <link>/docencia/python/manual/condicionales/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/manual/condicionales/</guid>
      <description>&lt;h2 id=&#34;condicionales-if&#34;&gt;Condicionales (&lt;code&gt;if&lt;/code&gt;)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;if&lt;/code&gt; &lt;em&gt;&lt;code&gt;condición1&lt;/code&gt;&lt;/em&gt;&lt;code&gt;:&lt;/code&gt;&lt;br&gt;
    &lt;em&gt;&lt;code&gt;bloque código&lt;/code&gt;&lt;/em&gt;&lt;br&gt;
&lt;code&gt;elif&lt;/code&gt; &lt;em&gt;&lt;code&gt;condición2&lt;/code&gt;&lt;/em&gt;&lt;code&gt;:&lt;/code&gt;&lt;br&gt;
    &lt;em&gt;&lt;code&gt;bloque código&lt;/code&gt;&lt;/em&gt;&lt;br&gt;
&amp;hellip;&lt;br&gt;
&lt;code&gt;else :&lt;/code&gt;&lt;br&gt;
    &lt;em&gt;&lt;code&gt;bloque código&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Evalúa la expresión lógica &lt;code&gt;condición1&lt;/code&gt; y ejecuta el primer bloque de código si es &lt;code&gt;True&lt;/code&gt;; si no, evalúa la siguientes condiciones hasta llegar a la primera que es &lt;code&gt;True&lt;/code&gt; y ejecuta el bloque de código asociado. Si ninguna condición es &lt;code&gt;True&lt;/code&gt; ejecuta el bloque de código después de &lt;code&gt;else:&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Pueden aparecer varios bloques &lt;code&gt;elif&lt;/code&gt; pero solo uno &lt;code&gt;else&lt;/code&gt; al final.&lt;/p&gt;
&lt;p&gt;&lt;i class=&#34;fa fa-exclamation-triangle&#34; style=&#34;color:red;&#34;&gt;&lt;/i&gt; &lt;em&gt;Los bloques de código deben estar indentados por 4 espacios.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;La instrucción condicional permite evaluar el estado del programa y tomar decisiones sobre qué código ejecutar en función del mismo.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; edad = 14
&amp;gt;&amp;gt;&amp;gt; if edad &amp;lt;= 18 : 
...     print(&#39;Menor&#39;)
... elif edad &amp;gt; 65:
...     print(&#39;Jubilado&#39;)
... else:
...     print(&#39;Activo&#39;)
...
Menor
&amp;gt;&amp;gt;&amp;gt; age = 20
&amp;gt;&amp;gt;&amp;gt; if edad &amp;lt;= 18 : 
...     print(&#39;Menor&#39;)
... elif edad &amp;gt; 65:
...     print(&#39;Jubilado&#39;)
... else:
...     print(&#39;Activo&#39;)
...
Activo
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Ejercicios de Listas y Tuplas</title>
      <link>/docencia/python/ejercicios/listas-tuplas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/ejercicios/listas-tuplas/</guid>
      <description>&lt;h2 id=&#34;ejercicio-1&#34;&gt;Ejercicio 1&lt;/h2&gt;
&lt;p&gt;Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matemáticas, Física, Química, Historia y Lengua) en una lista y la muestre por pantalla.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/listas-tuplas/ejercicio1.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-2&#34;&gt;Ejercicio 2&lt;/h2&gt;
&lt;p&gt;Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matemáticas, Física, Química, Historia y Lengua) en una lista y la muestre por pantalla el mensaje &lt;code&gt;Yo estudio &amp;lt;asignatura&amp;gt;&lt;/code&gt;, donde &lt;code&gt;&amp;lt;asignatura&amp;gt;&lt;/code&gt; es cada una de las asignaturas de la lista.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/listas-tuplas/ejercicio2.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-3&#34;&gt;Ejercicio 3&lt;/h2&gt;
&lt;p&gt;Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matemáticas, Física, Química, Historia y Lengua) en una lista, pregunte al usuario la nota que ha sacado en cada asignatura, y después las muestre por pantalla con el mensaje &lt;code&gt;En &amp;lt;asignatura&amp;gt; has sacado &amp;lt;nota&amp;gt;&lt;/code&gt; donde &lt;code&gt;&amp;lt;asignatura&amp;gt;&lt;/code&gt; es cada una des las asignaturas de la lista y &lt;code&gt;&amp;lt;nota&amp;gt;&lt;/code&gt; cada una de las correspondientes notas introducidas por el usuario.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/listas-tuplas/ejercicio3.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-4&#34;&gt;Ejercicio 4&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pregunte al usuario los números ganadores de la lotería primitiva, los almacene en una lista y los muestre por pantalla ordenados de menor a mayor.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/listas-tuplas/ejercicio4.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-5&#34;&gt;Ejercicio 5&lt;/h2&gt;
&lt;p&gt;Escribir un programa que almacene en una lista los números del 1 al 10 y los muestre por pantalla en orden inverso separados por comas.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/listas-tuplas/ejercicio5.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-6&#34;&gt;Ejercicio 6&lt;/h2&gt;
&lt;p&gt;Escribir un programa que almacene las asignaturas de un curso (por ejemplo Matemáticas, Física, Química, Historia y Lengua) en una lista, pregunte al usuario la nota que ha sacado en cada asignatura y elimine de la lista las asignaturas aprobadas. Al final el programa debe mostrar por pantalla las asignaturas que el usuario tiene que repetir.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/listas-tuplas/ejercicio6.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-7&#34;&gt;Ejercicio 7&lt;/h2&gt;
&lt;p&gt;Escribir un programa que almacene el abecedario en una lista, elimine de la lista las letras que ocupen posiciones múltiplos de 3, y muestre por pantalla la lista resultante.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/listas-tuplas/ejercicio7.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-8&#34;&gt;Ejercicio 8&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pida al usuario una palabra y muestre por pantalla si es un palíndromo.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/listas-tuplas/ejercicio8.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-9&#34;&gt;Ejercicio 9&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pida al usuario una palabra y muestre por pantalla el número de veces que contiene cada vocal.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/listas-tuplas/ejercicio9.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-10&#34;&gt;Ejercicio 10&lt;/h2&gt;
&lt;p&gt;Escribir un programa que almacene en una lista los siguientes precios, 50, 75, 46, 22, 80, 65, 8, y muestre por pantalla el menor y el mayor de los precios.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/listas-tuplas/ejercicio10.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-11&#34;&gt;Ejercicio 11&lt;/h2&gt;
&lt;p&gt;Escribir un programa que almacene los vectores (1,2,3) y (-1,0,2) en dos listas y muestre por pantalla su producto escalar.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/listas-tuplas/ejercicio11.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-12&#34;&gt;Ejercicio 12&lt;/h2&gt;
&lt;p&gt;Escribir un programa que almacene las matrices
$$
A = \left(
\begin{array}{rrr}
1 &amp;amp; 2 &amp;amp; 3\newline
4 &amp;amp; 5 &amp;amp; 6
\end{array}
\right)
\quad  y
\quad
B = \left(
\begin{array}{rr}
-1 &amp;amp; 0\newline
0 &amp;amp; 1\newline
1 &amp;amp; 1
\end{array}
\right)
$$&lt;/p&gt;
&lt;p&gt;en una lista y muestre por pantalla su producto.&lt;br&gt;
Nota: Para representar matrices mediante listas usar listas anidadas, representando cada vector fila en una lista.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/listas-tuplas/ejercicio12.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-13&#34;&gt;Ejercicio 13&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pregunte por una muestra de números, separados por comas, los guarde en una lista y muestre por pantalla su media y desviación típica.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/listas-tuplas/ejercicio13.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Bucles</title>
      <link>/docencia/python/manual/bucles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/manual/bucles/</guid>
      <description>&lt;h2 id=&#34;bucles-condicionales-while&#34;&gt;Bucles condicionales (&lt;code&gt;while&lt;/code&gt;)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;while&lt;/code&gt; &lt;em&gt;&lt;code&gt;condición&lt;/code&gt;&lt;/em&gt;&lt;code&gt;:&lt;/code&gt;&lt;br&gt;
    &lt;em&gt;&lt;code&gt;bloque código&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Repite la ejecución del bloque de código mientras la expresión lógica &lt;code&gt;condición&lt;/code&gt; sea cierta.&lt;/p&gt;
&lt;p&gt;Se puede interrumpir en cualquier momento la ejecución del bloque de código con la instrucción &lt;code&gt;break&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;i class=&#34;fa fa-exclamation-triangle&#34; style=&#34;color:red;&#34;&gt;&lt;/i&gt; &lt;em&gt;El bloque de código debe estar indentado por 4 espacios.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; # Pregunta al usuario por un número hasta que introduce 0.
&amp;gt;&amp;gt;&amp;gt; num = None
&amp;gt;&amp;gt;&amp;gt; while num != 0:
...     num = int(input(&#39;Introduce un número: &#39;))
... 
Introduce un número: 2
Introduce un número: 1
Introduce un número: 0
&amp;gt;&amp;gt;&amp;gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternativa:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; # Pregunta al usuario por un número hasta que introduce 0.
&amp;gt;&amp;gt;&amp;gt; while True:
...     num = int(input(&#39;Introduce un número: &#39;))
...     if num == 0:
...         break
...
Introduce un número: 2
Introduce un número: 1
Introduce un número: 0
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;bucles-iterativos-for&#34;&gt;Bucles iterativos (&lt;code&gt;for&lt;/code&gt;)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;for&lt;/code&gt; &lt;em&gt;&lt;code&gt;i&lt;/code&gt;&lt;/em&gt; &lt;code&gt;in&lt;/code&gt; &lt;em&gt;&lt;code&gt;secuencia&lt;/code&gt;&lt;/em&gt;&lt;code&gt;:&lt;/code&gt;&lt;br&gt;
    &lt;em&gt;&lt;code&gt;bloque código&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Repite la ejecución del bloque de código para cada elemento de la secuencia &lt;code&gt;secuencia&lt;/code&gt;, asignado dicho elemento a &lt;code&gt;i&lt;/code&gt; en cada repetición.&lt;/p&gt;
&lt;p&gt;Se puede interrumpir en cualquier momento la ejecución del bloque de código con la instrucción &lt;code&gt;break&lt;/code&gt; o saltar la ejecución para un determinado elemento de la secuencia con la instrucción &lt;code&gt;continue&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;i class=&#34;fa fa-exclamation-triangle&#34; style=&#34;color:red;&#34;&gt;&lt;/i&gt; &lt;em&gt;El bloque de código debe estar indentado por 4 espacios.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Se utiliza fundamentalmente para recorrer colecciones de objetos como cadenas, listas, tuplas o diccionarios.&lt;/p&gt;
&lt;p&gt;A menudo se usan con la instrucción &lt;code&gt;range&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;range(fin)&lt;/code&gt; : Genera una secuencia de números enteros desde 0 hasta &lt;code&gt;fin-1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;range(inicio, fin, salto)&lt;/code&gt; : Genera una secuencia de números enteros desde &lt;code&gt;inicio&lt;/code&gt; hasta &lt;code&gt;fin-1&lt;/code&gt; con un incremento de &lt;code&gt;salto&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; palabra = &#39;Python&#39;
&amp;gt;&amp;gt;&amp;gt; for letra in palabra:
...     print(letra)
... 
P
y
t
h
o
n
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; for i in range(1, 10, 2):
...     print(i, end=&amp;quot;, &amp;quot;)
...
1, 3, 5, 7, 9, &amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Ejercicios de Diccionarios</title>
      <link>/docencia/python/ejercicios/diccionarios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/ejercicios/diccionarios/</guid>
      <description>&lt;h2 id=&#34;ejercicio-1&#34;&gt;Ejercicio 1&lt;/h2&gt;
&lt;p&gt;Escribir un programa que guarde en una variable el diccionario &lt;code&gt;{&#39;Euro&#39;:&#39;€&#39;, &#39;Dollar&#39;:&#39;$&#39;, &#39;Yen&#39;:&#39;¥&#39;}&lt;/code&gt;, pregunte al usuario por una divisa y muestre su símbolo o un mensaje de aviso si la divisa no está en el diccionario.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/diccionarios/ejercicio1.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-2&#34;&gt;Ejercicio 2&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pregunte al usuario su nombre, edad, dirección y teléfono y lo guarde en un diccionario. Después debe mostrar por pantalla el mensaje &lt;code&gt;&amp;lt;nombre&amp;gt; tiene &amp;lt;edad&amp;gt; años, vive en &amp;lt;dirección&amp;gt; y su número de teléfono es &amp;lt;teléfono&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/diccionarios/ejercicio2.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-3&#34;&gt;Ejercicio 3&lt;/h2&gt;
&lt;p&gt;Escribir un programa que guarde en un diccionario los precios de las frutas de la tabla, pregunte al usuario por una fruta, un número de kilos y muestre por pantalla el precio de ese número de kilos de fruta. Si la fruta no está en el diccionario debe mostrar un mensaje informando de ello.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Fruta&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Precio&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Plátano&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1.35&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Manzana&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0.80&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Pera&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0.85&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Naranja&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;0.70&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/diccionarios/ejercicio3.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-4&#34;&gt;Ejercicio 4&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pregunte una fecha en formato &lt;code&gt;dd/mm/aaaa&lt;/code&gt; y muestre por pantalla la misma fecha en formato &lt;code&gt;dd de &amp;lt;mes&amp;gt; de aaaa&lt;/code&gt; donde &lt;code&gt;&amp;lt;mes&amp;gt;&lt;/code&gt; es el nombre del mes.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/diccionarios/ejercicio4.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-5&#34;&gt;Ejercicio 5&lt;/h2&gt;
&lt;p&gt;Escribir un programa que almacene el diccionario con los créditos de las asignaturas de un curso &lt;code&gt;{&#39;Matemáticas&#39;: 6, &#39;Física&#39;: 4, &#39;Química&#39;: 5}&lt;/code&gt; y después muestre por pantalla los créditos de cada asignatura en el formato &lt;code&gt;&amp;lt;asignatura&amp;gt; tiene &amp;lt;créditos&amp;gt; créditos&lt;/code&gt;, donde &lt;code&gt;&amp;lt;asignatura&amp;gt;&lt;/code&gt; es cada una de las asignaturas del curso, y &lt;code&gt;&amp;lt;créditos&amp;gt;&lt;/code&gt; son sus créditos. Al final debe mostrar también el número total de créditos del curso.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/diccionarios/ejercicio5.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-6&#34;&gt;Ejercicio 6&lt;/h2&gt;
&lt;p&gt;Escribir un programa que cree un diccionario vacío y lo vaya llenado con información sobre una persona (por ejemplo nombre, edad, sexo, teléfono, correo electrónico, etc.) que se le pida al usuario. Cada vez que se añada un nuevo dato debe imprimirse el contenido del diccionario.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/diccionarios/ejercicio6.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-7&#34;&gt;Ejercicio 7&lt;/h2&gt;
&lt;p&gt;Escribir un programa que cree un diccionario simulando una cesta de la compra. El programa debe preguntar el artículo y su precio y añadir el par al diccionario, hasta que el usuario decida terminar. Después se debe mostrar por pantalla la lista de la compra y el coste total, con el siguiente formato&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Lista de la compra&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Artículo 1&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;Precio&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Artículo 2&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;Precio&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Artículo 3&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;Precio&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&amp;hellip;&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;&amp;hellip;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Total&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;Coste&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/diccionarios/ejercicio7.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-8&#34;&gt;Ejercicio 8&lt;/h2&gt;
&lt;p&gt;Escribir un programa que cree un diccionario de traducción español-inglés. El usuario introducirá las palabras en español e inglés separadas por dos puntos, y cada par &lt;code&gt;&amp;lt;palabra&amp;gt;:&amp;lt;traducción&amp;gt;&lt;/code&gt; separados por comas. El programa debe crear un diccionario con las palabras y sus traducciones. Después pedirá una frase en español y utilizará el diccionario para traducirla palabra a palabra. Si una palabra no está en el diccionario debe dejarla sin traducir.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/diccionarios/ejercicio8.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-9&#34;&gt;Ejercicio 9&lt;/h2&gt;
&lt;p&gt;Escribir un programa que gestione las facturas pendientes de cobro de una empresa. Las facturas se almacenarán en un diccionario donde la clave de cada factura será el número de factura y el valor el coste de la factura. El programa debe preguntar al usuario si quiere añadir una nueva factura, pagar una existente o terminar. Si desea añadir una nueva factura se preguntará por el número de factura y su coste y se añadirá al diccionario. Si se desea pagar una factura se preguntará por el número de factura y se eliminará del diccionario. Después de cada operación el programa debe mostrar por pantalla la cantidad cobrada hasta el momento y la cantidad pendiente de cobro.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/diccionarios/ejercicio9.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-10&#34;&gt;Ejercicio 10&lt;/h2&gt;
&lt;p&gt;Escribir un programa que permita gestionar la base de datos de clientes de una empresa. Los clientes se guardarán en un diccionario en el que la clave de cada cliente será su NIF, y el valor será otro diccionario con los datos del cliente (nombre, dirección, teléfono, correo, preferente), donde preferente tendrá el valor &lt;code&gt;True&lt;/code&gt; si se trata de un cliente preferente. El programa debe preguntar al usuario por una opción del siguiente menú: (1) Añadir cliente, (2) Eliminar cliente, (3) Mostrar cliente, (4) Listar todos los clientes, (5) Listar clientes preferentes, (6) Terminar. En función de la opción elegida el programa tendrá que hacer lo siguiente:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Preguntar los datos del cliente, crear un diccionario con los datos y añadirlo a la base de datos.&lt;/li&gt;
&lt;li&gt;Preguntar por el NIF del cliente y eliminar sus datos de la base de datos.&lt;/li&gt;
&lt;li&gt;Preguntar por el NIF del cliente y mostrar sus datos.&lt;/li&gt;
&lt;li&gt;Mostrar lista de todos los clientes de la base datos con su NIF y nombre.&lt;/li&gt;
&lt;li&gt;Mostrar la lista de clientes preferentes de la base de datos con su NIF y nombre.&lt;/li&gt;
&lt;li&gt;Terminar el programa.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/diccionarios/ejercicio10.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-11&#34;&gt;Ejercicio 11&lt;/h2&gt;
&lt;p&gt;El directorio de los clientes de una empresa está organizado en una cadena de texto como la de más abajo, donde cada línea contiene la información del nombre, email, teléfono, nif, y el descuento que se le aplica. Las líneas se separan con el carácter de cambio de línea &lt;code&gt;\n&lt;/code&gt; y la primera línea contiene los nombres de los campos con la información contenida en el directorio.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;quot;nif;nombre;email;teléfono;descuento\n01234567L;Luis González;luisgonzalez@mail.com;656343576;12.5\n71476342J;Macarena Ramírez;macarena@mail.com;692839321;8\n63823376M;Juan José Martínez;juanjo@mail.com;664888233;5.2\n98376547F;Carmen Sánchez;carmen@mail.com;667677855;15.7&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Escribir un programa que genere un diccionario con la información del directorio, donde cada elemento corresponda a un cliente y tenga por clave su nif y por valor otro diccionario con el resto de la información del cliente. Los diccionarios con la información de cada cliente tendrán como claves los nombres de los campos y como valores la información de cada cliente correspondientes a los campos. Es decir, un diccionario como el siguiente&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;{&#39;01234567L&#39;: {&#39;nombre&#39;: &#39;Luis González&#39;, &#39;email&#39;: &#39;luisgonzalez@mail.com&#39;, &#39;teléfono&#39;: &#39;656343576&#39;, &#39;descuento&#39;: 12.5}, &#39;71476342J&#39;: {&#39;nombre&#39;: &#39;Macarena Ramírez&#39;, &#39;email&#39;: &#39;macarena@mail.com&#39;, &#39;teléfono&#39;: &#39;692839321&#39;, &#39;descuento&#39;: 8.0}, &#39;63823376M&#39;: {&#39;nombre&#39;: &#39;Juan José Martínez&#39;, &#39;email&#39;: &#39;juanjo@mail.com&#39;, &#39;teléfono&#39;: &#39;664888233&#39;, &#39;descuento&#39;: 5.2}, &#39;98376547F&#39;: {&#39;nombre&#39;: &#39;Carmen Sánchez&#39;, &#39;email&#39;: &#39;carmen@mail.com&#39;, &#39;teléfono&#39;: &#39;667677855&#39;, &#39;descuento&#39;: 15.7}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/diccionarios/ejercicio11.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ejercicios de Funciones</title>
      <link>/docencia/python/ejercicios/funciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/ejercicios/funciones/</guid>
      <description>&lt;h2 id=&#34;ejercicio-1&#34;&gt;Ejercicio 1&lt;/h2&gt;
&lt;p&gt;Escribir una función que muestre por pantalla el saludo &lt;code&gt;¡Hola amiga!&lt;/code&gt; cada vez que se la invoque.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/funciones/ejercicio1.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-2&#34;&gt;Ejercicio 2&lt;/h2&gt;
&lt;p&gt;Escribir una función a la que se le pase una cadena &lt;code&gt;&amp;lt;nombre&amp;gt;&lt;/code&gt; y muestre por pantalla el saludo &lt;code&gt;¡hola &amp;lt;nombre&amp;gt;!&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/funciones/ejercicio2.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-3&#34;&gt;Ejercicio 3&lt;/h2&gt;
&lt;p&gt;Escribir una función que reciba un número entero positivo y devuelva su factorial.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/funciones/ejercicio3.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-4&#34;&gt;Ejercicio 4&lt;/h2&gt;
&lt;p&gt;Escribir una función que calcule el total de una factura tras aplicarle el IVA. La función debe recibir la cantidad sin IVA y el porcentaje de IVA a aplicar, y devolver el total de la factura. Si se invoca la función sin pasarle el porcentaje de IVA, deberá aplicar un 21%.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/funciones/ejercicio4.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-5&#34;&gt;Ejercicio 5&lt;/h2&gt;
&lt;p&gt;Escribir una función que calcule el área de un círculo y otra que calcule el volumen de un cilindro usando la primera función.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/funciones/ejercicio5.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-6&#34;&gt;Ejercicio 6&lt;/h2&gt;
&lt;p&gt;Escribir una función que reciba una muestra de números en una lista y devuelva su media.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/funciones/ejercicio6.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-7&#34;&gt;Ejercicio 7&lt;/h2&gt;
&lt;p&gt;Escribir una función que reciba una muestra de números en una lista y devuelva otra lista con sus cuadrados.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/funciones/ejercicio7.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-8&#34;&gt;Ejercicio 8&lt;/h2&gt;
&lt;p&gt;Escribir una función que reciba una muestra de números en una lista y devuelva un diccionario con su media, varianza y desviación típica.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/funciones/ejercicio8.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-9&#34;&gt;Ejercicio 9&lt;/h2&gt;
&lt;p&gt;Escribir una función que calcule el máximo común divisor de dos números y otra que calcule el mínimo común múltiplo.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/funciones/ejercicio9.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-10&#34;&gt;Ejercicio 10&lt;/h2&gt;
&lt;p&gt;Escribir una función que convierta un número decimal en binario y otra que convierta un número binario en decimal.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/funciones/ejercicio10.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-11&#34;&gt;Ejercicio 11&lt;/h2&gt;
&lt;p&gt;Escribir un programa que reciba una cadena de caracteres y devuelva un diccionario con cada palabra que contiene y su frecuencia.
Escribir otra función que reciba el diccionario generado con la función anterior y devuelva una tupla con la palabra más repetida y su frecuencia.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/funciones/ejercicio11.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Listas</title>
      <link>/docencia/python/manual/listas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/manual/listas/</guid>
      <description>&lt;h2 id=&#34;listas&#34;&gt;Listas&lt;/h2&gt;
&lt;p&gt;Una &lt;strong&gt;lista&lt;/strong&gt; es una secuencias ordenadas de objetos de distintos tipos.&lt;/p&gt;
&lt;p&gt;Se construyen poniendo los elementos entre corchetes &lt;code&gt;[&lt;/code&gt;  &lt;code&gt;]&lt;/code&gt; separados por comas.&lt;/p&gt;
&lt;p&gt;Se caracterizan por:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tienen orden.&lt;/li&gt;
&lt;li&gt;Pueden contener elementos de distintos tipos.&lt;/li&gt;
&lt;li&gt;Son mutables, es decir, pueden alterarse durante la ejecución de un programa.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Lista vacía
&amp;gt;&amp;gt;&amp;gt; type([])
&amp;lt;class &#39;list&#39;&amp;gt;
# Lista con elementos de distintos tipos
&amp;gt;&amp;gt;&amp;gt; [1, &amp;quot;dos&amp;quot;, True]
# Listas anidadas
&amp;gt;&amp;gt;&amp;gt; [1, [2, 3], 4]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;creación-de-listas-mediante-la-función-list&#34;&gt;Creación de listas mediante la función &lt;code&gt;list()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Otra forma de crear listas es mediante la función &lt;code&gt;list()&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list(c)&lt;/code&gt; : Crea una lista con los elementos de la secuencia o colección &lt;code&gt;c&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Se pueden indicar los elementos separados por comas, mediante una cadena, o mediante una colección de elementos iterable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; list()
[]
&amp;gt;&amp;gt;&amp;gt; list(1, 2, 3)
[1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; list(&amp;quot;Python&amp;quot;)
[&#39;P&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;, &#39;n&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;acceso-a-los-elementos-de-una-lista&#34;&gt;Acceso a los elementos de una lista&lt;/h3&gt;
&lt;p&gt;Se utilizan los mismos operadores de acceso que para cadenas de caracteres.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;l[i]&lt;/code&gt; : Devuelve el elemento de la lista &lt;code&gt;l&lt;/code&gt; con el índice &lt;code&gt;i&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;i class=&#34;fa fa-exclamation-triangle&#34; style=&#34;color:red;&#34;&gt;&lt;/i&gt; &lt;em&gt;El índice del primer elemento de la lista es 0.&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = [&#39;P&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;, &#39;n&#39;]
&amp;gt;&amp;gt;&amp;gt; a[0]
&#39;P&#39;
&amp;gt;&amp;gt;&amp;gt; a[5]
&#39;n&#39;
&amp;gt;&amp;gt;&amp;gt; a[6]
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
IndexError: list index out of range
&amp;gt;&amp;gt;&amp;gt; a[-1]
&#39;n&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;sublistas&#34;&gt;Sublistas&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;l[i:j:k]&lt;/code&gt; : Devuelve la sublista desde el elemento de &lt;code&gt;l&lt;/code&gt; con el índice &lt;code&gt;i&lt;/code&gt; hasta el elemento anterior al índice &lt;code&gt;j&lt;/code&gt;, tomando elementos cada &lt;code&gt;k&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = [&#39;P&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;, &#39;n&#39;]
&amp;gt;&amp;gt;&amp;gt; a[1:4]
[&#39;y&#39;, &#39;t&#39;, &#39;h&#39;]
&amp;gt;&amp;gt;&amp;gt; a[1:1]
[]
&amp;gt;&amp;gt;&amp;gt; a[:-3]
[&#39;y&#39;, &#39;t&#39;, &#39;h&#39;]
&amp;gt;&amp;gt;&amp;gt; a[:]
[&#39;P&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;, &#39;n&#39;]
&amp;gt;&amp;gt;&amp;gt; a[0:6:2]
[&#39;P&#39;, &#39;t&#39;, &#39;o&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;operaciones-que-no-modifican-una-lista&#34;&gt;Operaciones que no modifican una lista&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;len(l)&lt;/code&gt; : Devuelve el número de elementos de la lista &lt;code&gt;l&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min(l)&lt;/code&gt; : Devuelve el mínimo elemento de la lista &lt;code&gt;l&lt;/code&gt; siempre que los datos sean comparables.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max(l)&lt;/code&gt; : Devuelve el máximo elemento de la lista &lt;code&gt;l&lt;/code&gt; siempre que los datos sean comparables.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sum(l)&lt;/code&gt; : Devuelve la suma de los elementos de la lista &lt;code&gt;l&lt;/code&gt;, siempre que los datos se puedan sumar.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dato in l&lt;/code&gt; : Devuelve &lt;code&gt;True&lt;/code&gt; si el dato &lt;code&gt;dato&lt;/code&gt; pertenece a la lista &lt;code&gt;l&lt;/code&gt; y &lt;code&gt;False&lt;/code&gt; en caso contrario.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l.index(dato)&lt;/code&gt; : Devuelve la posición que ocupa en la lista &lt;code&gt;l&lt;/code&gt; el primer elemento con valor &lt;code&gt;dato&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l.count(dato)&lt;/code&gt; : Devuelve el número de veces que el valor &lt;code&gt;dato&lt;/code&gt; está contenido en la lista &lt;code&gt;l&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;all(l)&lt;/code&gt; : Devuelve &lt;code&gt;True&lt;/code&gt; si todos los elementos de la lista &lt;code&gt;l&lt;/code&gt; son &lt;code&gt;True&lt;/code&gt; y &lt;code&gt;False&lt;/code&gt; en caso contrario.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;any(l)&lt;/code&gt; : Devuelve &lt;code&gt;True&lt;/code&gt; si algún elemento de la lista &lt;code&gt;l&lt;/code&gt; es &lt;code&gt;True&lt;/code&gt; y &lt;code&gt;False&lt;/code&gt; en caso contrario.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = [1, 2, 2, 3]
&amp;gt;&amp;gt;&amp;gt; len(a)
4
&amp;gt;&amp;gt;&amp;gt; min(a)
1
&amp;gt;&amp;gt;&amp;gt; max(a)
3
&amp;gt;&amp;gt;&amp;gt; sum(a)
8
&amp;gt;&amp;gt;&amp;gt; 3 in a
True
&amp;gt;&amp;gt;&amp;gt; a.index(2)
1
&amp;gt;&amp;gt;&amp;gt; a.count(2)
2
&amp;gt;&amp;gt;&amp;gt; all(a)
True
&amp;gt;&amp;gt;&amp;gt; any([0, False, 3&amp;lt;2])
False
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;operaciones-que-modifican-una-lista&#34;&gt;Operaciones que modifican una lista&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;l1 + l2&lt;/code&gt; : Crea una nueva lista concatenan los elementos de la listas &lt;code&gt;l1&lt;/code&gt; y &lt;code&gt;l2&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l.append(dato)&lt;/code&gt; : Añade &lt;code&gt;dato&lt;/code&gt; al final de la lista &lt;code&gt;l&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l.extend(sequencia)&lt;/code&gt; : Añade los datos de &lt;code&gt;sequencia&lt;/code&gt; al final de la lista &lt;code&gt;l&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l.insert(índice, dato)&lt;/code&gt; : Inserta &lt;code&gt;dato&lt;/code&gt; en la posición &lt;code&gt;índice&lt;/code&gt; de la lista &lt;code&gt;l&lt;/code&gt; y desplaza los elementos una posición a partir de la posición &lt;code&gt;índice&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l.remove(dato)&lt;/code&gt; : Elimina el primer elemento con valor &lt;code&gt;dato&lt;/code&gt; en la lista &lt;code&gt;l&lt;/code&gt; y desplaza los que están por detrás de él una posición hacia delante.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l.pop([índice])&lt;/code&gt; : Devuelve el dato en la posición &lt;code&gt;índice&lt;/code&gt; y lo elimina de la lista &lt;code&gt;l&lt;/code&gt;, desplazando los elementos por detrás de él una posición hacia delante.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l.sort()&lt;/code&gt; : Ordena los elementos de la lista &lt;code&gt;l&lt;/code&gt; de acuerdo al orden predefinido, siempre que los elementos sean comparables.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l.reverse()&lt;/code&gt; : invierte el orden de los elementos de la lista &lt;code&gt;l&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = [1, 3]
&amp;gt;&amp;gt;&amp;gt; b = [2 , 4, 6]
&amp;gt;&amp;gt;&amp;gt; a.append(5)
&amp;gt;&amp;gt;&amp;gt; a
[1, 3, 5]
&amp;gt;&amp;gt;&amp;gt; a.remove(3)
&amp;gt;&amp;gt;&amp;gt; a
[1, 5]
&amp;gt;&amp;gt;&amp;gt; a.insert(1, 3)
&amp;gt;&amp;gt;&amp;gt; a
[1, 3, 5]
&amp;gt;&amp;gt;&amp;gt; b.pop()
6
&amp;gt;&amp;gt;&amp;gt; c = a + b
&amp;gt;&amp;gt;&amp;gt; c
[1, 3, 5, 2, 4]
&amp;gt;&amp;gt;&amp;gt; c.sort()
&amp;gt;&amp;gt;&amp;gt; c
[1, 2, 3, 4, 5]
&amp;gt;&amp;gt;&amp;gt; c.reverse()
&amp;gt;&amp;gt;&amp;gt; c
[5, 4, 3, 2, 1]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;copia-de-listas&#34;&gt;Copia de listas&lt;/h3&gt;
&lt;p&gt;Existen dos formas de copiar listas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Copia por referencia&lt;/strong&gt; &lt;code&gt;l1 = l2&lt;/code&gt;: Asocia la la variable &lt;code&gt;l1&lt;/code&gt; la misma lista que tiene asociada la variable &lt;code&gt;l2&lt;/code&gt;, es decir, ambas variables apuntan a la misma dirección de memoria. Cualquier cambio que hagamos a través de &lt;code&gt;l1&lt;/code&gt; o &lt;code&gt;l2&lt;/code&gt; afectará a la misma lista.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Copia por valor&lt;/strong&gt; &lt;code&gt;l1 = list(l2)&lt;/code&gt;: Crea una copia de la lista asociada a &lt;code&gt;l2&lt;/code&gt; en una dirección de memoria diferente y se la asocia a &lt;code&gt;l1&lt;/code&gt;. Las variables apuntan a direcciones de memoria diferentes que contienen los mismos datos. Cualquier cambio que hagamos a través de &lt;code&gt;l1&lt;/code&gt; no afectará a la lista de &lt;code&gt;l2&lt;/code&gt; y viceversa.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; # copia por referencia
&amp;gt;&amp;gt;&amp;gt; b = a
&amp;gt;&amp;gt;&amp;gt; b
[1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; b.remove(2)
&amp;gt;&amp;gt;&amp;gt; b
[1, 3]
&amp;gt;&amp;gt;&amp;gt; a
[1, 3]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = [1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; # copia por referencia
&amp;gt;&amp;gt;&amp;gt; b = list(a)
&amp;gt;&amp;gt;&amp;gt; b
[1, 2, 3]
&amp;gt;&amp;gt;&amp;gt; b.remove(2)
&amp;gt;&amp;gt;&amp;gt; b
[1, 3]
&amp;gt;&amp;gt;&amp;gt; a
[1, 2, 3]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Ejercicios de Programación Funcional</title>
      <link>/docencia/python/ejercicios/programacion-funcional/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/ejercicios/programacion-funcional/</guid>
      <description>&lt;h2 id=&#34;ejercicio-1&#34;&gt;Ejercicio 1&lt;/h2&gt;
&lt;p&gt;Escribir una función que aplique un descuento a un precio y otra que aplique el IVA a un precio. Escribir una tercera función que reciba un diccionario con los precios y porcentajes de una cesta de la compra, y una de las funciones anteriores, y utilice la función pasada para aplicar los descuentos o el IVA a los productos de la cesta y devolver el precio final de la cesta.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/programacion-funcional/ejercicio1.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-2&#34;&gt;Ejercicio 2&lt;/h2&gt;
&lt;p&gt;Escribir una función que simule una calculadora científica que permita calcular el seno, coseno, tangente, exponencial y logaritmo neperiano. La función preguntará al usuario el valor y la función a aplicar, y mostrará por pantalla una tabla con los enteros de 1 al valor introducido y el resultado de aplicar la función a esos enteros.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/programacion-funcional/ejercicio2.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-3&#34;&gt;Ejercicio 3&lt;/h2&gt;
&lt;p&gt;Escribir una función que reciba otra función y una lista, y devuelva otra lista con el resultado de aplicar la función dada a cada uno de los elementos de la lista.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/programacion-funcional/ejercicio3.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-4&#34;&gt;Ejercicio 4&lt;/h2&gt;
&lt;p&gt;Escribir una función que reciba otra función booleana y una lista, y devuelva otra lista con los elementos de la lista que devuelvan &lt;code&gt;True&lt;/code&gt; al aplicarles la función booleana.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/programacion-funcional/ejercicio4.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-5&#34;&gt;Ejercicio 5&lt;/h2&gt;
&lt;p&gt;Escribir una función que reciba una frase y devuelva un diccionario con las palabras que contiene y su longitud.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/programacion-funcional/ejercicio5.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-6&#34;&gt;Ejercicio 6&lt;/h2&gt;
&lt;p&gt;Escribir una función reciba una lista de notas y devuelva la lista de calificaciones correspondientes a esas notas.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/programacion-funcional/ejercicio6.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-7&#34;&gt;Ejercicio 7&lt;/h2&gt;
&lt;p&gt;Escribir una función reciba un diccionario con las asignaturas y las notas de un alumno y devuelva otro diccionario con las asignaturas en mayúsculas y las calificaciones correspondientes a las notas.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/programacion-funcional/ejercicio7.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-8&#34;&gt;Ejercicio 8&lt;/h2&gt;
&lt;p&gt;Escribir una función reciba un diccionario con las asignaturas y las notas de un alumno y devuelva otro diccionario con las asignaturas en mayúsculas y las calificaciones correspondientes a las notas aprobadas.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/programacion-funcional/ejercicio8.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-9&#34;&gt;Ejercicio 9&lt;/h2&gt;
&lt;p&gt;Escribir una función que calcule el módulo de un vector.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/programacion-funcional/ejercicio9.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-10&#34;&gt;Ejercicio 10&lt;/h2&gt;
&lt;p&gt;Una inmobiliaria de una ciudad maneja una lista de inmuebles como la siguiente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[{&#39;año&#39;: 2000, &#39;metros&#39;: 100, &#39;habitaciones&#39;: 3, &#39;garaje&#39;: True, &#39;zona&#39;: &#39;A&#39;},
{&#39;año&#39;: 2012, &#39;metros&#39;: 60, &#39;habitaciones&#39;: 2, &#39;garaje&#39;: True, &#39;zona&#39;: &#39;B&#39;},
{&#39;año&#39;: 1980, &#39;metros&#39;: 120, &#39;habitaciones&#39;: 4, &#39;garaje&#39;: False, &#39;zona&#39;: &#39;A&#39;},
{&#39;año&#39;: 2005, &#39;metros&#39;: 75, &#39;habitaciones&#39;: 3, &#39;garaje&#39;: True, &#39;zona&#39;: &#39;B&#39;},
{&#39;año&#39;: 2015, &#39;metros&#39;: 90, &#39;habitaciones&#39;: 2, &#39;garaje&#39;: False, &#39;zona&#39;: &#39;A&#39;}]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Construir una función que permita hacer búsqueda de inmuebles en función de un presupuesto dado. La función recibirá como entrada la lista de inmuebles y un precio, y devolverá otra lista con los inmuebles cuyo precio sea menor o igual que el dado. Los inmuebles de la lista que se devuelva deben incorporar un nuevo par a cada diccionario con el precio del inmueble, donde el precio de un inmueble se calcula con las siguiente fórmula en función de la zona:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Zona A: precio = (metros * 1000 + habitaciones * 5000 + garaje * 15000) * (1-antiguedad/100)&lt;/li&gt;
&lt;li&gt;Zona B: precio = (metros * 1000 + habitaciones * 5000 + garaje * 15000) * (1-antiguedad/100) * 1.5&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/programacion-funcional/ejercicio10.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-11&#34;&gt;Ejercicio 11&lt;/h2&gt;
&lt;p&gt;Escribir una función que reciba una muestra de números y devuelva los valores atípicos, es decir, los valores cuya puntuación típica sea mayor que 3 o menor que -3.
Nota: La puntuación típica de un valor se obtiene restando la media y dividiendo por la desviación típica de la muestra.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/programacion-funcional/ejercicio11.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tuplas</title>
      <link>/docencia/python/manual/tuplas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/manual/tuplas/</guid>
      <description>&lt;h2 id=&#34;tuplas&#34;&gt;Tuplas&lt;/h2&gt;
&lt;p&gt;Una &lt;strong&gt;tupla&lt;/strong&gt; es una secuencias ordenadas de objetos de distintos tipos.&lt;/p&gt;
&lt;p&gt;Se construyen poniendo los elementos entre corchetes &lt;code&gt;(&lt;/code&gt;  &lt;code&gt;)&lt;/code&gt; separados por comas.&lt;/p&gt;
&lt;p&gt;Se caracterizan por:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tienen orden.&lt;/li&gt;
&lt;li&gt;Pueden contener elementos de distintos tipos.&lt;/li&gt;
&lt;li&gt;Son inmutables, es decir, no pueden alterarse durante la ejecución de un programa.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Se usan habitualmente para representar colecciones de datos una determinada estructura semántica, como por ejemplo un vector o una matriz.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Tupla vacía
type(())
&amp;lt;class &#39;tuple&#39;&amp;gt;
# Tupla con elementos de distintos tipos
(1, &amp;quot;dos&amp;quot;, True)
# Vector
(1, 2, 3)
# Matriz
((1, 2, 3), (4, 5, 6))
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;creación-de-tuplas-mediante-la-función-tuple&#34;&gt;Creación de tuplas mediante la función &lt;code&gt;tuple()&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Otra forma de crear tuplas es mediante la función &lt;code&gt;tuple()&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tuple(c)&lt;/code&gt; : Crea una tupla con los elementos de la secuencia o colección &lt;code&gt;c&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Se pueden indicar los elementos separados por comas, mediante una cadena, o mediante una colección de elementos iterable.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; tuple()
()
&amp;gt;&amp;gt;&amp;gt; tuple(1, 2, 3)
(1, 2, 3)
&amp;gt;&amp;gt;&amp;gt; tuple(&amp;quot;Python&amp;quot;)
(&#39;P&#39;, &#39;y&#39;, &#39;t&#39;, &#39;h&#39;, &#39;o&#39;, &#39;n&#39;)
&amp;gt;&amp;gt;&amp;gt; tuple([1, 2, 3])
(1, 2, 3)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;operaciones-con-tuplas&#34;&gt;Operaciones con tuplas&lt;/h3&gt;
&lt;p&gt;El acceso a los elementos de una tupla se realiza del mismo modo que en las listas.
También se pueden obtener subtuplas de la misma manera que las sublistas.&lt;/p&gt;
&lt;p&gt;Las operaciones de listas que no modifican la lista también son aplicables a las tuplas.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = (1, 2, 3)
&amp;gt;&amp;gt;&amp;gt; a[1]
2
&amp;gt;&amp;gt;&amp;gt; len(a)
3
&amp;gt;&amp;gt;&amp;gt; a.index(3)
2
&amp;gt;&amp;gt;&amp;gt; 0 in a
False
&amp;gt;&amp;gt;&amp;gt; b = ((1, 2, 3), (4, 5, 6))
&amp;gt;&amp;gt;&amp;gt; b[1]
(4, 5, 6)
&amp;gt;&amp;gt;&amp;gt; b[1][2]
6
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Diccionarios</title>
      <link>/docencia/python/manual/diccionarios/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/manual/diccionarios/</guid>
      <description>&lt;h2 id=&#34;diccionarios&#34;&gt;Diccionarios&lt;/h2&gt;
&lt;p&gt;Un diccionario es una colección de pares formados por una &lt;em&gt;clave&lt;/em&gt; y un &lt;em&gt;valor&lt;/em&gt; asociado a la clave.&lt;/p&gt;
&lt;p&gt;Se construyen poniendo los pares entre llaves &lt;code&gt;{ }&lt;/code&gt; separados por comas, y separando la clave del valor con dos puntos &lt;code&gt;:&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Se caracterizan por:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No tienen orden.&lt;/li&gt;
&lt;li&gt;Pueden contener elementos de distintos tipos.&lt;/li&gt;
&lt;li&gt;Son mutables, es decir, pueden alterarse durante la ejecución de un programa.&lt;/li&gt;
&lt;li&gt;Las claves son únicas, es decir, no pueden repetirse en un mismo diccionario, y pueden ser de cualquier tipo de datos inmutable.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Diccionario vacío
type({})
&amp;lt;class &#39;dict&#39;&amp;gt;
# Diccionario con elementos de distintos tipos
{&#39;nombre&#39;:&#39;Alfredo&#39;, &#39;despacho&#39;: 218, &#39;email&#39;:&#39;asalber@ceu.es&#39;}
# Diccionarios anidados
{&#39;nombre_completo&#39;:{&#39;nombre&#39;: &#39;Alfredo&#39;, &#39;Apellidos&#39;: &#39;Sánchez Alberca&#39;}}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;acceso-a-los-elementos-de-un-diccionario&#34;&gt;Acceso a los elementos de un diccionario&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;d[clave]&lt;/code&gt; devuelve el valor del diccionario &lt;code&gt;d&lt;/code&gt; asociado a la clave &lt;code&gt;clave&lt;/code&gt;. Si en el diccionario no existe esa clave devuelve un error.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.get(clave, valor)&lt;/code&gt; devuelve el valor del diccionario &lt;code&gt;d&lt;/code&gt; asociado a la clave &lt;code&gt;clave&lt;/code&gt;. Si en el diccionario no existe esa clave devuelve &lt;code&gt;valor&lt;/code&gt;, y si no se especifica un valor por defecto devuelve &lt;code&gt;None&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = {&#39;nombre&#39;:&#39;Alfredo&#39;, &#39;despacho&#39;: 218, &#39;email&#39;:&#39;asalber@ceu.es&#39;}
&amp;gt;&amp;gt;&amp;gt; a[&#39;nombre&#39;]
&#39;Alfredo&#39;
&amp;gt;&amp;gt;&amp;gt; a[&#39;despacho&#39;] = 210
&amp;gt;&amp;gt;&amp;gt; a
{&#39;nombre&#39;:&#39;Alfredo&#39;, &#39;despacho&#39;: 218, &#39;email&#39;:&#39;asalber@ceu.es&#39;}
&amp;gt;&amp;gt;&amp;gt; a.get(&#39;email&#39;)
&#39;asalber@ceu.es&#39;
&amp;gt;&amp;gt;&amp;gt; a.get(&#39;universidad&#39;, &#39;CEU&#39;)
&#39;CEU&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;operaciones-que-no-modifican-un-diccionario&#34;&gt;Operaciones que no modifican un diccionario&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;len(d)&lt;/code&gt; : Devuelve el número de elementos del diccionario &lt;code&gt;d&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;min(d)&lt;/code&gt; : Devuelve la mínima clave del diccionario &lt;code&gt;d&lt;/code&gt; siempre que las claves sean comparables.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max(d)&lt;/code&gt; : Devuelve la máxima clave del diccionario &lt;code&gt;d&lt;/code&gt; siempre que las claves sean comparables.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sum(d)&lt;/code&gt; : Devuelve la suma de las claves del diccionario &lt;code&gt;d&lt;/code&gt;, siempre que las claves se puedan sumar.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;clave in d&lt;/code&gt; : Devuelve &lt;code&gt;True&lt;/code&gt; si la clave &lt;code&gt;clave&lt;/code&gt; pertenece al diccionario &lt;code&gt;d&lt;/code&gt; y &lt;code&gt;False&lt;/code&gt; en caso contrario.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.keys()&lt;/code&gt; : Devuelve un iterador sobre las claves de un diccionario.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.values()&lt;/code&gt; : Devuelve un iterador sobre los valores de un diccionario.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.items()&lt;/code&gt; : Devuelve un iterador sobre los pares clave-valor de un diccionario.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = {&#39;nombre&#39;:&#39;Alfredo&#39;, &#39;despacho&#39;: 218, &#39;email&#39;:&#39;asalber@ceu.es&#39;}
&amp;gt;&amp;gt;&amp;gt; len(a)
3
&amp;gt;&amp;gt;&amp;gt; min(a)
&#39;despacho&#39;
&amp;gt;&amp;gt;&amp;gt; &#39;email&#39; in a
True
&amp;gt;&amp;gt;&amp;gt; a.keys()
dict_keys([&#39;nombre&#39;, &#39;despacho&#39;, &#39;email&#39;])
&amp;gt;&amp;gt;&amp;gt; a.values()
dict_values([&#39;Alfredo&#39;, 218, &#39;asalber@ceu.es&#39;])
&amp;gt;&amp;gt;&amp;gt; a.items()
dict_items([(&#39;nombre&#39;, &#39;Alfredo&#39;), (&#39;despacho&#39;, 218), (&#39;email&#39;, &#39;asalber@ceu.es&#39;)])
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;operaciones-que-modifican-un-diccionario&#34;&gt;Operaciones que modifican un diccionario&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;d[clave] = valor&lt;/code&gt; : Añade al diccionario &lt;code&gt;d&lt;/code&gt; el par formado por la clave &lt;code&gt;clave&lt;/code&gt; y el valor &lt;code&gt;valor&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.update(d2)&lt;/code&gt;. Añade los pares del diccionario &lt;code&gt;d2&lt;/code&gt; al diccionario &lt;code&gt;d&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.pop(clave, alternativo)&lt;/code&gt; : Devuelve del valor asociado a la clave &lt;code&gt;clave&lt;/code&gt; del diccionario &lt;code&gt;d&lt;/code&gt; y lo elimina del diccionario. Si la clave no está devuelve el valor &lt;code&gt;alternativo&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.popitem()&lt;/code&gt; : Devuelve la tupla formada por la clave y el valor del último par añadido al diccionario &lt;code&gt;d&lt;/code&gt; y lo elimina del diccionario.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;del d[clave]&lt;/code&gt; : Elimina del diccionario &lt;code&gt;d&lt;/code&gt; el par con la clave &lt;code&gt;clave&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.clear()&lt;/code&gt; : Elimina todos los pares del diccionario &lt;code&gt;d&lt;/code&gt; de manera que se queda vacío.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = {&#39;nombre&#39;:&#39;Alfredo&#39;, &#39;despacho&#39;: 218, &#39;email&#39;:&#39;asalber@ceu.es&#39;}
&amp;gt;&amp;gt;&amp;gt; a[&#39;universidad&#39;] = &#39;CEU&#39;
&amp;gt;&amp;gt;&amp;gt; a
{&#39;nombre&#39;: &#39;Alfredo&#39;, &#39;despacho&#39;: 218, &#39;email&#39;: &#39;asalber@ceu.es&#39;, &#39;universidad&#39;: &#39;CEU&#39;}
&amp;gt;&amp;gt;&amp;gt; a.pop(&#39;despacho&#39;)
218
&amp;gt;&amp;gt;&amp;gt; a
{&#39;nombre&#39;: &#39;Alfredo&#39;, &#39;email&#39;: &#39;asalber@ceu.es&#39;, &#39;universidad&#39;: &#39;CEU&#39;}
&amp;gt;&amp;gt;&amp;gt; a.popitem()
(&#39;universidad&#39;, &#39;CEU&#39;)
&amp;gt;&amp;gt;&amp;gt; a
{&#39;nombre&#39;: &#39;Alfredo&#39;, &#39;email&#39;: &#39;asalber@ceu.es&#39;}
&amp;gt;&amp;gt;&amp;gt; del a[&#39;email&#39;]
&amp;gt;&amp;gt;&amp;gt; a
{&#39;nombre&#39;: &#39;Alfredo&#39;}
&amp;gt;&amp;gt;&amp;gt; a.clear()
&amp;gt;&amp;gt;&amp;gt; a
{}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;copia-de-diccionarios&#34;&gt;Copia de diccionarios&lt;/h3&gt;
&lt;p&gt;Existen dos formas de copiar diccionarios:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Copia por referencia&lt;/strong&gt; &lt;code&gt;d1 = d2&lt;/code&gt;: Asocia la la variable &lt;code&gt;d1&lt;/code&gt; el mismo diccionario que tiene asociado la variable &lt;code&gt;d2&lt;/code&gt;, es decir, ambas variables apuntan a la misma dirección de memoria. Cualquier cambio que hagamos a través de &lt;code&gt;l1&lt;/code&gt; o &lt;code&gt;l2&lt;/code&gt; afectará al mismo diccionario.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Copia por valor&lt;/strong&gt; &lt;code&gt;d1 = list(d2)&lt;/code&gt;: Crea una copia del diccionario asociado a &lt;code&gt;d2&lt;/code&gt; en una dirección de memoria diferente y se la asocia a &lt;code&gt;d1&lt;/code&gt;. Las variables apuntan a direcciones de memoria diferentes que contienen los mismos datos. Cualquier cambio que hagamos a través de &lt;code&gt;l1&lt;/code&gt; no afectará al diccionario de &lt;code&gt;l2&lt;/code&gt; y viceversa.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = {1:&#39;A&#39;, 2:&#39;B&#39;, 3:&#39;C&#39;}
&amp;gt;&amp;gt;&amp;gt; # copia por referencia
&amp;gt;&amp;gt;&amp;gt; b = a
&amp;gt;&amp;gt;&amp;gt; b
{1:&#39;A&#39;, 2:&#39;B&#39;, 3:&#39;C&#39;}
&amp;gt;&amp;gt;&amp;gt; b.pop(2)
&amp;gt;&amp;gt;&amp;gt; b
{1:&#39;A&#39;, 3:&#39;C&#39;}
&amp;gt;&amp;gt;&amp;gt; a
{1:&#39;A&#39;, 3:&#39;C&#39;}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = {1:&#39;A&#39;, 2:&#39;B&#39;, 3:&#39;C&#39;}
&amp;gt;&amp;gt;&amp;gt; # copia por referencia
&amp;gt;&amp;gt;&amp;gt; b = dict(a)
&amp;gt;&amp;gt;&amp;gt; b
{1:&#39;A&#39;, 2:&#39;B&#39;, 3:&#39;C&#39;}
&amp;gt;&amp;gt;&amp;gt; b.pop(2)
&amp;gt;&amp;gt;&amp;gt; b
{1:&#39;A&#39;, 3:&#39;C&#39;}
&amp;gt;&amp;gt;&amp;gt; a
{1:&#39;A&#39;, 2:&#39;B&#39;, 3:&#39;C&#39;}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Ejercicios de Ficheros</title>
      <link>/docencia/python/ejercicios/ficheros/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/ejercicios/ficheros/</guid>
      <description>&lt;h2 id=&#34;ejercicio-1&#34;&gt;Ejercicio 1&lt;/h2&gt;
&lt;p&gt;Escribir una función que pida un número entero entre 1 y 10 y guarde en un fichero con el nombre &lt;code&gt;tabla-n.txt&lt;/code&gt; la tabla de multiplicar de ese número, done &lt;code&gt;n&lt;/code&gt; es el número introducido.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/ficheros/ejercicio1.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-2&#34;&gt;Ejercicio 2&lt;/h2&gt;
&lt;p&gt;Escribir una función que pida un número entero entre 1 y 10, lea el fichero &lt;code&gt;tabla-n.txt&lt;/code&gt; con la tabla de multiplicar de ese número, done &lt;code&gt;n&lt;/code&gt; es el número introducido, y la muestre por pantalla. Si el fichero no existe debe mostrar un mensaje por pantalla informando de ello.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/ficheros/ejercicio2.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-3&#34;&gt;Ejercicio 3&lt;/h2&gt;
&lt;p&gt;Escribir una función que pida dos números &lt;code&gt;n&lt;/code&gt; y &lt;code&gt;m&lt;/code&gt; entre 1 y 10, lea el fichero &lt;code&gt;tabla-n.txt&lt;/code&gt; con la tabla de multiplicar de ese número, y muestre por pantalla la línea &lt;code&gt;m&lt;/code&gt; del fichero. Si el fichero no existe debe mostrar un mensaje por pantalla informando de ello.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/ficheros/ejercicio3.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-4&#34;&gt;Ejercicio 4&lt;/h2&gt;
&lt;p&gt;Escribir un programa que acceda a un fichero de internet mediante su url y muestre por pantalla el número de palabras que contiene.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/ficheros/ejercicio4.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-5&#34;&gt;Ejercicio 5&lt;/h2&gt;
&lt;p&gt;Escribir un programa que abra el fichero con información sobre el PIB per cápita de los países de la Unión Europea (url:&lt;code&gt;https://ec.europa.eu/eurostat/estat-navtree-portlet-prod/BulkDownloadListing?file=data/sdg_08_10.tsv.gz&amp;amp;unzip=true&lt;/code&gt;), pregunte por las iniciales de un país y muestre el PIB per cápita de ese país de todos los años disponibles.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/ficheros/ejercicio5.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-6&#34;&gt;Ejercicio 6&lt;/h2&gt;
&lt;p&gt;Escribir un programa para gestionar un listín telefónico con los nombres y los teléfonos de los clientes de una empresa. El programa incorporar funciones crear el fichero con el listín si no existe, para consultar el teléfono de un cliente, añadir el teléfono de un nuevo cliente y eliminar el teléfono de un cliente. El listín debe estar guardado en el fichero de texto &lt;code&gt;listin.txt&lt;/code&gt; donde el nombre del cliente y su teléfono deben aparecer separados por comas y cada cliente en una línea distinta.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/ficheros/ejercicio6.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-7&#34;&gt;Ejercicio 7&lt;/h2&gt;
&lt;p&gt;El fichero 
&lt;a href=&#34;../soluciones/ficheros/cotizacion.csv&#34;&gt;cotizacion.csv&lt;/a&gt; contiene las cotizaciones de las empresas del IBEX35 con las siguientes columnas: &lt;code&gt;Nombre&lt;/code&gt; (nombre de la empresa), &lt;code&gt;Final&lt;/code&gt; (precio de la acción al cierre de bolsa), &lt;code&gt;Máximo&lt;/code&gt; (precio máximo de la acción durante la jornada), &lt;code&gt;Mínimo&lt;/code&gt; (precio mínimo de la acción durante la jornada), &lt;code&gt;Volumen&lt;/code&gt; (Volumen al cierre de bolsa), &lt;code&gt;Efectivo&lt;/code&gt; (capitalización al cierre en miles de euros).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Construir una función reciba el fichero de cotizaciones y devuelva un diccionario con los datos del fichero por columnas.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Construir una función que reciba el diccionario devuelto por la función anterior y cree un fichero en formato csv con el mínimo, el máximo y la media de dada columna.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/ficheros/ejercicio7.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-8&#34;&gt;Ejercicio 8&lt;/h2&gt;
&lt;p&gt;El fichero 
&lt;a href=&#34;../soluciones/ficheros/calificaciones.csv&#34;&gt;calificaciones.csv&lt;/a&gt; contiene las calificaciones de un curso. Durante el curso se realizaron dos exámenes parciales de teoría y un examen de prácticas. Los alumnos que tuvieron menos de 4 en alguno de estos exámenes pudieron repetirlo en la al final del curso (convocatoria ordinaria). Escribir un programa que contenga las siguientes funciones:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Una función que reciba el fichero de calificaciones y devuelva una lista de diccionarios, donde cada diccionario contiene la información de los exámenes y la asistencia de un alumno. La lista tiene que estar ordenada por apellidos.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Una función que reciba una lista de diccionarios como la que devuelve la función anterior y añada a cada diccionario un nuevo par con la nota final del curso. El peso de cada parcial de teoría en la nota final es de un 30% mientras que el peso del examen de prácticas es de un 40%.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Una función que reciba una lista de diccionarios como la que devuelve la función anterior y devuelva dos listas, una con los alumnos aprobados y otra con los alumnos suspensos. Para aprobar el curso, la asistencia tiene que ser mayor o igual que el 75%, la nota de los exámenes parciales y de prácticas mayor o igual que 4 y la nota final mayor o igual que 5.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/ficheros/ejercicio8.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Funciones</title>
      <link>/docencia/python/manual/funciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/manual/funciones/</guid>
      <description>&lt;h2 id=&#34;funciones-def&#34;&gt;Funciones (&lt;code&gt;def&lt;/code&gt;)&lt;/h2&gt;
&lt;p&gt;Una función es un bloque de código que tiene asociado un nombre, de manera que cada vez que se quiera ejecutar el bloque de código basta con invocar el nombre de la función.&lt;/p&gt;
&lt;p&gt;Para declarar una función se utiliza la siguiente sintaxis:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;def &amp;lt;nombre-funcion&amp;gt; (&amp;lt;parámetros&amp;gt;):&lt;/code&gt;&lt;br&gt;
     &lt;em&gt;&lt;code&gt;bloque código&lt;/code&gt;&lt;/em&gt;&lt;br&gt;
     &lt;code&gt;return &amp;lt;objeto&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def bienvenida():
...     print(&#39;¡Bienvenido a Python!&#39;)
...     return
...
&amp;gt;&amp;gt;&amp;gt; type(bienvenida)
&amp;lt;class &#39;function&#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; bienvenida()
¡Bienvenido a Python!
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;parámetros-y-argumentos-de-una-función&#34;&gt;Parámetros y argumentos de una función&lt;/h3&gt;
&lt;p&gt;Una función puede recibir valores cuando se invoca a través de unas variables conocidas como &lt;em&gt;parámetros&lt;/em&gt; que se definen entre paréntesis en la declaración de la función. En el cuerpo de la función se pueden usar estos parámetros como si fuesen variables.&lt;/p&gt;
&lt;p&gt;Los valores que se pasan a la función en una llamada o invocación concreta de ella se conocen como &lt;em&gt;argumentos&lt;/em&gt; y se asocian a los parámetros de la declaración de la función.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def bienvenida(nombre):
...     print(&#39;¡Bienvenido a Python&#39;, nombre + &#39;!&#39;)
...     return
...
&amp;gt;&amp;gt;&amp;gt; bienvenida(&#39;Alf&#39;)
¡Bienvenido a Python Alf!
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;paso-de-argumentos-a-una-función&#34;&gt;Paso de argumentos a una función&lt;/h3&gt;
&lt;p&gt;Los argumentos se pueden pasar de dos formas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Argumentos posicionales&lt;/strong&gt;: Se asocian a los parámetros de la función en el mismo orden que aparecen en la definición de la función.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Argumentos nominales&lt;/strong&gt;: Se indica explícitamente el nombre del parámetro al que se asocia un argumento de la forma &lt;code&gt;parametro = argumento&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def bienvenida(nombre, apellido):
...     print(&#39;¡Bienvenido a Python&#39;, nombre, apellido + &#39;!&#39;)
...     return
...
&amp;gt;&amp;gt;&amp;gt; bienvenida(&#39;Alfredo&#39;, &#39;Sánchez)
¡Bienvenido a Python Alfredo Sánchez!
&amp;gt;&amp;gt;&amp;gt; bienvenida(apellido = &#39;Sánchez&#39;, nombre = &#39;Alfredo&#39;)
¡Bienvenido a Python Alfredo Sánchez!
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;retorno-de-una-función&#34;&gt;Retorno de una función&lt;/h3&gt;
&lt;p&gt;Una función puede devolver un objeto de cualquier tipo tras su invocación. Para ello el objeto a devolver debe escribirse detrás de la palabra reservada &lt;code&gt;return&lt;/code&gt;. Si no se indica ningún objeto, la función no devolverá nada.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def area_triangulo(base, altura):
...     return base * altura / 2
...
&amp;gt;&amp;gt;&amp;gt; area_triangulo(2, 3)
3
&amp;gt;&amp;gt;&amp;gt; area_triangulo(4, 5)
10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Una función puede devolver más de un objeto separándolos por comas tras la palabra reservada &lt;code&gt;return&lt;/code&gt;. En tal caso, la función agrupará los objetos en una tupla y devolverá la tupla.&lt;/p&gt;
&lt;h2 id=&#34;argumentos-por-defecto&#34;&gt;Argumentos por defecto&lt;/h2&gt;
&lt;p&gt;En la definición de una función se puede asignar a cada parámetro un argumento por defecto, de manera que si se invoca la función sin proporcionar ningún argumento para ese parámetro, se utiliza el argumento por defecto.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def bienvenida(nombre, lenguaje = &#39;Python&#39;):
...     print(&#39;¡Bienvenido a&#39;, lenguaje, nombre + &#39;!&#39;)
...     return
...
&amp;gt;&amp;gt;&amp;gt; bienvenida(&#39;Alf&#39;)
¡Bienvenido a Python Alf!
&amp;gt;&amp;gt;&amp;gt; bienvenida(&#39;Alf&#39;, &#39;Java&#39;)
¡Bienvenido a Java Alf!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;i class=&#34;fa fa-exclamation-triangle&#34; style=&#34;color:red;&#34;&gt;&lt;/i&gt;Los parámetros con un argumento por defecto deben indicarse después de los parámetros sin argumentos por defectos. De lo contrario se produce un error.&lt;/p&gt;
&lt;h2 id=&#34;pasar-un-número-indeterminado-de-argumentos&#34;&gt;Pasar un número indeterminado de argumentos&lt;/h2&gt;
&lt;p&gt;Por último, es posible pasar un número variable de argumentos a un parámetro. Esto se puede hacer de dos formas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;*parametro&lt;/code&gt;: Se antepone un asterisco al nombre del parámetro y en la invocación de la función se pasa el número variable de argumentos separados por comas. Los argumentos se guardan en una lista que se asocia al parámetro.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def menu(*platos):
...     print(&#39;Hoy tenemos: &#39;, end=&#39;&#39;)
...     for plato in platos:
...         print(plato, end=&#39;, &#39;)
...     return
...
&amp;gt;&amp;gt;&amp;gt; menu(&#39;pasta&#39;, &#39;pizza&#39;, &#39;ensalada&#39;)
Hoy tenemos: pasta, pizza, ensalada,
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;**parametro&lt;/code&gt;: Se anteponen dos asteriscos al nombre del parámetro y en la invocación de la función se pasa el número variable de argumentos por pares &lt;code&gt;nombre = valor&lt;/code&gt;, separados por comas. Los argumentos se guardan en un diccionario que se asocia al parámetro.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def contacto(**info):
...     print(&#39;Datos del contacto)
...     for clave, valor in info.items():
...         print(clave, &amp;quot;:&amp;quot;, valor)
...     return
...
&amp;gt;&amp;gt;&amp;gt; contacto(Nombre = &amp;quot;Alf&amp;quot;, Email = &amp;quot;asalber@ceu.es&amp;quot;)
Datos del contacto
Nombre : Alf
Email : asalber@ceu.es
&amp;gt;&amp;gt;&amp;gt; contacto(Nombre = &amp;quot;Alf&amp;quot;, Email = &amp;quot;asalber@ceu.es&amp;quot;, Dirección = &amp;quot;Madrid&amp;quot;)
Datos del contacto
Nombre : Alf
Email : asalber@ceu.es
Dirección : Madrid
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ámbito-de-los-parámetros-y-variables-de-una-función&#34;&gt;Ámbito de los parámetros y variables de una función&lt;/h2&gt;
&lt;p&gt;Los parámetros y las variables declaradas dentro de una función son de &lt;strong&gt;ámbito local&lt;/strong&gt;, mientras que las definidas fuera de ella son de ámbito &lt;strong&gt;ámbito global&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Tanto los parámetros como las variables del ámbito local de una función sólo están accesibles durante la ejecución de la función, es decir, cuando termina la ejecución de la función estas variables desaparecen y no son accesibles desde fuera de la función.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def bienvenida(nombre):
...     lenguaje = &#39;Python&#39;
...     print(&#39;¡Bienvenido a&#39;, lenguaje, nombre + &#39;!&#39;)
...     return
...
&amp;gt;&amp;gt;&amp;gt; bienvenida(&#39;Alf&#39;)
¡Bienvenido a Python Alf!
&amp;gt;&amp;gt;&amp;gt; lenguaje
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
NameError: name &#39;lenguaje&#39; is not defined
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Si en el ámbito local de una función existe una variable que también existe en el ámbito global, durante la ejecución de la función la variable global queda eclipsada por la variable local y no es accesible hasta que finaliza la ejecución de la función.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; lenguaje = &#39;Java&#39;
&amp;gt;&amp;gt;&amp;gt; def bienvenida():
...     lenguaje = &#39;Python&#39;
...     print(&#39;¡Bienvenido a&#39;, lenguaje + &#39;!&#39;)
...     return
...
&amp;gt;&amp;gt;&amp;gt; bienvenida()
¡Bienvenido a Python!
&amp;gt;&amp;gt;&amp;gt; print(lenguaje)
Java
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;paso-de-argumentos-por-asignación&#34;&gt;Paso de argumentos por asignación&lt;/h2&gt;
&lt;p&gt;En Python los argumentos se pasan a una función por asignación, es decir, se asignan a los parámetros de la función como si fuesen variables locales. De este modo, cuando los argumentos son objetos mutables (listas, diccionarios, etc.) se pasa al parámetro una referencia al objeto, de manera que cualquier cambio que se haga dentro de la función mediante el parámetro asociado afectará al objeto original.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; primer_curso = [&#39;Matemáticas&#39;, &#39;Física&#39;]
&amp;gt;&amp;gt;&amp;gt; def añade_asignatura(curso, asignatura):
...     curso.append(asignatura)
...     return
...
&amp;gt;&amp;gt;&amp;gt; añade_asignatura(primer_curso, &#39;Química&#39;)
&amp;gt;&amp;gt;&amp;gt; print(primer_curso)
[&#39;Matemáticas&#39;, &#39;Física&#39;, &#39;Química&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;las-funciones-son-objetos&#34;&gt;Las funciones son objetos&lt;/h2&gt;
&lt;p&gt;En Python las funciones son objetos como el resto de tipos de datos, de manera que es posible asignar una función a una variable y luego utilizar la variable para hacer la llamada a la función.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def saludo(nombre):
...     print(&amp;quot;Hola&amp;quot;, nombre)
...     return
... 
&amp;gt;&amp;gt;&amp;gt; bienvenida = saludo
&amp;gt;&amp;gt;&amp;gt; bienvenida(&amp;quot;Alf&amp;quot;)
Hola Alf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Esto permite, por tanto, pasar funciones como argumentos en la llamada a una función y que una función pueda devolver otras funciones.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def impuesto(porcentaje):
...     def aplicar(base):
...             return base * porcentaje / 100
...     return aplicar
... 
&amp;gt;&amp;gt;&amp;gt; iva = impuesto(21)
&amp;gt;&amp;gt;&amp;gt; iva(1000)
210.0
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;funciones-recursivas&#34;&gt;Funciones recursivas&lt;/h2&gt;
&lt;p&gt;Una función recursiva es una función que en su cuerpo contiene una llama a si misma.&lt;/p&gt;
&lt;p&gt;La recursión es una práctica común en la mayoría de los lenguajes de programación ya que permite resolver las tareas recursivas de manera más natural.&lt;/p&gt;
&lt;p&gt;Para garantizar el final de una función recursiva, las sucesivas llamadas tienen que reducir el grado de complejidad del problema, hasta que este pueda resolverse directamente sin necesidad de volver a llamar a la función.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def factorial(n):
...     if n == 0:
...         return 1
...     else:
...         return n * factorial(n-1)
...
&amp;gt;&amp;gt;&amp;gt; f(5)
120
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;funciones-recursivas-múltiples&#34;&gt;Funciones recursivas múltiples&lt;/h3&gt;
&lt;p&gt;Una función recursiva puede invocarse a si misma tantas veces como quiera en su cuerpo.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def fibonacci(n):
...     if n &amp;lt;= 1:
...         return n
...     else:
...         return fibonacci(n - 1) + fibonacci(n - 2)
...
&amp;gt;&amp;gt;&amp;gt; fibonacci(6)
8
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;los-riesgos-de-la-recursión&#34;&gt;Los riesgos de la recursión&lt;/h3&gt;
&lt;p&gt;Aunque la recursión permite resolver las tareas recursivas de forma más natural, hay que tener cuidado con ella porque suele consumir bastante memoria, ya que cada llamada a la función crea un nuevo ámbito local con las variables y los parámetros de la función.&lt;/p&gt;
&lt;p&gt;En muchos casos es más eficiente resolver la tarea recursiva de forma iterativa usando bucles.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def fibonacci(n):
...     a, b = 0, 1
...     for i in range(n):
...         a, b = b, a + b
...     return a
...
&amp;gt;&amp;gt;&amp;gt; fibonacci(6)
8
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;documentación-de-funciones&#34;&gt;Documentación de funciones&lt;/h2&gt;
&lt;p&gt;Una práctica muy recomendable cuando se define una función es describir lo que la función hace en un comentario.&lt;/p&gt;
&lt;p&gt;En Python esto se hace con un &lt;strong&gt;docstring&lt;/strong&gt; que es un tipo de comentario especial se hace en la línea siguiente al encabezado de la función entre tres comillas simples &lt;code&gt;&#39;&#39;&#39;&lt;/code&gt; o dobles &lt;code&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Después se puede acceder a la documentación de la función con la función &lt;code&gt;help(&amp;lt;nombre-función&amp;gt;)&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def area_triangulo(base, altura):
... &amp;quot;&amp;quot;&amp;quot;Función que calcula el área de un triángulo.
...
... Parámetros:
...     - base: Un número real con la base del triángulo.
...     - altura: Un número real con la altura del triángulo.
... Salida:
...     Un número real con el área del triángulo de base y altura especificadas.
... &amp;quot;&amp;quot;&amp;quot;
...     return base * altura / 2
...
&amp;gt;&amp;gt;&amp;gt; help(area_triangulo)
area_triangulo(base, altura)
    Función que calcula el área de un triángulo.

    Parámetros:
        - base: Un número real con la base del triángulo.
        - altura: Un número real con la altura del triángulo.
    Salida:
        Un número real con el área del triángulo de base y altura especificadas.
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Ejercicios de Depuración</title>
      <link>/docencia/python/ejercicios/depuracion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/ejercicios/depuracion/</guid>
      <description>&lt;h2 id=&#34;ejercicio-1&#34;&gt;Ejercicio 1&lt;/h2&gt;
&lt;p&gt;Corregir los errores sintácticos del siguiente programa:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;contraseña = input(&#39;Introduce la contraseña: &amp;quot;)
if contraseña in [&#39;sesamo&#39;):
  print(&#39;Pasa&#39;)
else
  print(&#39;No pasa&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/depuracion/ejercicio1.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-2&#34;&gt;Ejercicio 2&lt;/h2&gt;
&lt;p&gt;Detectar y corregir los errores del siguiente programa que aplica el iva a una factura:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;base = input(&#39;Introduce la base imponible de la factura: &#39;)
print(aplica_iva(base, iva))

def aplica_iva(base, iva = 21):
    base = base * iva   
    return base 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/depuracion/ejercicio2.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-3&#34;&gt;Ejercicio 3&lt;/h2&gt;
&lt;p&gt;Detectar y corregir los errores del siguiente programa que calcula el producto escalar de dos vectores:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;u = (1, 2, 3)
v = (4, 5, 6)

def producto_escalar(u, v):
    for i in u:
        u[i+1] *= v[i+1]
    return sum(u)

print(producto_escalar(u, v))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/depuracion/ejercicio3.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-4&#34;&gt;Ejercicio 4&lt;/h2&gt;
&lt;p&gt;Detectar y corregir los errores del siguiente programa que devuelve y elimina el teléfono de un listín telefónico a través del nombre del usuario:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;listin = {&#39;Juan&#39;:123456789, &#39;Pedro&#39;:987654321}

def elimina(listin, usuario):
    del listin[usuario]
    return listin[usuario]

print(elimina(listin, &#39;Pablo&#39;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/depuracion/ejercicio4.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-5&#34;&gt;Ejercicio 5&lt;/h2&gt;
&lt;p&gt;Detectar y corregir los errores del siguiente programa que multiplica dos matrices:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;a = ((1, 2, 3),
     (3, 2, 1))
b = ((1, 2),
     (3, 4),
     (5, 6))

def producto(a, b):
    producto = []
    for i in range(len(b)):
        fila = []
        for j in range(len(a[0])):
            suma = 0
            for k in range(len(a[0]+1)):
                suma += a[i][k] * b[k+1][j]
            fila[j] = suma
        producto[i] = tuple(fila)
    return tuple(producto)

print(producto(a, b))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/depuracion/ejercicio5.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ejercicios de la Librería Pandas</title>
      <link>/docencia/python/ejercicios/pandas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/ejercicios/pandas/</guid>
      <description>&lt;h2 id=&#34;ejercicio-1&#34;&gt;Ejercicio 1&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pregunte al usuario por las ventas de un rango de años y muestre por pantalla una serie con los datos de las ventas indexada por los años, antes y después de aplicarles un descuento del 10%.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/pandas/ejercicio1.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-2&#34;&gt;Ejercicio 2&lt;/h2&gt;
&lt;p&gt;Escribir una función que reciba un diccionario con las notas de los alumno de un curso y devuelva una serie con la nota mínima, la máxima, media y la desviación típica.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/pandas/ejercicio2.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-3&#34;&gt;Ejercicio 3&lt;/h2&gt;
&lt;p&gt;Escribir una función que reciba un diccionario con las notas de los alumnos de un curso y devuelva una serie con las notas de los alumnos aprobados ordenadas de mayor a menor.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/pandas/ejercicio3.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-4&#34;&gt;Ejercicio 4&lt;/h2&gt;
&lt;p&gt;Escribir programa que genere y muestre por pantalla un DataFrame con los datos de la tabla siguiente:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Mes&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;Ventas&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;Gastos&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Enero&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;30500&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;22000&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Febrero&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;35600&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;23400&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Marzo&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;28300&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;18100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Abril&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;33900&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;20700&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/pandas/ejercicio4.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-5&#34;&gt;Ejercicio 5&lt;/h2&gt;
&lt;p&gt;Escribir una función que reciba un DataFrame con el formato del ejercicio anterior, una lista de meses, y devuelva el balance (ventas - gastos) total en los meses indicados.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/pandas/ejercicio5.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-6&#34;&gt;Ejercicio 6&lt;/h2&gt;
&lt;p&gt;El fichero 
&lt;a href=&#34;../soluciones/pandas/cotizacion.csv&#34;&gt;&lt;code&gt;cotizacion.csv&lt;/code&gt;&lt;/a&gt; contiene las cotizaciones de las empresas del IBEX35 con las siguientes columnas: &lt;code&gt;nombre&lt;/code&gt; (nombre de la empresa), &lt;code&gt;Final&lt;/code&gt; (precio de la acción al cierre de bolsa), &lt;code&gt;Máximo&lt;/code&gt; (precio máximo de la acción durante la jornada), &lt;code&gt;Mínimo&lt;/code&gt; (precio mínimo de la acción durante la jornada), &lt;code&gt;volumen&lt;/code&gt; (Volumen al cierre de bolsa), &lt;code&gt;Efectivo&lt;/code&gt; (capitalización al cierre en miles de euros). Construir una función que construya un DataFrame a partir del un fichero con el formato anterior y devuelva otro DataFrame con el mínimo, el máximo y la media de dada columna.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/pandas/ejercicio6.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-7&#34;&gt;Ejercicio 7&lt;/h2&gt;
&lt;p&gt;El fichero 
&lt;a href=&#34;../soluciones/pandas/titanic.csv&#34;&gt;titanic.csv&lt;/a&gt; contiene información sobre los pasajeros del Titanic. Escribir un programa con los siguientes requisitos:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Generar un DataFrame con los datos del fichero.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla las dimensiones del DataFrame, el número de datos que contiene, los nombres de sus columnas y filas, los tipos de datos de las columnas, las 10 primeras filas y las 10 últimas filas&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla los datos del pasajero con identificador 148.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla las filas pares del DataFrame.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla los nombres de las personas que iban en primera clase ordenadas alfabéticamente.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla el porcentaje de personas que sobrevivieron y murieron.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla el porcentaje de personas que sobrevivieron en cada clase.&lt;/li&gt;
&lt;li&gt;Eliminar del DataFrame los pasajeros con edad desconocida.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla la edad media de las mujeres que viajaban en cada clase.&lt;/li&gt;
&lt;li&gt;Añadir una nueva columna booleana para ver si el pasajero era menor de edad o no.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla el porcentaje de menores y mayores de edad que sobrevivieron en cada clase.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/pandas/ejercicio7.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-8&#34;&gt;Ejercicio 8&lt;/h2&gt;
&lt;p&gt;Los ficheros 
&lt;a href=&#34;../soluciones/pandas/emisiones-2016.csv&#34;&gt;emisiones-2016.csv&lt;/a&gt;, 
&lt;a href=&#34;../soluciones/pandas/emisiones-2017.csv&#34;&gt;emisiones-2017.csv&lt;/a&gt;, 
&lt;a href=&#34;../soluciones/pandas/emisiones-2018.csv&#34;&gt;emisiones-2018.csv&lt;/a&gt; y 
&lt;a href=&#34;../soluciones/pandas/emisiones-2019.csv&#34;&gt;emisiones-2019.csv&lt;/a&gt;, contienen datos sobre las emisiones contaminates en la ciudad de Madrid en los años 2016, 2017, 2018 y 2019 respectivamente. Escribir un programa con los siguientes requisitos:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Generar un DataFrame con los datos de los cuatro ficheros.&lt;/li&gt;
&lt;li&gt;Filtrar las columnas del DataFrame para quedarse con las columnas ESTACION, MAGNITUD, AÑO, MES y las correspondientes a los días D01, D02, etc.&lt;/li&gt;
&lt;li&gt;Reestructurar el DataFrame para que los valores de los contaminantes de las columnas de los días aparezcan en una única columna.&lt;/li&gt;
&lt;li&gt;Añadir una columna con la fecha a partir de la concatenación del año, el mes y el día (usar el módulo &lt;code&gt;datetime&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Eliminar las filas con fechas no válidas (utilizar la función &lt;code&gt;isnat&lt;/code&gt; del módulo &lt;code&gt;numpy&lt;/code&gt;) y ordenar el DataFrame por estaciones, contaminantes y fecha.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla las estaciones y los contaminantes disponibles en el DataFrame.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba una estación, un contaminante y un rango de fechas y devuelva una serie con las emisiones del contaminante dado en la estación y rango de fechas dado.&lt;/li&gt;
&lt;li&gt;Mostrar un resumen descriptivo (mímino, máximo, media, etc) para cada contaminante.&lt;/li&gt;
&lt;li&gt;Mostrar un resumen descriptivo para cada contaminente por distritos.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba una estación y un contaminante y devuelva un resumen descriptivo de las emisiones del contaminante indicado en la estadión indicada.&lt;/li&gt;
&lt;li&gt;Crear una función que devuelva las emisiones medias mensuales de un contaminante y un año dados para todos las estaciones.&lt;/li&gt;
&lt;li&gt;Crear un función que reciba una estación de medición y devuelva un DataFrame con las medias mensuales de los distintos tipos de contaminantes.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/pandas/ejercicio8.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Programación funcional</title>
      <link>/docencia/python/manual/programacion-funcional/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/manual/programacion-funcional/</guid>
      <description>&lt;h2 id=&#34;programación-funcional&#34;&gt;Programación funcional&lt;/h2&gt;
&lt;p&gt;En Python las funciones son objetos de primera clase, es decir, que pueden pasarse como argumentos de una función, al igual que el resto de los tipos de datos.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def aplica(funcion, argumento):
...     return funcion(argumento)
...
&amp;gt;&amp;gt;&amp;gt; def cuadrado(n):
...     return n*n
...
&amp;gt;&amp;gt;&amp;gt; def cubo(n):
...     return n**3
...
&amp;gt;&amp;gt;&amp;gt; aplica(cuadrado, 5)
25
&amp;gt;&amp;gt;&amp;gt; aplica(cubo, 5)
125
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;funciones-anónimas-lambda&#34;&gt;Funciones anónimas (&lt;code&gt;lambda&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;Existe un tipo especial de funciones que no tienen nombre asociado y se conocen como &lt;strong&gt;funciones anónimas&lt;/strong&gt; o &lt;strong&gt;funciones lambda&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;La sintaxis para definir una función anónima es&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;lambda &amp;lt;parámetros&amp;gt; : &amp;lt;expresión&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Estas funciones se suelen asociar a una variable o parámetro desde la que hacer la llamada.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; area = lambda base, altura : base * altura
&amp;gt;&amp;gt;&amp;gt; area(4, 5)
10
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;aplicar-una-función-a-todos-los-elementos-de-una-colección-iterable-map&#34;&gt;Aplicar una función a todos los elementos de una colección iterable (&lt;code&gt;map&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;map(f, c)&lt;/code&gt; : Devuelve una objeto iterable con los resultados de aplicar la función &lt;code&gt;f&lt;/code&gt; a los elementos de la colección &lt;code&gt;c&lt;/code&gt;. Si la función &lt;code&gt;f&lt;/code&gt; requiere &lt;code&gt;n&lt;/code&gt; argumentos entonces deben pasarse &lt;code&gt;n&lt;/code&gt; colecciones con los argumentos. Para convertir el objeto en una lista, tupla o diccionario hay que aplicar explícitamente las funciones &lt;code&gt;list()&lt;/code&gt;, &lt;code&gt;tuple()&lt;/code&gt; o &lt;code&gt;dic()&lt;/code&gt; respectivamente.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def cuadrado(n):
...     return n * n
...
&amp;gt;&amp;gt;&amp;gt; list(map(cuadrado, [1, 2, 3])
[1, 4, 9]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def rectangulo(a, b):
...     return a * b
...
&amp;gt;&amp;gt;&amp;gt; tuple(map(rectangulo, (1, 2, 3), (4, 5, 6)))
(4, 10, 18)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;filtrar-los-elementos-de-una-colección-iterable-filter&#34;&gt;Filtrar los elementos de una colección iterable (filter)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;filter(f, c)&lt;/code&gt; : Devuelve una objeto iterable con los elementos de la colección &lt;code&gt;c&lt;/code&gt; que devuelven &lt;code&gt;True&lt;/code&gt; al aplicarles la función &lt;code&gt;f&lt;/code&gt;. Para convertir el objeto en una lista, tupla o diccionario hay que aplicar explícitamente las funciones &lt;code&gt;list()&lt;/code&gt;, &lt;code&gt;tuple()&lt;/code&gt; o &lt;code&gt;dic()&lt;/code&gt; respectivamente.&lt;/p&gt;
&lt;p&gt;&lt;i class=&#34;fa fa-exclamation-triangle&#34; style=&#34;color:red;&#34;&gt;&lt;/i&gt; &lt;code&gt;f&lt;/code&gt; debe ser una función que recibe un argumento y devuelve un valor booleano.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def par(n):
...     return n % 2 == 0
...
&amp;gt;&amp;gt;&amp;gt; list(filter(par, range(10))
[0, 2, 4, 6, 8]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;combinar-los-elementos-de-varias-colecciones-iterables-zip&#34;&gt;Combinar los elementos de varias colecciones iterables (&lt;code&gt;zip&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;zip(c1, c2, ...)&lt;/code&gt; : Devuelve un objeto iterable cuyos elementos son tuplas formadas por los elementos que ocupan la misma posición en las colecciones &lt;code&gt;c1&lt;/code&gt;, &lt;code&gt;c2&lt;/code&gt;, etc. El número de elementos de las tuplas es el número de colecciones que se pasen. Para convertir el objeto en una lista, tupla o diccionario hay que aplicar explícitamente las funciones &lt;code&gt;list()&lt;/code&gt;, &lt;code&gt;tuple()&lt;/code&gt; o &lt;code&gt;dic()&lt;/code&gt; respectivamente.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; asignaturas = [&#39;Matemáticas&#39;, &#39;Física&#39;, &#39;Química&#39;, &#39;Economía&#39;]
&amp;gt;&amp;gt;&amp;gt; notas = [6.0, 3.5, 7.5, 8.0]
&amp;gt;&amp;gt;&amp;gt; list(zip(asignaturas, notas))
[(&#39;Matemáticas&#39;, 6.0), (&#39;Física&#39;, 3.5), (&#39;Química&#39;, 7.5), (&#39;Economía&#39;, 8.0)]
&amp;gt;&amp;gt;&amp;gt; dict(zip(asignaturas, notas[:3]))
{&#39;Matemáticas&#39;: 6.0, &#39;Física&#39;: 3.5, &#39;Química&#39;: 7.5}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;operar-todos-los-elementos-de-una-colección-iterable-reduce&#34;&gt;Operar todos los elementos de una colección iterable (&lt;code&gt;reduce&lt;/code&gt;)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;reduce(f, l)&lt;/code&gt; : Aplicar la función &lt;code&gt;f&lt;/code&gt; a los dos primeros elementos de la secuencia &lt;code&gt;l&lt;/code&gt;. Con el valor obtenido vuelve a aplicar la función &lt;code&gt;f&lt;/code&gt; a ese valor y el siguiente de la secuencia, y así hasta que no quedan más elementos en la lista. Devuelve el valor resultado de la última aplicación de la función &lt;code&gt;f&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;La función &lt;code&gt;reduce&lt;/code&gt; está definida en el módulo &lt;code&gt;functools&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from functools import reduce
&amp;gt;&amp;gt;&amp;gt; def producto(n, m):
...     return n * m
...
&amp;gt;&amp;gt;&amp;gt; reduce(producto, range(1, 5))
24
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Comprensión de Colecciones</title>
      <link>/docencia/python/manual/comprension-colecciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/manual/comprension-colecciones/</guid>
      <description>&lt;h2 id=&#34;comprensión-de-colecciones&#34;&gt;Comprensión de colecciones&lt;/h2&gt;
&lt;p&gt;En muchas aplicaciones es habitual aplicar una función o realizar una operación con los elementos de una colección (lista, tupla o diccionario) y obtener una nueva colección de elementos transformados. Aunque esto se puede hacer recorriendo la secuencia con un bucle iterativo, y en programación funcional mediante la función &lt;code&gt;map&lt;/code&gt;, Python incorpora un mecanismo muy potente que permite esto mismo de manera más simple.&lt;/p&gt;
&lt;h3 id=&#34;comprensión-de-listas&#34;&gt;Comprensión de listas&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;[&lt;em&gt;expresion&lt;/em&gt; &lt;code&gt;for&lt;/code&gt; &lt;em&gt;variable&lt;/em&gt; &lt;code&gt;in&lt;/code&gt; &lt;em&gt;lista&lt;/em&gt; &lt;code&gt;if&lt;/code&gt; &lt;em&gt;condicion&lt;/em&gt;]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Esta instrucción genera la lista cuyos elementos son el resultado de evaluar la expresión &lt;em&gt;expresion&lt;/em&gt;, para cada valor que toma la variable &lt;em&gt;variable&lt;/em&gt;, donde &lt;em&gt;variable&lt;/em&gt; toma todos los valores de la lista &lt;em&gt;lista&lt;/em&gt; que cumplen la condición &lt;em&gt;condición&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; [x ** 2 for x in range(10)]
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
&amp;gt;&amp;gt;&amp;gt; [x for x in range(10) if x % 2 == 0]
[0, 2, 4, 6, 8]
&amp;gt;&amp;gt;&amp;gt; [x ** 2 for x in range(10) if x % 2 == 0]
[0, 4, 16, 36, 64]
&amp;gt;&amp;gt;&amp;gt; notas = {&#39;Carmen&#39;:5, &#39;Antonio&#39;:4, &#39;Juan&#39;:8, &#39;Mónica&#39;:9, &#39;María&#39;: 6, &#39;Pablo&#39;:3}
&amp;gt;&amp;gt;&amp;gt; [nombre for (nombre, nota) in notas.items() if nota &amp;gt;= 5]
[&#39;Carmen&#39;, &#39;Juan&#39;, &#39;Mónica&#39;, &#39;María&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;comprensión-de-diccionarios&#34;&gt;Comprensión de diccionarios&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;{&lt;em&gt;expresion-clave&lt;/em&gt;&lt;code&gt;:&lt;/code&gt;&lt;em&gt;expresion-valor&lt;/em&gt; &lt;code&gt;for&lt;/code&gt; &lt;em&gt;variables&lt;/em&gt; &lt;code&gt;in&lt;/code&gt; &lt;em&gt;lista&lt;/em&gt; &lt;code&gt;if&lt;/code&gt; &lt;em&gt;condicion&lt;/em&gt;}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Esta instrucción genera el diccionario formado por los pares cuyas claves son el resultado de evaluar la expresión &lt;em&gt;expresion-clave&lt;/em&gt; y cuyos valores son el resultado de evaluar la expresión &lt;em&gt;expresion-valor&lt;/em&gt;, para cada valor que toma la variable &lt;em&gt;variable&lt;/em&gt;, donde &lt;em&gt;variable&lt;/em&gt; toma todos los valores de la lista &lt;em&gt;lista&lt;/em&gt; que cumplen la condición &lt;em&gt;condición&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; {palabra:len(palabra) for palabra in [&#39;I&#39;, &#39;love&#39;, &#39;Python&#39;]}
{&#39;I&#39;: 1, &#39;love&#39;: 4, &#39;Python&#39;: 6}
&amp;gt;&amp;gt;&amp;gt; notas = {&#39;Carmen&#39;:5, &#39;Antonio&#39;:4, &#39;Juan&#39;:8, &#39;Mónica&#39;:9, &#39;María&#39;: 6, &#39;Pablo&#39;:3}
&amp;gt;&amp;gt;&amp;gt; {nombre: nota +1 for (nombre, nota) in notas.items() if nota &amp;gt;= 5])
{&#39;Carmen&#39;: 6, &#39;Juan&#39;: 9, &#39;Mónica&#39;: 10, &#39;María&#39;: 7}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Ejercicios de la librería Matplotlib</title>
      <link>/docencia/python/ejercicios/matplotlib/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/ejercicios/matplotlib/</guid>
      <description>&lt;h2 id=&#34;ejercicio-1&#34;&gt;Ejercicio 1&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pregunte al usuario por las ventas de un rango de años y muestre por pantalla un diagrama de líneas con la evolución de las ventas.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/matplotlib/ejercicio1.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-2&#34;&gt;Ejercicio 2&lt;/h2&gt;
&lt;p&gt;Escribir una función que reciba una diccionario con las notas de las asignaturas de un curso y una cadena con el nombre de un color y devuelva un diagrama de barras de las notas en el color dado.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/matplotlib/ejercicio2.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-3&#34;&gt;Ejercicio 3&lt;/h2&gt;
&lt;p&gt;Escribir una función que reciba una serie de Pandas con las notas de los alumnos de un curso y devuelva un diagrama de cajas con las notas. El diagrama debe tener el título &amp;ldquo;Distribución de notas&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/matplotlib/ejercicio3.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-4&#34;&gt;Ejercicio 4&lt;/h2&gt;
&lt;p&gt;Escribir una función que reciba una serie de Pandas con el número de ventas de un producto durante los meses de un trimestre y un título y cree un diagrama de sectores con las ventas en formato png con el titulo dado. El diagrama debe guardarse en un fichero con formato png y el título dado.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/matplotlib/ejercicio4.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-5&#34;&gt;Ejercicio 5&lt;/h2&gt;
&lt;p&gt;Escribir una función que reciba una serie de Pandas con el número de ventas de un producto por años y una cadena con el tipo de gráfico a generar (lineas, barras, sectores, areas) y devuelva un diagrama del tipo indicado con la evolución de las ventas por años y con el título &amp;ldquo;Evolución del número de ventas&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/matplotlib/ejercicio5.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-6&#34;&gt;Ejercicio 6&lt;/h2&gt;
&lt;p&gt;Escribir una función que reciba un dataframe de Pandas con los ingresos y gastos de una empresa por meses y devuelva un diagrama de líneas con dos líneas, una para los ingresos y otra para los gastos. El diagrama debe tener una leyenda identificando la línea de los ingresos y la de los gastos, un título con el nombre &amp;ldquo;Evolución de ingresos y gastos&amp;rdquo; y el eje y debe empezar en 0.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/matplotlib/ejercicio6.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-7&#34;&gt;Ejercicio 7&lt;/h2&gt;
&lt;p&gt;El fichero 
&lt;a href=&#34;../soluciones/matplotlib/bancos.csv&#34;&gt;&lt;code&gt;bancos.csv&lt;/code&gt;&lt;/a&gt; contiene las cotizaciones de los principales bancos de España con : &lt;code&gt;Empresa&lt;/code&gt; (nombre de la empresa), &lt;code&gt;Apertura&lt;/code&gt; (precio de la acción a la apertura de bolsa), &lt;code&gt;Máximo&lt;/code&gt; (precio máximo de la acción durante la jornada), &lt;code&gt;Mínimo&lt;/code&gt; (precio mínimo de la acción durante la jornada), &lt;code&gt;Cierre&lt;/code&gt; (precio de la acción al cierre de bolsa), &lt;code&gt;Volumen&lt;/code&gt; (volumen al cierre de bolsa). Construir una función reciba el fichero &lt;code&gt;bancos.csv&lt;/code&gt; y cree un diagrama de líneas con las series temporales de las cotizaciones de cierre de cada banco.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/matplotlib/ejercicio7.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-8&#34;&gt;Ejercicio 8&lt;/h2&gt;
&lt;p&gt;El fichero 
&lt;a href=&#34;../soluciones/matplotlib/titanic.csv&#34;&gt;titanic.csv&lt;/a&gt; contiene información sobre los pasajeros del Titanic. Crear un dataframe con Pandas y a partir de él generar los siguientes diagramas.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Diagrama de sectores con los fallecidos y supervivientes.&lt;/li&gt;
&lt;li&gt;Histograma con las edades.&lt;/li&gt;
&lt;li&gt;Diagrama de barras con el número de personas en cada clase.&lt;/li&gt;
&lt;li&gt;Diagrama de barras con el número de personas fallecidas y supervivientes en cada clase.&lt;/li&gt;
&lt;li&gt;Diagrama de barras con el número de personas fallecidas y supervivientes acumuladas en cada clase.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/ejercicios/soluciones/matplotlib/ejercicio8.ipynb&#34; class=&#34;btn btn-info&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ficheros</title>
      <link>/docencia/python/manual/ficheros/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/manual/ficheros/</guid>
      <description>&lt;h2 id=&#34;ficheros&#34;&gt;Ficheros&lt;/h2&gt;
&lt;p&gt;Hasta ahora hemos visto como interactuar con un programa a través del teclado (entrada de datos) y la terminal (salida), pero en la mayor parte de las aplicaciones reales tendremos que leer y escribir datos en ficheros.&lt;/p&gt;
&lt;p&gt;Al utilizar ficheros para guardar los datos estos perdurarán tras la ejecución del programa, pudiendo ser consultados o utilizados más tarde.&lt;/p&gt;
&lt;p&gt;Las operaciones más habituales con ficheros son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Crear un fichero.&lt;/li&gt;
&lt;li&gt;Escribir datos en un fichero.&lt;/li&gt;
&lt;li&gt;Leer datos de un fichero.&lt;/li&gt;
&lt;li&gt;Borrar un fichero.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;creación-y-escritura-de-ficheros&#34;&gt;Creación y escritura de ficheros&lt;/h3&gt;
&lt;p&gt;Para crear un fichero nuevo se utiliza la instrucción&lt;/p&gt;
&lt;p&gt;&lt;code&gt;open(ruta, &#39;w&#39;)&lt;/code&gt; : Crea el fichero con la ruta &lt;code&gt;ruta&lt;/code&gt;, lo abre en modo escritura (el argumento &amp;lsquo;w&amp;rsquo; significa &lt;em&gt;write&lt;/em&gt;) y devuelve un objeto que lo referencia.&lt;/p&gt;
&lt;p&gt;&lt;i class=&#34;fa fa-exclamation-triangle&#34; style=&#34;color:red;&#34;&gt;&lt;/i&gt; Si el fichero indicado por la ruta ya existe en el sistema, se reemplazará por el nuevo.&lt;/p&gt;
&lt;p&gt;Una vez creado el fichero, para escribir datos en él se utiliza el método&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fichero.write(c)&lt;/code&gt; : Escribe la cadena &lt;code&gt;c&lt;/code&gt; en el fichero referenciado por &lt;code&gt;fichero&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; f = open(&#39;bienvenida.txt&#39;, &#39;w&#39;)
... f.write(&#39;¡Bienvenido a Python!&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;añadir-datos-a-un-fichero&#34;&gt;Añadir datos a un fichero&lt;/h3&gt;
&lt;p&gt;Si en lugar de crear un fichero nuevo queremos añadir datos a un fichero existente se debe utilizar la instrucción&lt;/p&gt;
&lt;p&gt;&lt;code&gt;open(ruta, &#39;a&#39;)&lt;/code&gt; : Abre el fichero con la ruta &lt;code&gt;ruta&lt;/code&gt; en modo añadir (el argumento &amp;lsquo;a&amp;rsquo; significa &lt;em&gt;append&lt;/em&gt;) y devuelve un objeto que lo referencia.&lt;/p&gt;
&lt;p&gt;Una vez abierto el fichero, se utiliza el método de escritura anterior y los datos se añaden al final del fichero.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; f = open(&#39;bienvenida.txt&#39;, &#39;a&#39;)
... f.write(&#39;\n¡Hasta pronto!&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;leer-datos-de-un-fichero&#34;&gt;Leer datos de un fichero&lt;/h3&gt;
&lt;p&gt;Para abrir un fichero en modo lectura se utiliza la instrucción&lt;/p&gt;
&lt;p&gt;&lt;code&gt;open(ruta, &#39;r&#39;)&lt;/code&gt; : Abre el fichero con la ruta &lt;code&gt;ruta&lt;/code&gt; en modo lectura (el argumento &amp;lsquo;r&amp;rsquo; significa &lt;em&gt;read&lt;/em&gt;) y devuelve un objeto que lo referencia.&lt;/p&gt;
&lt;p&gt;Una vez abierto el fichero, se puede leer todo el contenido del fichero o se puede leer línea a línea.&lt;/p&gt;
&lt;h3 id=&#34;leer-datos-de-un-fichero-1&#34;&gt;Leer datos de un fichero&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;fichero.read()&lt;/code&gt; : Devuelve todos los datos contenidos en &lt;code&gt;fichero&lt;/code&gt; como una cadena de caracteres.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fichero.readlines()&lt;/code&gt; : Devuelve una lista de cadenas de caracteres donde cada cadena es una linea del fichero referenciado por &lt;code&gt;fichero&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; f = open(&#39;bienvenida.txt&#39;, &#39;r&#39;)
... print(f.read())
¡Bienvenido a Python!
¡Hasta pronto!
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; f = open(&#39;bienvenida.txt&#39;, &#39;r&#39;)
... lineas = f.readlines()
&amp;gt;&amp;gt;&amp;gt; print(lineas)
[&#39;Bienvenido a Python!\n&#39;, &#39;¡Hasta pronto!&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;cerrar-un-fichero&#34;&gt;Cerrar un fichero&lt;/h3&gt;
&lt;p&gt;Para cerrar un fichero se utiliza el método&lt;/p&gt;
&lt;p&gt;&lt;code&gt;fichero.close()&lt;/code&gt; : Cierra el fichero referenciado por el objeto &lt;code&gt;fichero&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Cuando se termina de trabajar con un fichero conviene cerrarlo, sobre todo si se abre en modo escritura, ya que mientras está abierto en este modo no se puede abrir por otra aplicación. Si no se cierra explícitamente un fichero, Python intentará cerrarlo cuando estime que ya no se va a usar más.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; f = open(&#39;bienvenida.txt&#39;):
... print(f.read())
... f.close()  # Cierre del fichero
...
¡Bienvenido a Python!
¡Hasta pronto!
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;renombrado-y-borrado-de-un-fichero&#34;&gt;Renombrado y borrado de un fichero&lt;/h3&gt;
&lt;p&gt;Para renombra o borrar un fichero se utilizan funciones del módulo &lt;code&gt;os&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;os.rename(ruta1, ruta2)&lt;/code&gt; : Renombra y mueve el fichero de la ruta &lt;code&gt;ruta1&lt;/code&gt; a la ruta &lt;code&gt;ruta2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;os.remove(ruta)&lt;/code&gt; : Borra el fichero de la ruta &lt;code&gt;ruta&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Antes de borrar o renombra un directorio conviene comprobar que existe para que no se produzca un error. Para ello se utiliza la función&lt;/p&gt;
&lt;p&gt;&lt;code&gt;os.path.isfile(ruta)&lt;/code&gt; : Devuelve &lt;code&gt;True&lt;/code&gt; si existe un fichero en la ruta &lt;code&gt;ruta&lt;/code&gt; y &lt;code&gt;False&lt;/code&gt; en caso contrario.&lt;/p&gt;
&lt;h3 id=&#34;renombrado-y-borrado-de-un-fichero-o-directorio&#34;&gt;Renombrado y borrado de un fichero o directorio&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import os
&amp;gt;&amp;gt;&amp;gt; f = &#39;bienvenida.txt&#39;
&amp;gt;&amp;gt;&amp;gt; if os.path.isfile(f):
...     os.rename(f, &#39;saludo.txt&#39;) # renombrado
... else:
...     print(&#39;¡El fichero&#39;, f, &#39;no existe!&#39;)
...
&amp;gt;&amp;gt;&amp;gt; f = &#39;saludo.txt&#39;
&amp;gt;&amp;gt;&amp;gt; if os.path.isfile(f):
...     os.remove(f) # borrado
... else:
...     print(&#39;¡El fichero&#39;, f, &#39;no existe!&#39;)
...
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;creación-cambio-y-eliminación-de-directorios&#34;&gt;Creación, cambio y eliminación de directorios&lt;/h3&gt;
&lt;p&gt;Para trabajar con directorios también se utilizan funciones del módulo &lt;code&gt;os&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;os.listdir(ruta)&lt;/code&gt; : Devuelve una lista con los ficheros y directiorios contenidos en la ruta &lt;code&gt;ruta&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;os.mkdir(ruta)&lt;/code&gt; : Crea un nuevo directorio en la ruta &lt;code&gt;ruta&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;os.chdir(ruta)&lt;/code&gt; : Cambia el directorio actual al indicado por la ruta &lt;code&gt;ruta&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;os.getcwd()&lt;/code&gt; : Devuelve una cadena con la ruta del directorio actual.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;os.rmdir(ruta)&lt;/code&gt; : Borra el directorio de la ruta &lt;code&gt;ruta&lt;/code&gt;, siempre y cuando esté vacío.&lt;/p&gt;
&lt;h3 id=&#34;leer-un-fichero-de-internet&#34;&gt;Leer un fichero de internet&lt;/h3&gt;
&lt;p&gt;Para leer un fichero de internet hay que utilizar la función &lt;code&gt;urlopen&lt;/code&gt; del módulo &lt;code&gt;urllib.request&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;urlopen(url)&lt;/code&gt; : Abre el fichero con la &lt;code&gt;url&lt;/code&gt; especificada y devuelve un objeto del tipo fichero al que se puede acceder con los métodos de lectura de ficheros anteriores.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from urllib import request
&amp;gt;&amp;gt;&amp;gt; f = request.urlopen(&#39;https://raw.githubusercontent.com/asalber/asalber.github.io/master/README.md&#39;)
&amp;gt;&amp;gt;&amp;gt; datos = f.read()
&amp;gt;&amp;gt;&amp;gt; print(datos.decode(&#39;utf-8&#39;))
Aprende con Alf
===============

Este es el repositorio del sitio web Aprende con Alf: http://aprendeconalf.es
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Excepciones</title>
      <link>/docencia/python/manual/excepciones/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/manual/excepciones/</guid>
      <description>&lt;h2 id=&#34;control-de-errores-mediante-excepciones&#34;&gt;Control de errores mediante excepciones&lt;/h2&gt;
&lt;p&gt;Python utiliza un objeto especial llamado &lt;strong&gt;excepción&lt;/strong&gt; para controlar cualquier error que pueda ocurrir durante la ejecución de un programa.&lt;/p&gt;
&lt;p&gt;Cuando ocurre un error durante la ejecución de un programa, Python crea una excepción. Si no se controla esta excepción la ejecución del programa se detiene y se muestra el error (&lt;em&gt;traceback&lt;/em&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(1 / 0)  # Error al intentar dividir por 0.
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
ZeroDivisionError: division by zero
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;tipos-de-excepciones&#34;&gt;Tipos de excepciones&lt;/h3&gt;
&lt;p&gt;Los principales excepciones definidas en Python son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;TypeError&lt;/code&gt; : Ocurre cuando se aplica una operación o función a un dato del tipo inapropiado.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ZeroDivisionError&lt;/code&gt; : Ocurre cuando se itenta dividir por cero.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OverflowError&lt;/code&gt; : Ocurre cuando un cálculo excede el límite para un tipo de dato numérico.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IndexError&lt;/code&gt; : Ocurre cuando se intenta acceder a una secuencia con un índice que no existe.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;KeyError&lt;/code&gt; : Ocurre cuando se intenta acceder a un diccionario con una clave que no existe.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FileNotFoundError&lt;/code&gt; : Ocurre cuando se intenta acceder a un fichero que no existe en la ruta indicada.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ImportError&lt;/code&gt; : Ocurre cuando falla la importación de un módulo.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Consultar la documentaciónde Python para ver la 
&lt;a href=&#34;https://docs.python.org/3/library/exceptions.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;lista de exepciones predefinidas&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;control-de-excepciones&#34;&gt;Control de excepciones&lt;/h3&gt;
&lt;h4 id=&#34;try---except---else&#34;&gt;&lt;code&gt;try - except - else&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Para evitar la interrución de la ejecución del programa cuando se produce un error, es posible controlar la exepción que se genera con la siguiente instrucción:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;try:&lt;/code&gt;&lt;br&gt;
     &lt;em&gt;bloque código 1&lt;/em&gt;&lt;br&gt;
&lt;code&gt;except&lt;/code&gt; &lt;em&gt;excepción&lt;/em&gt;&lt;code&gt;:&lt;/code&gt;&lt;br&gt;
     &lt;em&gt;bloque código 2&lt;/em&gt;&lt;br&gt;
&lt;code&gt;else:&lt;/code&gt;&lt;br&gt;
     &lt;em&gt;bloque código 3&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Esta instrucción ejecuta el primer bloque de código y si se produce un error que genera una excepción del tipo &lt;em&gt;excepción&lt;/em&gt; entonces ejecuta el segundo bloque de código, mientras que si no se produce ningún error, se ejecuta el tercer bloque de código.&lt;/p&gt;
&lt;h3 id=&#34;control-de-excepciones-1&#34;&gt;Control de excepciones&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def division(a, b):
...     try:
...         result = a / b
...     except ZeroDivisionError:
...         print(&#39;¡No se puede dividir por cero!&#39;)
...     else:
...         print(result)
...
&amp;gt;&amp;gt;&amp;gt; division(1, 0)
¡No se puede dividir por cero!
&amp;gt;&amp;gt;&amp;gt; division(1, 2)
0.5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; try:
...     f = open(&#39;fichero.txt&#39;)  # El fichero no existe
... except FileNotFoundError:
...     print(&#39;¡El fichero no existe!&#39;)
... else:
...     print(f.read())
¡El fichero no existe!
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Programación Orientada a Objetos</title>
      <link>/docencia/python/manual/objetos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/manual/objetos/</guid>
      <description>&lt;h2 id=&#34;objetos&#34;&gt;Objetos&lt;/h2&gt;
&lt;p&gt;Python también permite &lt;em&gt;la programación orientada a objetos&lt;/em&gt;, que es un paradigma de programación en la que los datos y las operaciones que pueden realizarse con esos datos se agrupan en unidades lógicas llamadas &lt;strong&gt;objetos&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Los objetos suelen representar conceptos del dominio del programa, como un estudiante, un coche, un teléfono, etc. Los datos que describen las características del objeto se llaman &lt;strong&gt;atributos&lt;/strong&gt; y son la parte estática del objeto, mientras que las operaciones que puede realizar el objeto se llaman &lt;strong&gt;métodos&lt;/strong&gt; y son la parte dinámica del objeto.&lt;/p&gt;
&lt;p&gt;La programación orientada a objetos permite simplificar la estructura y la lógica de los grandes programas en los que intervienen muchos objetos que interactúan entre si.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ejemplo&lt;/strong&gt;. Una tarjeta de crédito puede representarse como un objeto:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Atributos: Número de la tarjeta, titular, balance, fecha de caducidad, pin, entidad emisora, estado (activa o no), etc.&lt;/li&gt;
&lt;li&gt;Métodos: Activar, pagar, renovar, anular.&lt;/li&gt;
&lt;/ul&gt;
&lt;img src=&#34;../img/tarjeta-credito.svg&#34; alt=&#34;Atributos y métodos del objeto tarjeta de crédito&#34; height=&#34;400px&#34;&gt;
&lt;h3 id=&#34;acceso-a-los-atributos-y-métodos-de-un-objeto&#34;&gt;Acceso a los atributos y métodos de un objeto&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dir(objeto)&lt;/code&gt;: Devuelve una lista con los nombres de los atributos y métodos del objeto &lt;code&gt;objeto&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para ver si un objeto tiene un determinado atributo o método se utiliza la siguiente función:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hasattr(objeto, elemento)&lt;/code&gt;: Devuelve &lt;code&gt;True&lt;/code&gt; si &lt;code&gt;elemento&lt;/code&gt; es un atributo o un método del objeto &lt;code&gt;objeto&lt;/code&gt; y &lt;code&gt;False&lt;/code&gt; en caso contrario.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Para acceder a los atributos y métodos de un objeto se pone el nombre del objeto seguido del &lt;em&gt;operador punto&lt;/em&gt; y el nombre del atributo o el método.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;objeto.atributo&lt;/code&gt;: Accede al atributo &lt;code&gt;atributo&lt;/code&gt; del objeto &lt;code&gt;objeto&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;objeto.método(parámetros)&lt;/code&gt;: Ejecuta el método &lt;code&gt;método&lt;/code&gt; del objeto &lt;code&gt;objeto&lt;/code&gt; con los parámetros que se le pasen.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;En Python los tipos de datos primitivos son también objetos que tienen asociados atributos y métodos.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ejemplo&lt;/strong&gt;. Las cadenas tienen un método &lt;code&gt;upper&lt;/code&gt; que convierte la cadena en mayúsculas. Para aplicar este método a la cadena &lt;code&gt;c&lt;/code&gt; se utiliza la instrucción &lt;code&gt;c.upper()&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; c = &#39;Python&#39;
&amp;gt;&amp;gt;&amp;gt; print(c.upper())    # Llamada al método upper del objeto c (cadena)
PYTHON
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Ejemplo&lt;/strong&gt;. Las listas tienen un método &lt;code&gt;append&lt;/code&gt; que convierte añade un elemento al final de la lista. Para aplicar este método a la lista &lt;code&gt;l&lt;/code&gt; se utiliza la instrucción &lt;code&gt;l.append(&amp;lt;elemento&amp;gt;)&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; l =  [1, 2, 3]     
&amp;gt;&amp;gt;&amp;gt; l.append(4)         # Llamada al método append del objeto l (lista)
&amp;gt;&amp;gt;&amp;gt; print(l)
[1, 2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;clases-class&#34;&gt;Clases (&lt;code&gt;class&lt;/code&gt;)&lt;/h2&gt;
&lt;p&gt;Los objetos con los mismos atributos y métodos se agrupan &lt;strong&gt;clases&lt;/strong&gt;. Las clases definen los atributos y los métodos, y por tanto, la semántica o comportamiento que tienen los objetos que pertenecen a esa clase. Se puede pensar en una clase como en un &lt;em&gt;molde&lt;/em&gt; a partir del cuál se pueden crear objetos.&lt;/p&gt;
&lt;p&gt;Para declarar una clase se utiliza la palabra clave &lt;code&gt;class&lt;/code&gt; seguida del nombre de la clase y dos puntos, de acuerdo a la siguiente sintaxis:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;class &amp;lt;nombre-clase&amp;gt;:&lt;/code&gt;&lt;br&gt;
     &lt;em&gt;&lt;code&gt;&amp;lt;atributos&amp;gt;&lt;/code&gt;&lt;/em&gt;&lt;br&gt;
     &lt;em&gt;&lt;code&gt;&amp;lt;métodos&amp;gt;&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Los atributos se definen igual que las variables mientras que los métodos se definen igual que las funciones. Tanto unos como otros tienen que estar indentados por 4 espacios en el cuerpo de la clase.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ejemplo&lt;/strong&gt; El siguiente código define la clase &lt;code&gt;Saludo&lt;/code&gt; sin atributos ni métodos. La palabra reservada &lt;code&gt;pass&lt;/code&gt; indica que la clase está vacía.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; class Saludo:
...     pass        # Clase vacía sin atributos ni métodos.
&amp;gt;&amp;gt;&amp;gt; print(Saludo)
&amp;lt;class &#39;__main__.Saludo&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;i class=&#39;fa fa-exclamation-triangle&#39; style=&#39;color:red&#39;&gt;&lt;/i&gt; Es una buena práctica comenzar el nombre de una clase con mayúsculas.&lt;/p&gt;
&lt;h3 id=&#34;clases-primitivas&#34;&gt;Clases primitivas&lt;/h3&gt;
&lt;p&gt;En Python existen clases predefinidas para los tipos de datos primitivos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int&lt;/code&gt;: Clase de los números enteros.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;float&lt;/code&gt;: Clase de los números reales.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str&lt;/code&gt;: Clase de las cadenas de caracteres.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list&lt;/code&gt;: Clase de las listas.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tuple&lt;/code&gt;: Clase de las tuplas.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dict&lt;/code&gt;: Clase de los diccionarios.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; type(1)
&amp;lt;class &#39;int&#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; type(1.5)
&amp;lt;class &#39;float&#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; type(&#39;Python&#39;)
&amp;lt;class &#39;str&#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; type([1,2,3])
&amp;lt;class &#39;list&#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; type((1,2,3))
&amp;lt;class &#39;tuple&#39;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; type({1:&#39;A&#39;, 2:&#39;B&#39;})
&amp;lt;class &#39;dict&#39;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;instanciación-de-clases&#34;&gt;Instanciación de clases&lt;/h3&gt;
&lt;p&gt;Para crear un objeto de una determinada clase se utiliza el nombre de la clase seguida de los parámetros necesarios para crear el objeto entre paréntesis.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clase(parámetros)&lt;/code&gt;: Crea un objeto de la clase &lt;code&gt;clase&lt;/code&gt; inicializado con los &lt;code&gt;parámetros&lt;/code&gt; dados.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cuando se crea un objeto de una clase se dice que el objeto es una &lt;em&gt;instancia&lt;/em&gt; de la clase.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; class Saludo:
...     pass        # Clase vacía sin atributos ni métodos.
&amp;gt;&amp;gt;&amp;gt; s = Saludo()    # Creación del objeto mediante instanciación de la clase.
&amp;gt;&amp;gt;&amp;gt; s
&amp;lt;__main__.Saludo object at 0x7fcfc7756be0&amp;gt;      # Dirección de memoria donde se crea el objeto
&amp;gt;&amp;gt;&amp;gt; type(s)
&amp;lt;class &#39;__main__.Saludo&#39;&amp;gt;     # Clase del objeto
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;definición-de-métodos&#34;&gt;Definición de métodos&lt;/h3&gt;
&lt;p&gt;Los métodos de una clase son las funciones que definen el comportamiento de los objetos de esa clase.&lt;/p&gt;
&lt;p&gt;Se definen como las funciones con la palabra reservada &lt;code&gt;def&lt;/code&gt;. La única diferencia es que su primer parámetro es especial y se denomina &lt;code&gt;self&lt;/code&gt;. Este parámetro hace siempre referencia al objeto desde donde se llama el método, de manera que para acceder a los atributos o métodos de una clase en su propia definición se puede utilizar la sintaxis &lt;code&gt;self.atributo&lt;/code&gt; o &lt;code&gt;self.método&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; class Saludo:
...     mensaje = &amp;quot;Bienvenido &amp;quot;            # Definición de un atributo
...     def saludar(self, nombre):         # Definición de un método   
...         print(self.mensaje + nombre)
...         return
... 
&amp;gt;&amp;gt;&amp;gt; s = Saludo()
&amp;gt;&amp;gt;&amp;gt; s.saludar(&#39;Alf&#39;)
Bienvenido Alf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La razón por la que existe el parámetro &lt;code&gt;self&lt;/code&gt; es porque Python traduce la llamada a un método de un objeto &lt;code&gt;objeto.método(parámetros)&lt;/code&gt; en la llamada &lt;code&gt;clase.método(objeto, parámetros)&lt;/code&gt;, es decir, se llama al método definido en la clase del objeto, pasando como primer argumento el propio objeto, que se asocia al parámetro &lt;code&gt;self&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;el-método-__init__&#34;&gt;El método &lt;code&gt;__init__&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;En la definición de una clase suele haber un método llamado &lt;code&gt;__init__&lt;/code&gt; que se conoce como &lt;em&gt;inicializador&lt;/em&gt;. Este método es un método especial que se llama cada vez que se instancia una clase y sirve para inicializar el objeto que se crea. Este método crea los atributos que deben tener todos los objetos de la clase y por tanto contiene los parámetros necesarios para su creación, pero no devuelve nada. Se invoca cada vez que se instancia un objeto de esa clase.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; class Tarjeta:
...     def __init__(self, id, cantidad = 0):    # Inicializador
            self.id = id                         # Creación del atributo id  
...         self.saldo = cantidad                # Creación del atributo saldo
...         return
...     def mostrar_saldo(self):
...         print(&#39;El saldo es&#39;, self.saldo, &#39;€&#39;)
...         return
&amp;gt;&amp;gt;&amp;gt; t = Tarjeta(&#39;1111111111&#39;, 1000)     # Creación de un objeto con argumentos             
&amp;gt;&amp;gt;&amp;gt; t.muestra_saldo()
El saldo es 1000 €
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;atributos-de-instancia-vs-atributos-de-clase&#34;&gt;Atributos de instancia vs atributos de clase&lt;/h3&gt;
&lt;p&gt;Los atributos que se crean dentro del método &lt;code&gt;__init__&lt;/code&gt; se conocen como atributos del objeto, mientras que los que se crean fuera de él se conocen como atributos de la clase. Mientras que los primeros son propios de cada objeto y por tanto pueden tomar valores distintos, los valores de los atributos de la clase son los mismos para cualquier objeto de la clase.&lt;/p&gt;
&lt;p&gt;&lt;i class=&#39;fa fa-exclamation-triangle&#39; style=&#39;color:red&#39;&gt;&lt;/i&gt;En general, no deben usarse atributos de clase, excepto para almacenar valores constantes.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; class Circulo:
...     pi = 3.14159                     # Atributo de clase
...     def __init__(self, radio):
...         self.radio = radio           # Atributo de instancia
...     def area(self):
...         return Circulo.pi * self.radio ** 2
... 
&amp;gt;&amp;gt;&amp;gt; c1 = Circulo(2)
&amp;gt;&amp;gt;&amp;gt; c2 = Circulo(3)
&amp;gt;&amp;gt;&amp;gt; print(c1.area())
12.56636
&amp;gt;&amp;gt;&amp;gt; print(c2.area())
28.27431
&amp;gt;&amp;gt;&amp;gt; print(c1.pi)
3.14159
&amp;gt;&amp;gt;&amp;gt; print(c2.pi)
3.14159
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;el-método-__str__&#34;&gt;El método &lt;code&gt;__str__&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Otro método especial es el método llamado &lt;code&gt;__str__&lt;/code&gt; que se invoca cada vez que se llama a las funciones &lt;code&gt;print&lt;/code&gt; o &lt;code&gt;str&lt;/code&gt;. Devuelve siempre una cadena que se suele utilizar para dar una descripción informal del objeto. Si no se define en la clase, cada vez que se llama a estas funciones con un objeto de la clase, se muestra por defecto la posición de memoria del objeto.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; class Tarjeta:
...     def __init__(self, numero, cantidad = 0):
...         self.numero = numero
...         self.saldo = cantidad
...         return
...     def __str__(self):
...         return &#39;Tarjeta número {} con saldo {:.2f}€&#39;.format(self.numero, str(self.saldo))
&amp;gt;&amp;gt;&amp;gt; t = tarjeta(&#39;0123456789&#39;, 1000) 
&amp;gt;&amp;gt;&amp;gt; print(t)
Tarjeta número 0123456789 con saldo 1000.00€
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;herencia&#34;&gt;Herencia&lt;/h2&gt;
&lt;p&gt;Una de las características más potentes de la programación orientada a objetos es la &lt;strong&gt;herencia&lt;/strong&gt;, que permite definir una especialización de una clase añadiendo nuevos atributos o métodos. La nueva clase se conoce como &lt;em&gt;clase hija&lt;/em&gt; y hereda los atributos y métodos de la clase original que se conoce como &lt;em&gt;clase madre&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Para crear un clase a partir de otra existente se utiliza la misma sintaxis que para definir una clase, pero poniendo detrás del nombre de la clase entre paréntesis los nombres de las clases madre de las que hereda.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ejemplo&lt;/strong&gt;. A partir de la clase &lt;code&gt;Tarjeta&lt;/code&gt; definida antes podemos crear mediante herencia otra clase &lt;code&gt;Tarjeta_Descuento&lt;/code&gt; para representar las tarjetas de crédito que aplican un descuento sobre las compras.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; class Tarjeta:
...     def __init__(self, id, cantidad = 0):
...         self.id = id
...         self.saldo = cantidad
...         return
...     def mostrar_saldo(self):       # Método de la clase Tarjeta que hereda la clase Tarjeta_descuento
...         print(&#39;El saldo es&#39;,  self.saldo, &#39;€.&#39;)
...         return
... 
&amp;gt;&amp;gt;&amp;gt; class Tarjeta_descuento(Tarjeta):
...     def __init__(self, id, descuento, cantidad = 0):
...         self.id = id
...         self.descuento = descuento
...         self.saldo = cantidad
...         return
...     def mostrar_descuento(self):   # Método exclusivo de la clase Tarjeta_descuento
...         print(&#39;Descuento de&#39;, self.descuento, &#39;% en los pagos.&#39;)
...         return
... 
&amp;gt;&amp;gt;&amp;gt; t = Tarjeta_descuento(&#39;0123456789&#39;, 2, 1000)
&amp;gt;&amp;gt;&amp;gt; t.mostrar_saldo()
El saldo es 1000 €.
&amp;gt;&amp;gt;&amp;gt; t.mostrar_descuento()
Descuento de 2 % en los pagos.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;La principal ventaja de la herencia es que evita la repetición de código y por tanto los programas son más fáciles de mantener.&lt;/p&gt;
&lt;p&gt;En el ejemplo de la tarjeta de crédito, el método &lt;code&gt;mostrar_saldo&lt;/code&gt; solo se define en la clase madre. De esta manera, cualquier cambio que se haga en el cuerpo del método en la clase madre, automáticamente se propaga a las clases hijas. Sin la herencia, este método tendría que replicarse en cada una de las clases hijas y cada vez que se hiciese un cambio en él, habría que replicarlo también en las clases hijas.&lt;/p&gt;
&lt;h3 id=&#34;jerarquía-de-clases&#34;&gt;Jerarquía de clases&lt;/h3&gt;
&lt;p&gt;A partir de una clase derivada mediante herencia se pueden crear nuevas clases hijas aplicando de nuevo la herencia. Ello da lugar a una jerarquía de clases que puede representarse como un árbol donde cada clase hija se representa como una rama que sale de la clase madre.&lt;/p&gt;
&lt;img src=&#34;../img/jerarquia-clases.svg&#34; alt=&#34;Atributos y métodos del objeto tarjeta de crédito&#34; height=&#34;400px&#34;&gt;
&lt;p&gt;Debido a la herencia, cualquier objeto creado a partir de una clase es una instancia de la clase, pero también lo es de las clases que son ancestros de esa clase en la jerarquía de clases.&lt;/p&gt;
&lt;p&gt;El siguiente comando permite averiguar si un objeto es instancia de una clase:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;isinstance(objeto, clase)&lt;/code&gt;: Devuelve &lt;code&gt;True&lt;/code&gt; si el objeto &lt;code&gt;objeto&lt;/code&gt; es una instancia de la clase &lt;code&gt;clase&lt;/code&gt; y &lt;code&gt;False&lt;/code&gt; en caso contrario.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Asumiendo la definición de las clases Tarjeta y Tarjeta_descuento anteriores.
&amp;gt;&amp;gt;&amp;gt; t1 = Tarjeta(&#39;1111111111&#39;, 0)
&amp;gt;&amp;gt;&amp;gt; t2 = t = Tarjeta_descuento(&#39;2222222222&#39;, 2, 1000)
&amp;gt;&amp;gt;&amp;gt; isinstance(t1, Tarjeta)
True
&amp;gt;&amp;gt;&amp;gt; isinstance(t1, Tarjeta_descuento)
False
&amp;gt;&amp;gt;&amp;gt; isinstance(t2, Tarjeta_descuento)
True
&amp;gt;&amp;gt;&amp;gt; isinstance(t2, Tarjeta)
True
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;sobrecarga-y-polimorfismo&#34;&gt;Sobrecarga y polimorfismo&lt;/h3&gt;
&lt;p&gt;Los objetos de una clase hija heredan los atributos y métodos de la clase madre y, por tanto, a priori tienen tienen el mismo comportamiento que los objetos de la clase madre. Pero la clase hija puede definir nuevos atributos o métodos o reescribir los métodos de la clase madre de manera que sus objetos presenten un comportamiento distinto. Esto último se conoce como &lt;strong&gt;sobrecarga&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;De este modo, aunque un objeto de la clase hija y otro de la clase madre pueden tener un mismo método, al invocar ese método sobre el objeto de la clase hija, el comportamiento puede ser distinto a cuando se invoca ese mismo método sobre el objeto de la clase madre. Esto se conoce como &lt;strong&gt;polimorfismo&lt;/strong&gt; y es otra de las características de la programación orientada a objetos.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; class Tarjeta:
...     def __init__(self, id, cantidad = 0):
...         self.id = id
...         self.saldo = cantidad
...         return
...     def mostrar_saldo(self):
...         print(&#39;El saldo es {:.2f}€.&#39;.format(self.saldo))
...         return
...     def pagar(self, cantidad):
...         self.saldo -= cantidad
...         return
&amp;gt;&amp;gt;&amp;gt; class Tarjeta_Oro(Tarjeta):
...     def __init__(self, id, descuento, cantidad = 0):
...         self.id = id
...         self.descuento = descuento
...         self.saldo = cantidad
...         return
...     def pagar(self, cantidad):
...         self.saldo -= cantidad * (1 - self.descuento / 1...00)
&amp;gt;&amp;gt;&amp;gt; t1 = Tarjeta(&#39;1111111111&#39;, 1000)
&amp;gt;&amp;gt;&amp;gt; t2 = Tarjeta_Oro(&#39;2222222222&#39;, 1, 1000)
&amp;gt;&amp;gt;&amp;gt; t1.pagar(100)
&amp;gt;&amp;gt;&amp;gt; t1.mostrar_saldo()
El saldo es 900.00€.
&amp;gt;&amp;gt;&amp;gt; t2.pagar(100)
&amp;gt;&amp;gt;&amp;gt; t2.mostrar_saldo()
El saldo es 901.00€.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;principios-de-la-programación-orientada-a-objetos&#34;&gt;Principios de la programación orientada a objetos&lt;/h2&gt;
&lt;p&gt;La programación orientada a objetos se basa en los siguientes principios:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Encapsulación&lt;/strong&gt;: Agrupar datos (atributos) y procedimientos (métodos) en unidades lógicas (objetos) y evitar maninupar los atributos accediendo directamente a ellos, usando, en su lugar, métodos para acceder a ellos.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Abstracción&lt;/strong&gt;: Ocultar al usuario de la clase los detalles de implementación de los métodos. Es decir, el usuario necesita saber &lt;em&gt;qué&lt;/em&gt; hace un método y con qué parámetros tiene que invocarlo (&lt;em&gt;interfaz&lt;/em&gt;), pero no necesita saber &lt;em&gt;cómo&lt;/em&gt; lo hace.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Herencia&lt;/strong&gt;: Evitar la duplicación de código en clases con comportamientos similares, definiendo los métodos comunes en una clase madre y los métodos particulares en clases hijas.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Polimorfismo&lt;/strong&gt;: Redefinir los métodos de la clase madre en las clases hijas cuando se requiera un comportamiento distinto. Así, un mismo método puede realizar operaciones distintas dependiendo del objeto sobre el que se aplique.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Resolver un problema siguiendo el paradigma de la programación orientada a objetos requiere un cambio de mentalidad con respecto a como se resuelve utilizando el paradigma de la programación procedimental.&lt;/p&gt;
&lt;p&gt;La programación orientada a objetos es más un proceso de modelado, donde se identifican las entidades que intervienen en el problema y su comportamiento, y se definen clases que modelizan esas entidades. Por ejemplo, las entidades que intervienen en el pago con una tarjeta de crédito serían la tarjeta, el terminal de venta, la cuenta corriente vinculada a la tarjeta, el banco, etc. Cada una de ellas daría lugar a una clase.&lt;/p&gt;
&lt;p&gt;Después se crean objetos con los datos concretos del problema y se hace que los objetos interactúen entre sí, a través de sus métodos, para resolver el problema. Cada objeto es responsable de una subtarea y colaboran entre ellos para resolver la tarea principal. Por ejemplo, la terminal de venta accede a los datos de la tarjeta y da la orden al banco para que haga un cargo en la cuenta vinculada a la tarjeta.&lt;/p&gt;
&lt;p&gt;De esta forma se pueden abordar problemas muy complejos descomponiéndolos en pequeñas tareas que son más fáciles de resolver que el problema principal (&lt;em&gt;¡divide y vencerás!&lt;/em&gt;).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Módulos</title>
      <link>/docencia/python/manual/modulos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/manual/modulos/</guid>
      <description>&lt;h2 id=&#34;módulos&#34;&gt;Módulos&lt;/h2&gt;
&lt;p&gt;El código de un programa en Python puede reutilizarse en otro importándolo. Cualquier fichero con código de Python reutilizable se conoce como &lt;em&gt;módulo&lt;/em&gt; o &lt;em&gt;librería&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Los módulos suelen contener funciones reutilizables, pero también pueden definir variables con datos simples o compuestos (listas, diccionarios, etc), o cualquier otro código válido en Python.&lt;/p&gt;
&lt;p&gt;Python permite importar un módulo completo o sólo algunas partes de él. Cuando se importa un módulo completo, el intérprete de Python ejecuta todo el código que contiene el módulo, mientras que si solo se importan algunas partes del módulo, solo se ejecutarán esas partes.&lt;/p&gt;
&lt;h3 id=&#34;importación-completa-de-módulos-import&#34;&gt;Importación completa de módulos (&lt;code&gt;import&lt;/code&gt;)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;import M&lt;/code&gt; : Ejecuta el código que contiene &lt;code&gt;M&lt;/code&gt; y crea una referencia a él, de manera que pueden invocarse un objeto o función &lt;code&gt;f&lt;/code&gt; definida en él mediante la sintaxis &lt;code&gt;M.f&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;import M as N&lt;/code&gt; : Ejecuta el código que contiene &lt;code&gt;M&lt;/code&gt; y crea una referencia a él con el nombre &lt;code&gt;N&lt;/code&gt;, de manera que pueden invocarse un objeto o función &lt;code&gt;f&lt;/code&gt; definida en él mediante la sintaxis &lt;code&gt;N.f&lt;/code&gt;. Esta forma es similar a la anterior, pero se suele usar cuando el nombre del módulo es muy largo para utilizar un alias más corto.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;importación-parcial-de-módulos-from-import&#34;&gt;Importación parcial de módulos (&lt;code&gt;from import&lt;/code&gt;)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;from M import f, g, ...&lt;/code&gt; : Ejecuta el código que contiene &lt;code&gt;M&lt;/code&gt; y crea referencias a los objetos &lt;code&gt;f, g, ...&lt;/code&gt;, de manera que pueden ser invocados por su nombre. De esta manera para invocar cualquiera de estos objetos no hace falta precederlos por el nombre del módulo, basta con escribir su nombre.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;from M import *&lt;/code&gt; : Ejecuta el código que contiene &lt;code&gt;M&lt;/code&gt; y crea referencias a todos los objetos públicos (aquellos que no empiezan por el carácter &lt;code&gt;_&lt;/code&gt;) definidos en el módulo, de manera que pueden ser invocados por su nombre.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;i class=&#34;fa fa-exclamation-triangle&#34; style=&#34;color:red;&#34;&gt;&lt;/i&gt;Cuando se importen módulos de esta manera hay que tener cuidado de que no haya coincidencias en los nombres de funciones, variables u otros objetos.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import calendar
&amp;gt;&amp;gt;&amp;gt; print(calendar.month(2019, 4))
April 2019
Mo Tu We Th Fr Sa Su
 1  2  3  4  5  6  7
 8  9 10 11 12 13 14
15 16 17 18 19 20 21
22 23 24 25 26 27 28
29 30
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from math import *
&amp;gt;&amp;gt;&amp;gt; cos(pi)
-1.0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;módulos-de-la-librería-estándar-más-importantes&#34;&gt;Módulos de la librería estándar más importantes&lt;/h3&gt;
&lt;p&gt;Python viene con una 
&lt;a href=&#34;https://docs.python.org/3/py-modindex.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;biblioteca de módulos predefinidos&lt;/a&gt; que no necesitan instalarse. Algunos de los más utilizados son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://docs.python.org/3/library/sys.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sys&lt;/a&gt;: Funciones y parámetros específicos del sistema operativo.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://docs.python.org/3/library/os.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;os&lt;/a&gt;: Interfaz con el sistema operativo.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://docs.python.org/3/library/os.path.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;os.path&lt;/a&gt;: Funciones de acceso a las rutas del sistema.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://docs.python.org/3/library/io.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;io&lt;/a&gt;: Funciones para manejo de flujos de datos y ficheros.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://docs.python.org/3/library/string.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;string&lt;/a&gt;: Funciones con cadenas de caracteres.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://docs.python.org/3/library/datetime.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;datetime&lt;/a&gt;: Funciones para fechas y tiempos.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://docs.python.org/3/library/math.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;math&lt;/a&gt;: Funciones y constantes matemáticas.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://docs.python.org/3/library/statistics.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;statistics&lt;/a&gt;: Funciones estadísticas.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://docs.python.org/3/library/random.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;random&lt;/a&gt;: Generación de números pseudo-aleatorios.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;otras-librerías-imprescindibles&#34;&gt;Otras librerías imprescindibles&lt;/h3&gt;
&lt;p&gt;Estas librerías no vienen en la distribución estándar de Python y necesitan instalarse. También puede optarse por la distribución 
&lt;a href=&#34;https://www.anaconda.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Anaconda&lt;/a&gt; que incorpora la mayoría de estas librerías.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.numpy.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NumPy&lt;/a&gt;: Funciones matemáticas avanzadas y arrays.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.scipy.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SciPy&lt;/a&gt;: Más funciones matemáticas para aplicaciones científicas.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://matplotlib.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;matplotlib&lt;/a&gt;: Análisis y representación gráfica de datos.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://pandas.pydata.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pandas&lt;/a&gt;: Funciones para el manejo y análisis de estructuras de datos.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;http://www.python-requests.org/en/master/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Request&lt;/a&gt;: Acceso a internet por http.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>La librería Datetime</title>
      <link>/docencia/python/manual/datetime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/manual/datetime/</guid>
      <description>&lt;p&gt;Para manejar fechas en Python se suele utilizar la librería &lt;code&gt;datetime&lt;/code&gt; que incorpora los tipos de datos &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt; y &lt;code&gt;datetime&lt;/code&gt; para representar fechas y funciones para manejarlas. Algunas de las operaciones más habituales que permite son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Acceder a los distintos componentes de una fecha (año, mes, día, hora, minutos, segundos y microsegundos).&lt;/li&gt;
&lt;li&gt;Convertir cadenas con formato de fecha en los tipos &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt; o &lt;code&gt;datetime&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Convertir fechas de los tipos &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt; o &lt;code&gt;datetime&lt;/code&gt; en cadenas formateadas de acuerdo a diferentes formatos de fechas.&lt;/li&gt;
&lt;li&gt;Hacer aritmética de fechas (sumar o restar fechas).&lt;/li&gt;
&lt;li&gt;Comparar fechas.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;los-tipos-de-datos-date-time-y-datetime&#34;&gt;Los tipos de datos &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt; y &lt;code&gt;datetime&lt;/code&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;date(año, mes, dia)&lt;/code&gt; : Devuelve un objeto de tipo &lt;code&gt;date&lt;/code&gt; que representa la fecha con el &lt;code&gt;año&lt;/code&gt;, &lt;code&gt;mes&lt;/code&gt; y &lt;code&gt;dia&lt;/code&gt; indicados.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;time(hora, minutos, segundos, microsegundos)&lt;/code&gt; : Devuelve un objeto de tipo &lt;code&gt;time&lt;/code&gt; que representa un tiempo la &lt;code&gt;hora&lt;/code&gt;, &lt;code&gt;minutos&lt;/code&gt;, &lt;code&gt;segundos&lt;/code&gt; y &lt;code&gt;microsegundos&lt;/code&gt; indicados.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;datetime(año, mes, dia, hora, minutos, segundos, microsegundos)&lt;/code&gt; : Devuelve un objeto de tipo &lt;code&gt;datetime&lt;/code&gt; que representa una fecha y hora con el &lt;code&gt;año&lt;/code&gt;, &lt;code&gt;mes&lt;/code&gt;, &lt;code&gt;dia&lt;/code&gt;, &lt;code&gt;hora&lt;/code&gt;, &lt;code&gt;minutos&lt;/code&gt;, &lt;code&gt;segundos&lt;/code&gt; y &lt;code&gt;microsegundos&lt;/code&gt; indicados.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from datetime import date, time, datetime
&amp;gt;&amp;gt;&amp;gt; date(2020, 12, 25)
datetime.date(2020, 12, 25)
&amp;gt;&amp;gt;&amp;gt; time(13,30,5)
datetime.time(13, 30, 5)
&amp;gt;&amp;gt;&amp;gt; datetime(2020, 12, 25, 13, 30, 5)
datetime.datetime(2020, 12, 25, 13, 30, 5)
&amp;gt;&amp;gt;&amp;gt; print(datetime(2020, 12, 25, 13, 30, 5))
2020-12-25 13:30:05
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;ndash;&lt;/p&gt;
&lt;h2 id=&#34;acceso-a-los-componentes-de-una-fecha&#34;&gt;Acceso a los componentes de una fecha&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;date.today()&lt;/code&gt; : Devuelve un objeto del tipo &lt;code&gt;date&lt;/code&gt; la fecha del sistema en el momento en el que se ejecuta.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;datetime.now()&lt;/code&gt;: Devuelve un objeto del tipo &lt;code&gt;datetime&lt;/code&gt; con la fecha y la hora del sistema en el momento exacto en el que se ejecuta.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.year&lt;/code&gt; : Devuelve el año de la fecha &lt;code&gt;d&lt;/code&gt;, puede ser del tipo &lt;code&gt;date&lt;/code&gt; o &lt;code&gt;datetime&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.month&lt;/code&gt; : Devuelve el mes de la fecha &lt;code&gt;d&lt;/code&gt;, que puede ser del tipo &lt;code&gt;date&lt;/code&gt; o &lt;code&gt;datetime&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.day&lt;/code&gt; : Devuelve el día de la fecha &lt;code&gt;d&lt;/code&gt;, que puede ser del tipo &lt;code&gt;date&lt;/code&gt; o &lt;code&gt;datetime&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d.weekday()&lt;/code&gt; : Devuelve el día de la semana de la fecha &lt;code&gt;d&lt;/code&gt;, que puede serpuede ser del tipo &lt;code&gt;date&lt;/code&gt; o &lt;code&gt;datetime&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;t.hour&lt;/code&gt; : Devuelve las horas del tiempo &lt;code&gt;t&lt;/code&gt;, que puede ser del tipo &lt;code&gt;time&lt;/code&gt; o &lt;code&gt;datetime&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;t.hour&lt;/code&gt; : Devuelve los minutos del tiempo &lt;code&gt;t&lt;/code&gt;, que puede ser del tipo &lt;code&gt;time&lt;/code&gt; o &lt;code&gt;datetime&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;t.second&lt;/code&gt; : Devuelve los segundos del tiempo &lt;code&gt;t&lt;/code&gt;, que puede ser del tipo &lt;code&gt;time&lt;/code&gt; o &lt;code&gt;datetime&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;t.microsecond&lt;/code&gt; : Devuelve los microsegundos del tiempo &lt;code&gt;t&lt;/code&gt;, que puede ser del tipo &lt;code&gt;time&lt;/code&gt; o &lt;code&gt;datetime&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from datetime import date, time, datetime
&amp;gt;&amp;gt;&amp;gt; print(date.today())
2020-04-11
&amp;gt;&amp;gt;&amp;gt; dt = datetime.now()
&amp;gt;&amp;gt;&amp;gt; dt.year
2020
&amp;gt;&amp;gt;&amp;gt; dt.month
4
&amp;gt;&amp;gt;&amp;gt; dt.day
11
&amp;gt;&amp;gt;&amp;gt; dt.hour
22
&amp;gt;&amp;gt;&amp;gt; dt.minute
5
&amp;gt;&amp;gt;&amp;gt; dt.second
45
&amp;gt;&amp;gt;&amp;gt; dt.microsecond
1338
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;conversión-de-fechas-en-cadenas-con-diferentes-formatos&#34;&gt;Conversión de fechas en cadenas con diferentes formatos&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;d.strftime(formato)&lt;/code&gt; : Devuelve la cadena que resulta de transformar la fecha &lt;code&gt;d&lt;/code&gt; con el formato indicado en la cadena &lt;code&gt;formato&lt;/code&gt;. La cadena &lt;code&gt;formato&lt;/code&gt; puede contener los siguientes marcadores de posición: &lt;code&gt;%Y&lt;/code&gt; (año completo), &lt;code&gt;%y&lt;/code&gt; (últimos dos dígitos del año), &lt;code&gt;%m&lt;/code&gt; (mes en número), &lt;code&gt;%B&lt;/code&gt; (mes en palabra), &lt;code&gt;%d&lt;/code&gt; (día), &lt;code&gt;%A&lt;/code&gt; (día de la semana), &lt;code&gt;%a&lt;/code&gt; (día de la semana abrevidado), &lt;code&gt;%H&lt;/code&gt; (hora en formato 24 horas), &lt;code&gt;%I&lt;/code&gt; (hora en formato 12 horas), &lt;code&gt;%M&lt;/code&gt; (minutos), &lt;code&gt;%S&lt;/code&gt; (segundos), &lt;code&gt;%p&lt;/code&gt; (AM o PM), &lt;code&gt;%C&lt;/code&gt; (fecha y hora completas), &lt;code&gt;%x&lt;/code&gt; (fecha completa), &lt;code&gt;%X&lt;/code&gt; (hora completa).&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from datetime import date, time, datetime
&amp;gt;&amp;gt;&amp;gt; d = datetime.now()
&amp;gt;&amp;gt;&amp;gt; print(d.strftime(&#39;%d-%m-%Y&#39;))
13-04-2020
&amp;gt;&amp;gt;&amp;gt; print(d.strftime(&#39;%A, %d %B, %y&#39;))
Monday, 13 April, 20
&amp;gt;&amp;gt;&amp;gt; print(d.strftime(&#39;%H:%M:%S&#39;))
20:55:53
&amp;gt;&amp;gt;&amp;gt; print(d.strftime(&#39;%H horas, %M minutos y %S segundos&#39;))
20 horas, 55 minutos y 53 segundos
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;conversión-de-cadenas-en-fechas&#34;&gt;Conversión de cadenas en fechas&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;strptime(s, formato)&lt;/code&gt; : Devuelve el objeto de tipo &lt;code&gt;date&lt;/code&gt;, &lt;code&gt;time&lt;/code&gt; o &lt;code&gt;datetime&lt;/code&gt; que resulta de convertir la cadena &lt;code&gt;s&lt;/code&gt; de acuerdo al formato indicado en la cadena &lt;code&gt;formato&lt;/code&gt;. La cadena &lt;code&gt;formato&lt;/code&gt; puede contener los siguientes marcadores de posición: &lt;code&gt;%Y&lt;/code&gt; (año completo), &lt;code&gt;%y&lt;/code&gt; (últimos dos dígitos del año), &lt;code&gt;%m&lt;/code&gt; (mes en número), &lt;code&gt;%B&lt;/code&gt; (mes en palabra), &lt;code&gt;%d&lt;/code&gt; (día), &lt;code&gt;%A&lt;/code&gt; (día de la semana), &lt;code&gt;%a&lt;/code&gt; (día de la semana abrevidado), &lt;code&gt;%H&lt;/code&gt; (hora en formato 24 horas), &lt;code&gt;%I&lt;/code&gt; (hora en formato 12 horas), &lt;code&gt;%M&lt;/code&gt; (minutos), &lt;code&gt;%S&lt;/code&gt; (segundos), &lt;code&gt;%p&lt;/code&gt; (AM o PM), &lt;code&gt;%C&lt;/code&gt; (fecha y hora completas), &lt;code&gt;%x&lt;/code&gt; (fecha completa), &lt;code&gt;%X&lt;/code&gt; (hora completa).&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from datetime import date, time, datetime
&amp;gt;&amp;gt;&amp;gt; datetime.strptime(&#39;15/4/2020&#39;, &#39;%d/%m/%Y&#39;)
datetime.datetime(2020, 4, 15, 0, 0)
&amp;gt;&amp;gt;&amp;gt; datetime.strptime(&#39;2020-4-15 20:50:30&#39;, &#39;%Y-%m-%d %H:%M:%S&#39;)
datetime.datetime(2020, 4, 15, 20, 50, 30)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;aritmética-de-fechas&#34;&gt;Aritmética de fechas&lt;/h2&gt;
&lt;p&gt;Para representar el tiempo transcurrido entre dos fechas se utiliza el tipo &lt;code&gt;timedelta&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;timedelta(dias, segundos, microsegundos)&lt;/code&gt; : Devuelve un objeto del tipo &lt;code&gt;timedelta&lt;/code&gt; que representa un intervalo de tiempo con los &lt;code&gt;dias&lt;/code&gt;, &lt;code&gt;segundos&lt;/code&gt; y &lt;code&gt;micorsegundos&lt;/code&gt; indicados.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d1 - d2&lt;/code&gt; : Devuelve un objeto del tipo &lt;code&gt;timedelta&lt;/code&gt; que representa el tiempo transcurrido entre las fechas &lt;code&gt;d1&lt;/code&gt; y &lt;code&gt;d2&lt;/code&gt; del tipo &lt;code&gt;datetime&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;d + delta&lt;/code&gt; : Devuelve la fecha del tipo &lt;code&gt;datetime&lt;/code&gt; que resulta de sumar a la fecha &lt;code&gt;d&lt;/code&gt; el intervalo de tiempo &lt;code&gt;delta&lt;/code&gt;, donde &lt;code&gt;delta&lt;/code&gt; es del tipo &lt;code&gt;timedelta&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; from datetime import date, time, datetime, timedelta
&amp;gt;&amp;gt;&amp;gt; d1 = datetime(2020, 1, 1)
&amp;gt;&amp;gt;&amp;gt; d1 + timedelta(31, 3600)
datetime.datetime(2020, 2, 1, 1, 0)
&amp;gt;&amp;gt;&amp;gt; datetime.now() - d1
datetime.timedelta(days=132, seconds=1826, microseconds=895590)
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>La librería Numpy</title>
      <link>/docencia/python/manual/numpy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/manual/numpy/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://www.numpy.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NumPy&lt;/a&gt; es una librería de Python especializada en el cálculo numérico y el análisis de datos, especialmente para un gran volumen de datos.&lt;/p&gt;
&lt;p&gt;Incorpora una nueva clase de objetos llamados &lt;strong&gt;arrays&lt;/strong&gt; que permite representar colecciones de datos de un mismo tipo en varias dimensiones, y funciones muy eficientes para su manipulación.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/numpy-logo.png&#34; alt=&#34;Logo librería numpy&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;la-clase-de-objetos-array&#34;&gt;La clase de objetos &lt;code&gt;array&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Un array es una estructura de datos de un mismo tipo organizada en forma de tabla o cuadrícula de distintas dimensiones.&lt;/p&gt;
&lt;p&gt;Las dimensiones de un array también se conocen como &lt;strong&gt;ejes&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/arrays.png&#34; alt=&#34;Arrays&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;creación-de-arrays&#34;&gt;Creación de arrays&lt;/h2&gt;
&lt;p&gt;Para crear un array se utiliza la siguiente función de NumPy&lt;/p&gt;
&lt;p&gt;&lt;code&gt;np.array(lista)&lt;/code&gt; : Crea un array a partir de la lista o tupla &lt;code&gt;lista&lt;/code&gt; y devuelve una referencia a él. El número de dimensiones del array dependerá de las listas o tuplas anidadas en &lt;code&gt;lista&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Para una lista de valores se crea un array de una dimensión, también conocido como &lt;strong&gt;vector&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Para una lista de listas de valores se crea un array de dos dimensiones, también conocido como &lt;strong&gt;matriz&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Para una lista de listas de listas de valores se crea un array de tres dimensiones, también conocido como &lt;strong&gt;cubo&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Y así sucesivamente. No hay límite en el número de dimensiones del array más allá de la memoria disponible en el sistema.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;i class=&#34;fa fa-exclamation-triangle&#34; style=&#34;color:red;&#34;&gt;&lt;/i&gt; Los elementos de la lista o tupla deben ser del mismo tipo.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; # Array de una dimensión
&amp;gt;&amp;gt;&amp;gt; a1 = np.array([1, 2, 3])
&amp;gt;&amp;gt;&amp;gt; print(a1)
[1 2 3]
&amp;gt;&amp;gt;&amp;gt; # Array de dos dimensiones
&amp;gt;&amp;gt;&amp;gt; a2 = np.array([[1, 2, 3], [4, 5, 6]])
&amp;gt;&amp;gt;&amp;gt; print(a2)
[[1 2 3]
 [4 5 6]]
&amp;gt;&amp;gt;&amp;gt; # Array de tres dimensiones
&amp;gt;&amp;gt;&amp;gt; a3 = np.array([[[1, 2, 3], [4, 5, 6]], [[7, 8, 9], [10, 11, 12]]])
&amp;gt;&amp;gt;&amp;gt; print(a3)
[[[ 1  2  3]
  [ 4  5  6]]

 [[ 7  8  9]
  [10 11 12]]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Otras funciones útiles que permiten generar arrays son:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;np.empty(dimensiones)&lt;/code&gt; : Crea y devuelve una referencia a un array vacío con las dimensiones especificadas en la tupla &lt;code&gt;dimensiones&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;np.zeros(dimensiones)&lt;/code&gt; : Crea y devuelve una referencia a un array con las dimensiones especificadas en la tupla &lt;code&gt;dimensiones&lt;/code&gt; cuyos elementos son todos ceros.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;np.ones(dimensiones)&lt;/code&gt; : Crea y devuelve una referencia a un array con las dimensiones especificadas en la tupla &lt;code&gt;dimensiones&lt;/code&gt; cuyos elementos son todos unos.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;np.full(dimensiones, valor)&lt;/code&gt; : Crea y devuelve una referencia a un array con las dimensiones especificadas en la tupla &lt;code&gt;dimensiones&lt;/code&gt; cuyos elementos son todos &lt;code&gt;valor&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;np.identity(n)&lt;/code&gt; : Crea y devuelve una referencia a la matriz identidad de dimensión &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;np.arange(inicio, fin, salto)&lt;/code&gt; : Crea y devuelve una referencia a un array de una dimensión cuyos elementos son la secuencia desde &lt;code&gt;inicio&lt;/code&gt; hasta &lt;code&gt;fin&lt;/code&gt; tomando valores cada &lt;code&gt;salto&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;np.linspace(inicio, fin, n)&lt;/code&gt; : Crea y devuelve una referencia a un array de una dimensión cuyos elementos son la secuencia de &lt;code&gt;n&lt;/code&gt; valores equidistantes desde &lt;code&gt;inicio&lt;/code&gt; hasta &lt;code&gt;fin&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;np.random.random(dimensiones)&lt;/code&gt; : Crea y devuelve una referencia a un array con las dimensiones especificadas en la tupla &lt;code&gt;dimensiones&lt;/code&gt; cuyos elementos son aleatorios.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print(np.zeros(3,2))
[[0. 0. 0.]
 [0. 0. 0.]]
&amp;gt;&amp;gt;&amp;gt; print(np.idendity(3))
[[1. 0. 0.]
 [0. 1. 0.]
 [0. 0. 1.]]
&amp;gt;&amp;gt;&amp;gt; print(np.arange(1, 10, 2))
[1 3 5 7 9]
&amp;gt;&amp;gt;&amp;gt; print(np.linspace(0, 10, 5))
[ 0.   2.5  5.   7.5 10. ]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;atributos-de-un-array&#34;&gt;Atributos de un array&lt;/h2&gt;
&lt;p&gt;Existen varios atributos y funciones que describen las características de un array.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a.ndi&lt;/code&gt; : Devuelve el número de dimensiones del array &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a.shape&lt;/code&gt; : Devuelve una tupla con las dimensiones del array &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a.size&lt;/code&gt; : Devuelve el número de elementos del array &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a.dtype&lt;/code&gt;: Devuelve el tipo de datos de los elementos del array &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;acceso-a-los-elementos-de-un-array&#34;&gt;Acceso a los elementos de un array&lt;/h2&gt;
&lt;p&gt;Para acceder a los elementos contenidos en un array se usan índices al igual que para acceder a los elementos de una lista, pero indicando los índices de cada dimensión separados por comas.&lt;/p&gt;
&lt;p&gt;Al igual que para listas, los índices de cada dimensión comienzn en 0.&lt;/p&gt;
&lt;p&gt;También es posible obtener subarrays con el operador dos puntos &lt;code&gt;:&lt;/code&gt; indicando el índice inicial y el siguiente al final para cada dimensión, de nuevo separados por comas.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = np.array([[1, 2, 3], [4, 5, 6]])
&amp;gt;&amp;gt;&amp;gt; print(a[1, 0])  # Acceso al elemento de la fila 1 columna 0
4
&amp;gt;&amp;gt;&amp;gt; print(a[1][0])  # Otra forma de acceder al mismo elemento
4
&amp;gt;&amp;gt;&amp;gt; print(a[:, 0:2])
[[1 2]
 [4 5]]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;filtrado-de-elementos-de-un-array&#34;&gt;Filtrado de elementos de un array&lt;/h2&gt;
&lt;p&gt;Una característica muy útil de los arrays es que es muy fácil obtener otro array con los elementos que cumplen una condición.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a[condicion]&lt;/code&gt; : Devuelve una lista con los elementos del array &lt;code&gt;a&lt;/code&gt; que cumplen la condición &lt;code&gt;condicion&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = np.array([[1, 2, 3], [4, 5, 6]])
&amp;gt;&amp;gt;&amp;gt; print(a[(a % 2 == 0)])
[2 4 6]
&amp;gt;&amp;gt;&amp;gt; print(a[(a % 2 == 0) &amp;amp;  (a &amp;gt; 2)])
[2 4]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;operaciones-matemáticas-con-arrays&#34;&gt;Operaciones matemáticas con arrays&lt;/h2&gt;
&lt;p&gt;Existen dos formas de realizar operaciones matemáticas con arrays: a nivel de elemento y a nivel de array.&lt;/p&gt;
&lt;p&gt;Las operaciones a nivel de elemento operan los elementos que ocupan la misma posición en dos arrays. Se necesitan, por tanto, dos arrays con las mismas dimensiones y el resultado es una array de la misma dimensión.&lt;/p&gt;
&lt;p&gt;Los operadores mamemáticos &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;**&lt;/code&gt; se utilizan para la realizar suma, resta, producto, cociente, resto y potencia a nivel de elemento.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = np.array([[1, 2, 3], [4, 5, 6]])
&amp;gt;&amp;gt;&amp;gt; b = np.array([[1, 1, 1], [2, 2, 2]])
&amp;gt;&amp;gt;&amp;gt; print(a + b )
[[2 3 4]
 [6 7 8]]
&amp;gt;&amp;gt;&amp;gt; print(a / b)
[[1.  2.  3. ]
 [2.  2.5 3. ]]
&amp;gt;&amp;gt;&amp;gt; print(a ** 2)
[[ 1  4  9]
 [16 25 36]]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;operaciones-matemáticas-a-nivel-de-array&#34;&gt;Operaciones matemáticas a nivel de array&lt;/h2&gt;
&lt;p&gt;Para realizar el producto matricial se utiliza el método&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a.dot(b)&lt;/code&gt; : Devuelve el array resultado del producto matricial de los arrays &lt;code&gt;a&lt;/code&gt; y &lt;code&gt;b&lt;/code&gt; siempre y cuando sus dimensiones sean compatibles.&lt;/p&gt;
&lt;p&gt;Y para trasponer una matriz se utiliza el método&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a.T&lt;/code&gt; : Devuelve el array resultado de trasponer el array &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; a = np.array([[1, 2, 3], [4, 5, 6]])
&amp;gt;&amp;gt;&amp;gt; b = np.array([[1, 1], [2, 2], [3, 3]])
&amp;gt;&amp;gt;&amp;gt; print(a.dot(b))
[[14 14]
 [32 32]]
&amp;gt;&amp;gt;&amp;gt; print(a.T)
[[1 4]
 [2 5]
 [3 6]]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>La librería Pandas</title>
      <link>/docencia/python/manual/pandas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/manual/pandas/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://pandas.pydata.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pandas&lt;/a&gt; es una librería de Python especializada en el manejo y análisis de estructuras de datos.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/pandas-logo.png&#34; alt=&#34;Logo librería Pandas&#34;&gt;&lt;/p&gt;
&lt;p&gt;Las principales características de esta librería son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Define nuevas estructuras de datos basadas en los arrays de la librería NumPy pero con nuevas funcionalidades.&lt;/li&gt;
&lt;li&gt;Permite leer y escribir fácilmente ficheros en formato CSV, Excel y bases de datos SQL.&lt;/li&gt;
&lt;li&gt;Permite acceder a los datos mediante índices o nombres para filas y columnas.&lt;/li&gt;
&lt;li&gt;Ofrece métodos para reordenar, dividir y combinar conjuntos de datos.&lt;/li&gt;
&lt;li&gt;Permite trabajar con series temporales.&lt;/li&gt;
&lt;li&gt;Realiza todas estas operaciones de manera muy eficiente.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tipos-de-datos-de-pandas&#34;&gt;Tipos de datos de Pandas&lt;/h2&gt;
&lt;p&gt;Pandas dispone de tres estructuras de datos diferentes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Series: Estructura de una dimensión.&lt;/li&gt;
&lt;li&gt;DataFrame: Estructura de dos dimensiones (tablas).&lt;/li&gt;
&lt;li&gt;Panel: Estructura de tres dimensiones (cubos).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Estas estructuras se construyen a partir de arrays de la librería NumPy, añadiendo nuevas funcionalidades.&lt;/p&gt;
&lt;h2 id=&#34;la-clase-de-objetos-series&#34;&gt;La clase de objetos Series&lt;/h2&gt;
&lt;p&gt;Son estructuras similares a los arrays de una dimensión. Son homogéneas, es decir, sus elementos tienen que ser del mismo tipo, y su tamaño es inmutable, es decir, no se puede cambiar, aunque si su contenido.&lt;/p&gt;
&lt;p&gt;Dispone de un índice que asocia un nombre a cada elemento del la serie, a través de la cuál se accede al elemento.&lt;/p&gt;
&lt;p&gt;Ejemplo. La siguiente serie contiene las asignaturas de un curso.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/pandas-series.png&#34; alt=&#34;Ejemplo de serie&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;creación-de-una-serie-a-partir-de-una-lista&#34;&gt;Creación de una serie a partir de una lista&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Series(data=lista, index=indices, dtype=tipo)&lt;/code&gt; : Devuelve un objeto de tipo Series con los datos de la lista &lt;code&gt;lista&lt;/code&gt;, las filas especificados en la lista &lt;code&gt;indices&lt;/code&gt; y el tipo de datos indicado en &lt;code&gt;tipo&lt;/code&gt;. Si no se pasa la lista de índices se utilizan como índices los enteros del 0 al $n-1$, done $n$ es el tamaño de la serie. Si no se pasa el tipo de dato se infiere.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; s = pd.Series([&#39;Matemáticas&#39;, &#39;Historia&#39;, &#39;Economía&#39;, &#39;Programación&#39;, &#39;Inglés&#39;], dtype=&#39;string&#39;)
&amp;gt;&amp;gt;&amp;gt; print(s)
0     Matemáticas
1        Historia
2        Economía
3    Programación
4          Inglés
dtype: string
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;creación-de-una-serie-a-partir-de-un-diccionario&#34;&gt;Creación de una serie a partir de un diccionario&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Series(data=diccionario, index=indices)&lt;/code&gt;: Devuelve un objeto de tipo Series con los valores del diccionario &lt;code&gt;diccionario&lt;/code&gt; y las filas especificados en la lista &lt;code&gt;indices&lt;/code&gt;. Si no se pasa la lista de índices se utilizan como índices las claves del diccionario.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; s = pd.Series({&#39;Matemáticas&#39;: 6.0,  &#39;Economía&#39;: 4.5, &#39;Programación&#39;: 8.5})
&amp;gt;&amp;gt;&amp;gt; print(s)
Matemáticas     6.0
Economía        4.5
Programación    8.5
dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;atributos-de-una-serie&#34;&gt;Atributos de una serie&lt;/h2&gt;
&lt;p&gt;Existen varias propiedades o métodos para ver las características de una serie.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;s.size&lt;/code&gt; : Devuelve el número de elementos de la serie &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;s.index&lt;/code&gt; : Devuelve una lista con los nombres de las filas del DataFrame &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;s.dtype&lt;/code&gt; : Devuelve el tipo de datos de los elementos de la serie &lt;code&gt;s&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; s = pd.Series([1, 2, 2, 3, 3, 3, 4, 4, 4, 4])
&amp;gt;&amp;gt;&amp;gt; s.size
10
&amp;gt;&amp;gt;&amp;gt; s.index
RangeIndex(start=0, stop=10, step=1)
&amp;gt;&amp;gt;&amp;gt; s.dtype
dtype(&#39;int64&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;acceso-a-los-elementos-de-una-serie&#34;&gt;Acceso a los elementos de una serie&lt;/h2&gt;
&lt;p&gt;El acceso a los elementos de un objeto del tipo Series puede ser a través de posiciones o través de índices (nombres).&lt;/p&gt;
&lt;h3 id=&#34;acceso-por-posición&#34;&gt;Acceso por posición&lt;/h3&gt;
&lt;p&gt;Se realiza de forma similar a como se accede a los elementos de un array.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s[i]&lt;/code&gt; : Devuelve el elemento que ocupa la posición &lt;code&gt;i+1&lt;/code&gt; en la serie &lt;code&gt;s&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s[posiciones]&lt;/code&gt;: Devuelve otra serie con los elementos que ocupan las posiciones de la lista &lt;code&gt;posiciones&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;acceso-por-índice&#34;&gt;Acceso por índice&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s[nombre]&lt;/code&gt; : Devuelve el elemento con el nombre &lt;code&gt;nombre&lt;/code&gt; en el índice.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s[nombres]&lt;/code&gt; : Devuelve otra serie con los elementos correspondientes a los nombres indicadas en la lista &lt;code&gt;nombres&lt;/code&gt; en el índice.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; s[1:3]
Economía        4.5
Programación    8.5
dtype: float64
&amp;gt;&amp;gt;&amp;gt; s[&#39;Economía&#39;]
4.5
&amp;gt;&amp;gt;&amp;gt; s[[&#39;Programación&#39;, &#39;Matemáticas&#39;]]
Programación    8.5
Matemáticas     6.0
dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;resumen-descriptivo-de-una-serie&#34;&gt;Resumen descriptivo de una serie&lt;/h2&gt;
&lt;p&gt;Las siguientes funciones permiten resumir varios aspectos de una serie:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s.count()&lt;/code&gt; : Devuelve el número de elementos que no son nulos ni &lt;code&gt;NaN&lt;/code&gt; en la serie &lt;code&gt;s&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.sum()&lt;/code&gt; : Devuelve la suma de los datos de la serie &lt;code&gt;s&lt;/code&gt; cuando los datos son de un tipo numérico, o la concatenación de ellos cuando son del tipo cadena &lt;code&gt;str&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.cumsum()&lt;/code&gt; : Devuelve una serie con la suma acumulada de los datos de la serie &lt;code&gt;s&lt;/code&gt; cuando los datos son de un tipo numérico.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.value_counts()&lt;/code&gt; : Devuelve una serie con la frecuencia (número de repeticiones) de cada valor de la serie &lt;code&gt;s&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.min()&lt;/code&gt; : Devuelve el menor de los datos de la serie &lt;code&gt;s&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.max()&lt;/code&gt; : Devuelve el mayor de los datos de la serie &lt;code&gt;s&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.mean()&lt;/code&gt; : Devuelve la media de los datos de la serie &lt;code&gt;s&lt;/code&gt; cuando los datos son de un tipo numérico.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.std()&lt;/code&gt; : Devuelve la desviación típica de los datos de la serie &lt;code&gt;s&lt;/code&gt; cuando los datos son de un tipo numérico.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;s.describe()&lt;/code&gt;: Devuelve una serie con un resumen descriptivo que incluye el número de datos, su suma, el mínimo, el máximo, la media, la desviación típica y los cuartiles.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; s = pd.Series([1, 1, 1, 1, 2, 2, 2, 3, 3, 4])
&amp;gt;&amp;gt;&amp;gt; s.count()
10
&amp;gt;&amp;gt;&amp;gt; s.sum()
20
&amp;gt;&amp;gt;&amp;gt; s.cumsum()
0     1
1     2
2     3
3     4
4     6
5     8
6    10
7    13
8    16
9    20
dtype: int64
&amp;gt;&amp;gt;&amp;gt; s.value_counts()
1    4
2    3
3    2
4    1
dtype: int64
&amp;gt;&amp;gt;&amp;gt; s.value_counts(normalize=True)
1    0.4
2    0.3
3    0.2
4    0.1
dtype: float64
&amp;gt;&amp;gt;&amp;gt; s.min()
1
&amp;gt;&amp;gt;&amp;gt; s.max()
4
&amp;gt;&amp;gt;&amp;gt; s.mean()
2.0
&amp;gt;&amp;gt;&amp;gt; s.std()
1.0540925533894598
&amp;gt;&amp;gt;&amp;gt; s.describe()
count    10.000000
mean      2.000000
std       1.054093
min       1.000000
25%       1.000000
50%       2.000000
75%       2.750000
max       4.000000
dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;aplicar-operaciones-a-una-serie&#34;&gt;Aplicar operaciones a una serie&lt;/h2&gt;
&lt;p&gt;Los operadores binarios (&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &lt;code&gt;/&lt;/code&gt;, etc.) pueden utilizarse con una serie, y devuelven otra serie con el resultado de aplicar la operación a cada elemento de la serie.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
s = pd.Series([1, 2, 3, 4])
&amp;gt;&amp;gt;&amp;gt; s*2
0    2
1    4
2    6
3    8
dtype: int64
&amp;gt;&amp;gt;&amp;gt; s%2
0    1
1    0
2    1
3    0
dtype: int64
&amp;gt;&amp;gt;&amp;gt; s = pd.Series([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])
&amp;gt;&amp;gt;&amp;gt; s*5
0    aaaaa
1    bbbbb
2    ccccc
dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;aplicar-funciones-a-una-serie&#34;&gt;Aplicar funciones a una serie&lt;/h2&gt;
&lt;p&gt;También es posible aplicar una función a cada elemento de la serie mediante el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s.apply(f)&lt;/code&gt; : Devuelve una serie con el resultado de aplicar la función &lt;code&gt;f&lt;/code&gt; a cada uno de los elementos de la serie &lt;code&gt;s&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; from math import log
&amp;gt;&amp;gt;&amp;gt; s = pd.Series([1, 2, 3, 4])
&amp;gt;&amp;gt;&amp;gt; s.apply(log)
0    0.000000
1    0.693147
2    1.098612
3    1.386294
dtype: float64
&amp;gt;&amp;gt;&amp;gt; s = pd.Series([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])
&amp;gt;&amp;gt;&amp;gt; s.apply(str.upper)
0    A
1    B
2    C
dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;filtrado-de-una-serie&#34;&gt;Filtrado de una serie&lt;/h2&gt;
&lt;p&gt;Para filtrar una serie y quedarse con los valores que cumplen una determinada condición se utiliza el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s[condicion]&lt;/code&gt; : Devuelve una serie con los elementos de la serie &lt;code&gt;s&lt;/code&gt; que se corresponden con el valor &lt;code&gt;True&lt;/code&gt; de la lista booleana &lt;code&gt;condicion&lt;/code&gt;. &lt;code&gt;condicion&lt;/code&gt; debe ser una lista de valores booleanos de la misma longitud que la serie.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; s = pd.Series({&#39;Matemáticas&#39;: 6.0,  &#39;Economía&#39;: 4.5, &#39;Programación&#39;: 8.5})
&amp;gt;&amp;gt;&amp;gt; print(s[s &amp;gt; 5])
Matemáticas     6.0
Programación    8.5
dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ordenar-una-serie&#34;&gt;Ordenar una serie&lt;/h2&gt;
&lt;p&gt;Para ordenar una serie se utilizan los siguientes métodos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;s.sort_values(ascending=booleano&lt;/code&gt;) : Devuelve la serie que resulta de ordenar los valores la serie &lt;code&gt;s&lt;/code&gt;. Si argumento del parámetro &lt;code&gt;ascending&lt;/code&gt; es &lt;code&gt;True&lt;/code&gt; el orden es creciente y si es &lt;code&gt;False&lt;/code&gt; decreciente.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.sort_index(ascending=booleano&lt;/code&gt;) : Devuelve la serie que resulta de ordenar el índice de la serie &lt;code&gt;s&lt;/code&gt;. Si el argumento del parámetro &lt;code&gt;ascending&lt;/code&gt; es &lt;code&gt;True&lt;/code&gt; el orden es creciente y si es &lt;code&gt;False&lt;/code&gt; decreciente.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; s = pd.Series({&#39;Matemáticas&#39;: 6.0,  &#39;Economía&#39;: 4.5, &#39;Programación&#39;: 8.5})
&amp;gt;&amp;gt;&amp;gt; print(s.sort_values())
Economía        4.5
Matemáticas     6.0
Programación    8.5
dtype: float64
&amp;gt;&amp;gt;&amp;gt; print(s.sort_index(ascending = False))
Programación    8.5
Matemáticas     6.0
Economía        4.5
dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;eliminar-los-dados-desconocidos-en-una-serie&#34;&gt;Eliminar los dados desconocidos en una serie&lt;/h2&gt;
&lt;p&gt;Los datos desconocidos representan en Pandas por &lt;code&gt;NaN&lt;/code&gt; y los nulos por &lt;code&gt;None&lt;/code&gt;. Tanto unos como otros suelen ser un problema a la hora de realizar algunos análisis de datos, por lo que es habitual eliminarlos. Para eliminarlos de una serie se utiliza el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s.dropna()&lt;/code&gt; : Elimina los datos desconocidos o nulos de la serie &lt;code&gt;s&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; import numpy as np
&amp;gt;&amp;gt;&amp;gt; s = pd.Series([&#39;a&#39;, &#39;b&#39;, None, &#39;c&#39;, np.NaN,  &#39;d&#39;])
&amp;gt;&amp;gt;&amp;gt; s
0       a
1       b
2    None
3       c
4     NaN
5       d
dtype: object
&amp;gt;&amp;gt;&amp;gt; s.dropna()
0    a
1    b
3    c
5    d
dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;la-clase-de-objetos-dataframe&#34;&gt;La clase de objetos DataFrame&lt;/h2&gt;
&lt;p&gt;Un objeto del tipo DataFrame define un conjunto de datos estructurado en forma de tabla donde cada columna es un objeto de tipo Series, es decir, todos los datos de una misma columna son del mismo tipo, y las filas son registros que pueden contender datos de distintos tipos.&lt;/p&gt;
&lt;p&gt;Un DataFrame contiene dos índices, uno para las filas y otro para las columnas, y se puede acceder a sus elementos mediante los nombres de las filas y las columnas.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ejemplo&lt;/strong&gt;. El siguiente DataFrame contiene información sobre los alumnos de un curso. Cada fila corresponde a un alumno y cada columna a una variable.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/pandas-dataframe.png&#34; alt=&#34;Ejemplo de DataFrame&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;creación-de-un-dataframe-a-partir-de-un-diccionario-de-listas&#34;&gt;Creación de un DataFrame a partir de un diccionario de listas&lt;/h2&gt;
&lt;p&gt;Para crear un DataFrame a partir de un diccionario cuyas claves son los nombres de las columnas y los valores son listas con los datos de las columnas se utiliza el método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DataFrame(data=diccionario, index=filas, columns=columnas, dtype=tipos)&lt;/code&gt; : Devuelve un objeto del tipo DataFrame cuyas columnas son las listas contenidas en los valores del diccionario &lt;code&gt;diccionario&lt;/code&gt;, los nombres de filas indicados en la lista &lt;code&gt;filas&lt;/code&gt;, los nombres de columnas indicados en la lista &lt;code&gt;columnas&lt;/code&gt; y los tipos indicados en la lista &lt;code&gt;tipos&lt;/code&gt;. La lista &lt;code&gt;filas&lt;/code&gt; tiene que tener el mismo tamaño que las listas del diccionario, mientras que las listas &lt;code&gt;columnas&lt;/code&gt; y &lt;code&gt;tipos&lt;/code&gt; tienen que tener el mismo tamaño que el diccionario. Si no se pasa la lista de filas se utilizan como nombres los enteros empezando en 0. Si no se pasa la lista de columnas se utilizan como nombres las claves del diccionario. Si no se pasa la lista de tipos, se infiere.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;i class=&#39;fa fa-exclamation-triangle&#39; style=&#34;color:red&#34;&gt;&lt;/i&gt; Los valores asociados a las claves del diccionario deben ser listas del mismo tamaño.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; datos = {&#39;nombre&#39;:[&#39;María&#39;, &#39;Luis&#39;, &#39;Carmen&#39;, &#39;Antonio&#39;],
... &#39;edad&#39;:[18, 22, 20, 21],
... &#39;grado&#39;:[&#39;Economía&#39;, &#39;Medicina&#39;, &#39;Arquitectura&#39;, &#39;Economía&#39;],
... &#39;correo&#39;:[&#39;maria@gmail.com&#39;, &#39;luis@yahoo.es&#39;, &#39;carmen@gmail.com&#39;, &#39;antonio@gmail.com&#39;]
... }
&amp;gt;&amp;gt;&amp;gt; df = pd.DataFrame(datos)
&amp;gt;&amp;gt;&amp;gt; print(df)
    nombre  edad         grado             correo
0    María    18      Economía    maria@gmail.com
1     Luis    22      Medicina      luis@yahoo.es
2   Carmen    20  Arquitectura   carmen@gmail.com
3  Antonio    21      Economía  antonio@gmail.com
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;creación-de-un-dataframe-a-partir-de-una-lista-de-listas&#34;&gt;Creación de un DataFrame a partir de una lista de listas&lt;/h2&gt;
&lt;p&gt;Para crear un DataFrame a partir de una lista de listas con los datos de las columnas se utiliza el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DataFrame(data=listas, index=filas, columns=columnas, dtype=tipos)&lt;/code&gt; : Devuelve un objeto del tipo DataFrame cuyas columnas son los valores de las listas de la lista &lt;code&gt;listas&lt;/code&gt;, los nombres de filas indicados en la lista &lt;code&gt;filas&lt;/code&gt;, los nombres de columnas indicados en la lista &lt;code&gt;columnas&lt;/code&gt; y los tipos indicados en la lista &lt;code&gt;tipos&lt;/code&gt;. La lista &lt;code&gt;filas&lt;/code&gt;, tiene que tener el mismo tamaño que la lista &lt;code&gt;listas&lt;/code&gt; mientras que las listas &lt;code&gt;columnas&lt;/code&gt; y &lt;code&gt;tipos&lt;/code&gt; tienen que tener el mismo tamaño que las listas anidadas en &lt;code&gt;listas&lt;/code&gt;. Si no se pasa la lista de filas o de columnas se utilizan enteros empezando en 0. Si no se pasa la lista de tipos, se infiere.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;i class=&#39;fa fa-exclamation-triangle&#39; style=&#34;color:red&#34;&gt;&lt;/i&gt; Si las listas anidadas en &lt;code&gt;listas&lt;/code&gt; no tienen el mismo tamaño, las listas menores se rellenan con valores &lt;code&gt;NaN&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.DataFrame([[&#39;María&#39;, 18], [&#39;Luis&#39;, 22], [&#39;Carmen&#39;, 20]], columns=[&#39;Nombre&#39;, &#39;Edad&#39;])
&amp;gt;&amp;gt;&amp;gt; print(df)
   Nombre   Edad
0   María     18
1    Luis     22
2  Carmen     20
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;creación-de-un-dataframe-a-partir-de-una-lista-de-diccionarios&#34;&gt;Creación de un DataFrame a partir de una lista de diccionarios&lt;/h2&gt;
&lt;p&gt;Para crear un DataFrame a partir de una lista de diccionarios con los datos de las filas, se utiliza el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DataFrame(data=diccionarios, index=filas, columns=columnas, dtype=tipos)&lt;/code&gt; : Devuelve un objeto del tipo DataFrame cuyas filas contienen los valores de los diccionarios de la lista &lt;code&gt;diccionarios&lt;/code&gt;, los nombres de filas indicados en la lista &lt;code&gt;filas&lt;/code&gt;, los nombres de columnas indicados en la lista &lt;code&gt;columnas&lt;/code&gt; y los tipos indicados en la lista &lt;code&gt;tipos&lt;/code&gt;. La lista &lt;code&gt;filas&lt;/code&gt; tiene que tener el mismo tamaño que la lista &lt;code&gt;lista&lt;/code&gt;. Si no se pasa la lista de filas se utilizan enteros empezando en 0. Si no se pasa la lista de columnas se utilizan las claves de los diccionarios. Si no se pasa la lista de tipos, se infiere.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;i class=&#39;fa fa-exclamation-triangle&#39; style=&#34;color:red&#34;&gt;&lt;/i&gt; Si los diccionarios no tienen las mismas claves, las claves que no aparecen en el diccionario se rellenan con valores &lt;code&gt;NaN&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.DataFrame([{&#39;Nombre&#39;:&#39;María&#39;, &#39;Edad&#39;:18}, {&#39;Nombre&#39;:&#39;Luis&#39;, &#39;Edad&#39;:22}, {&#39;Nombre&#39;:&#39;Carmen&#39;}])
&amp;gt;&amp;gt;&amp;gt; print(df)
0   María  18.0
1    Luis  22.0
2  Carmen   NaN
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;creación-de-un-dataframe-a-partir-de-un-array&#34;&gt;Creación de un DataFrame a partir de un array&lt;/h2&gt;
&lt;p&gt;Para crear un DataFrame a partir de un array de NumPy se utiliza el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DataFrame(data=array, index=filas, columns=columnas, dtype=tipo)&lt;/code&gt; : Devuelde un objeto del tipo DataFrame cuyas filas y columnas son las del array &lt;code&gt;array&lt;/code&gt;, los nombres de filas indicados en la lista &lt;code&gt;filas&lt;/code&gt;, los nombres de columnas indicados en la lista &lt;code&gt;columnas&lt;/code&gt; y el tipo indicado en &lt;code&gt;tipo&lt;/code&gt;. La lista &lt;code&gt;filas&lt;/code&gt; tiene que tener el mismo tamaño que el número de filas del array y la lista &lt;code&gt;columnas&lt;/code&gt; el mismo tamaño que el número de columnas del array. Si no se pasa la lista de filas se utilizan enteros empezando en 0. Si no se pasa la lista de columnas se utilizan las claves de los diccionarios. Si no se pasa la lista de tipos, se infiere.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.DataFrame(np.random.randn(4, 3), columns=[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;])
&amp;gt;&amp;gt;&amp;gt; print(df)
          a         b         c
0 -1.408238  0.644706  1.077434
1 -0.279264 -0.249229  1.019137
2 -0.805470 -0.629498  0.935066
3  0.236936 -0.431673 -0.177379
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;creación-de-un-dataframe-a-partir-de-un-fichero-csv-o-excel&#34;&gt;Creación de un DataFrame a partir de un fichero CSV o Excel&lt;/h2&gt;
&lt;p&gt;Dependiendo del tipo de fichero, existen distintas funciones para importar un DataFrame desde un fichero.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;read_csv(fichero.csv, sep=separador, header=n, index_col=m, na_values=no-validos, decimal=separador-decimal)&lt;/code&gt; : Devuelve un objeto del tipo DataFrame con los datos del fichero CSV &lt;code&gt;fichero.csv&lt;/code&gt; usando como separador de los datos la cadena &lt;code&gt;separador&lt;/code&gt;. Como nombres de columnas se utiliza los valores de la fila &lt;code&gt;n&lt;/code&gt; y como nombres de filas los valores de la columna &lt;code&gt;m&lt;/code&gt;. Si no se indica &lt;code&gt;m&lt;/code&gt; se utilizan como nombres de filas los enteros empezando en 0. Los valores incluídos en la lista &lt;code&gt;no-validos&lt;/code&gt; se convierten en &lt;code&gt;NaN&lt;/code&gt;. Para los datos numéricos se utiliza como separador de decimales el carácter indicado en &lt;code&gt;separador-decimal&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;read_excel(fichero.xlsx, sheet_name=hoja, header=n, index_col=m, na_values=no-validos, decimal=separador-decimal)&lt;/code&gt; : Devuelve un objeto del tipo DataFrame con los datos de la hoja de cálculo &lt;code&gt;hoja&lt;/code&gt; del fichero Excel &lt;code&gt;fichero.xlsx&lt;/code&gt;. Como nombres de columnas se utiliza los valores de la fila &lt;code&gt;n&lt;/code&gt; y como nombres de filas los valores de la columna &lt;code&gt;m&lt;/code&gt;. Si no se indica &lt;code&gt;m&lt;/code&gt; se utilizan como nombres de filas los enteros empezando en 0. Los valores incluídos en la lista &lt;code&gt;no-validos&lt;/code&gt; se convierten en &lt;code&gt;NaN&lt;/code&gt;. Para los datos numéricos se utiliza como separador de decimales el carácter indicado en &lt;code&gt;separador-decimal&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; # Importación del fichero datos-colesteroles.csv
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesteroles.csv&#39;, sep=&#39;;&#39;, decimal=&#39;,&#39;)
&amp;gt;&amp;gt;&amp;gt; print(df.head())
                              nombre  edad sexo    peso    altura  colesterol
0       José Luis Martínez Izquierdo    18    H    85.0    1.79         182.0
1                     Rosa Díaz Díaz    32    M    65.0    1.73         232.0
2              Javier García Sánchez    24    H     NaN    1.81         191.0
3                Carmen López Pinzón    35    M    65.0    1.70         200.0
4               Marisa López Collado    46    M    51.0    1.58         148.0
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;exportación-de-ficheros&#34;&gt;Exportación de ficheros&lt;/h2&gt;
&lt;p&gt;También existen funciones para exportar un DataFrame a un fichero con diferentes formatos.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.to_csv(fichero.csv, sep=separador, columns=booleano, index=booleano)&lt;/code&gt; : Exporta el DataFrame &lt;code&gt;df&lt;/code&gt; al fichero &lt;code&gt;fichero.csv&lt;/code&gt; en formato CSV usando como separador de los datos la cadena &lt;code&gt;separador&lt;/code&gt;. Si se pasa &lt;code&gt;True&lt;/code&gt; al parámetro &lt;code&gt;columns&lt;/code&gt; se exporta también la fila con los nombres de columnas y si se pasa &lt;code&gt;True&lt;/code&gt; al parámetro &lt;code&gt;index&lt;/code&gt; se exporta también la columna con los nombres de las filas.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.to_excel(fichero.xlsx, sheet_name = hoja, columns=booleano, index=booleano)&lt;/code&gt; : Exporta el DataFrame &lt;code&gt;df&lt;/code&gt; a la hoja de cálculo &lt;code&gt;hoja&lt;/code&gt; del fichero &lt;code&gt;fichero.xlsx&lt;/code&gt; en formato Excel. Si se pasa &lt;code&gt;True&lt;/code&gt; al parámetro &lt;code&gt;columns&lt;/code&gt; se exporta también la fila con los nombres de columnas y si se pasa &lt;code&gt;True&lt;/code&gt; al parámetro &lt;code&gt;index&lt;/code&gt; se exporta también la columna con los nombres de las filas.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;atributos-de-un-dataframe&#34;&gt;Atributos de un DataFrame&lt;/h2&gt;
&lt;p&gt;Existen varias propiedades o métodos para ver las características de un DataFrame.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.info()&lt;/code&gt; : Devuelve información (número de filas, número de columnas, índices, tipo de las columnas y memoria usado) sobre el DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.shape&lt;/code&gt; : Devuelve una tupla con el número de filas y columnas del DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.size&lt;/code&gt; : Devuelve el número de elementos del DataFrame.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.columns&lt;/code&gt; : Devuelve una lista con los nombres de las columnas del DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.index&lt;/code&gt; : Devuelve una lista con los nombres de las filas del DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.dtypes&lt;/code&gt; : Devuelve una serie con los tipos de datos de las columnas del DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.head(n)&lt;/code&gt; : Devuelve las &lt;code&gt;n&lt;/code&gt; primeras filas del DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.tail(n)&lt;/code&gt; : Devuelve las &lt;code&gt;n&lt;/code&gt; últimas filas del DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; df.info()
&amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt;
RangeIndex: 14 entries, 0 to 13
Data columns (total 6 columns):
 #   Column      Non-Null Count  Dtype  
---  ------      --------------  -----  
 0   nombre      14 non-null     object 
 1   edad        14 non-null     int64  
 2   sexo        14 non-null     object 
 3   peso        13 non-null     float64
 4   altura      14 non-null     float64
 5   colesterol  13 non-null     float64
dtypes: float64(3), int64(1), object(2)
memory usage: 800.0+ bytes
&amp;gt;&amp;gt;&amp;gt; df.shape
(14, 6)
&amp;gt;&amp;gt;&amp;gt; df.size
84
&amp;gt;&amp;gt;&amp;gt; df.columns
Index([&#39;nombre&#39;, &#39;edad&#39;, &#39;sexo&#39;, &#39;peso&#39;, &#39;altura&#39;, &#39;colesterol&#39;], dtype=&#39;object&#39;)
&amp;gt;&amp;gt;&amp;gt; df.index
RangeIndex(start=0, stop=14, step=1)
&amp;gt;&amp;gt;&amp;gt; df.dtypes
nombre         object
edad            int64
sexo           object
peso          float64
altura        float64
colesterol    float64
dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;renombrar-los-nombres-de-las-filas-y-columnas&#34;&gt;Renombrar los nombres de las filas y columnas&lt;/h2&gt;
&lt;p&gt;Para cambiar el nombre de las filas y las columnas de un DataFrame se utiliza el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df.rename(columns=columnas, index=filas)&lt;/code&gt;: Devuelve el DataFrame que resulta de renombrar las columnas indicadas en las claves del diccionario &lt;code&gt;columnas&lt;/code&gt; con sus valores y las filas indicadas en las claves del diccionario &lt;code&gt;filas&lt;/code&gt; con sus valores en el DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; print(df.rename(columns={&#39;nombre&#39;:&#39;nombre y apellidos&#39;, &#39;altura&#39;:&#39;estatura&#39;}, index={0:1000, 1:1001, 2:1002}))
                    nombre y apellidos  edad sexo    peso  estatura    colesterol
1000      José Luis Martínez Izquierdo    18    H    85.0      1.79         182.0
1001                    Rosa Díaz Díaz    32    M    65.0      1.73         232.0
1002             Javier García Sánchez    24    H     NaN      1.81         191.0
3                  Carmen López Pinzón    35    M    65.0      1.70         200.0
4                 Marisa López Collado    46    M    51.0      1.58         148.0
...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;reindexar-un-dataframe&#34;&gt;Reindexar un DataFrame&lt;/h2&gt;
&lt;p&gt;Para reordenar los índices de las filas y las columnas de un DataFrame, así como añadir o eliminar índices, se utiliza el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df.reindex(index=filas, columns=columnas, fill_value=relleno)&lt;/code&gt; : Devuelve el DataFrame que resulta de tomar del DataFrame &lt;code&gt;df&lt;/code&gt; las filas con nombres en la lista &lt;code&gt;filas&lt;/code&gt; y las columnas con nombres en la lista &lt;code&gt;columnas&lt;/code&gt;. Si alguno de los nombres indicados en &lt;code&gt;filas&lt;/code&gt; o &lt;code&gt;columnas&lt;/code&gt; no existía en el DataFrame &lt;code&gt;df&lt;/code&gt;, se crean filan o columnas nuevas rellenas con el valor &lt;code&gt;relleno&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; print(df.reindex(index=[4, 3, 1], columns=[&#39;nombre&#39;, &#39;tensión&#39;, &#39;colesterol&#39;]))
                  nombre  tensión  colesterol
4   Marisa López Collado      NaN       148.0
3    Carmen López Pinzón      NaN       200.0
1         Rosa Díaz Díaz      NaN       232.0
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;acceso-a-los-elementos-de-un-dataframe&#34;&gt;Acceso a los elementos de un DataFrame&lt;/h2&gt;
&lt;p&gt;El acceso a los datos de un DataFrame se puede hacer a través de posiciones o través de los nombres de las filas y columnas.&lt;/p&gt;
&lt;h2 id=&#34;accesos-mediante-posiciones&#34;&gt;Accesos mediante posiciones&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.iloc[i, j]&lt;/code&gt; : Devuelve el elemento que se encuentra en la fila &lt;code&gt;i&lt;/code&gt; y la columna &lt;code&gt;j&lt;/code&gt; del DataFrame &lt;code&gt;df&lt;/code&gt;. Pueden indicarse secuencias de índices para obtener partes del DataFrame.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.iloc[filas, columnas]&lt;/code&gt; : Devuelve un DataFrame con los elementos de las filas de la lista &lt;code&gt;filas&lt;/code&gt; y de las columnas de la lista &lt;code&gt;columnas&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.iloc[i]&lt;/code&gt; : Devuelve una serie con los elementos de la fila &lt;code&gt;i&lt;/code&gt; del DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; print(df.iloc[1, 3])
65
&amp;gt;&amp;gt;&amp;gt; print(df.iloc[1, :2])
nombre     Rosa Díaz Díaz
edad                   32
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;acceso-a-los-elementos-mediante-nombres&#34;&gt;Acceso a los elementos mediante nombres&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df.loc[fila, columna]&lt;/code&gt; : Devuelve el elemento que se encuentra en la fila con nombre &lt;code&gt;fila&lt;/code&gt; y la columna de con nombre &lt;code&gt;columna&lt;/code&gt; del DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;df.loc[filas, columnas]&lt;/code&gt; : Devuelve un DataFrame con los elemento que se encuentra en las filas con los nombres de la lista &lt;code&gt;filas&lt;/code&gt; y las columnas con los nombres de la lista &lt;code&gt;columnas&lt;/code&gt; del DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df[columna]&lt;/code&gt; : Devuelve una serie con los elementos de la columna de nombre &lt;code&gt;columna&lt;/code&gt; del DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.columna&lt;/code&gt; : Devuelve una serie con los elementos de la columna de nombre &lt;code&gt;columna&lt;/code&gt; del DataFrame &lt;code&gt;df&lt;/code&gt;. Es similar al método anterior pero solo funciona cuando el nombre de la columna no tiene espacios en blanco.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; print(df.loc[2, &#39;colesterol&#39;])
191
&amp;gt;&amp;gt;&amp;gt; print(df.loc[:3, (&#39;colesterol&#39;,&#39;peso&#39;)])
     colesterol    peso
1         232.0    65.0
2         191.0     NaN
3         200.0    65.0
&amp;gt;&amp;gt;&amp;gt; print(df[&#39;colesterol&#39;])
0     182.0
1     232.0
2     191.0
3     200.0
...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;operaciones-con-las-columnas-de-un-dataframe&#34;&gt;Operaciones con las columnas de un DataFrame&lt;/h2&gt;
&lt;h2 id=&#34;añadir-columnas-a-un-dataframe&#34;&gt;Añadir columnas a un DataFrame&lt;/h2&gt;
&lt;p&gt;El procedimiento para añadir una nueva columna a un DataFrame es similar al de añadir un nuevo par a un diccionario, pero pasando los valores de la columna en una lista o serie.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;d[nombre] = lista&lt;/code&gt;: Añade al DataFrame &lt;code&gt;df&lt;/code&gt; una nueva columna con el nombre &lt;code&gt;nombre&lt;/code&gt; y los valores de la lista &lt;code&gt;lista&lt;/code&gt;. La lista debe tener el mismo tamaño que el número de filas de &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;d[nombre] = serie&lt;/code&gt;: Añade al DataFrame &lt;code&gt;df&lt;/code&gt; una nueva columna con el nombre &lt;code&gt;nombre&lt;/code&gt; y los valores de la serie &lt;code&gt;serie&lt;/code&gt;. Si el tamaño de la serie es menor que el número de filas de &lt;code&gt;df&lt;/code&gt; se rellena con valores &lt;code&gt;NaN&lt;/code&gt; mientras que si es mayor se recorta.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; df[&#39;diabetes&#39;] = pd.Series([False, False, True, False, True])
&amp;gt;&amp;gt;&amp;gt; print(df)
                              nombre  edad sexo    peso  altura    colesterol diabetes
0       José Luis Martínez Izquierdo    18    H    85.0    1.79         182.0    False
1                     Rosa Díaz Díaz    32    M    65.0    1.73         232.0    False
2              Javier García Sánchez    24    H   NaN.0    1.81         191.0     True
3                Carmen López Pinzón    35    M    65.0    1.70         200.0    False
4               Marisa López Collado    46    M    51.0    1.58         148.0     True
5                  Antonio Ruiz Cruz    68    H    66.0    1.74         249.0      NaN
...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;operaciones-sobre-columnas&#34;&gt;Operaciones sobre columnas&lt;/h2&gt;
&lt;p&gt;Puesto que los datos de una misma columna de un DataFrame son del mismo tipo, es fácil aplicar la misma operación a todos los elementos de la columna.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; print(df[&#39;altura&#39;]*100)
0     179
1     173
2     181
...

&amp;gt;&amp;gt;&amp;gt; print(df[&#39;sexo&#39;]==&#39;M&#39;)
0     False
1      True
2     False
...

&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;aplicar-funciones-a-columnas&#34;&gt;Aplicar funciones a columnas&lt;/h2&gt;
&lt;p&gt;Para aplicar funciones a todos los elementos de una columna se utiliza el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df[columna].apply(f)&lt;/code&gt; : Devuelve una serie con los valores que resulta de aplicar la función &lt;code&gt;f&lt;/code&gt; a los elementos de la columna con nombre &lt;code&gt;columna&lt;/code&gt; del DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; from math import log
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; print(df[&#39;altura&#39;].apply(log))
0     0.582216
1     0.548121
2     0.593327
...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;convertir-una-columna-al-tipo-datetime&#34;&gt;Convertir una columna al tipo &lt;code&gt;datetime&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;A menudo una columna contiene cadenas que representan fechas. Para convertir estas cadenas al tipo &lt;code&gt;datetime&lt;/code&gt; se utiliza el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;to_datetime(columna, formato)&lt;/code&gt;: Devuelve la serie que resulta de convertir las cadenas de la columna con el nombre &lt;code&gt;columna&lt;/code&gt; en fechas del tipo &lt;code&gt;datetime&lt;/code&gt; con el formado especificado en &lt;code&gt;formato&lt;/code&gt;. (
&lt;a href=&#34;../datetime/&#34;&gt;Ver librería datetime&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.DataFrame({&#39;Name&#39;: [&#39;María&#39;, &#39;Carlos&#39;, &#39;Carmen&#39;], &#39;Nacimiento&#39;:[&#39;05-03-2000&#39;, &#39;20-05-2001&#39;, &#39;10-12-1999&#39;]})
&amp;gt;&amp;gt;&amp;gt; print(pd.to_datetime(df.Nacimiento, format = &#39;%d-%m-%Y&#39;))
0   2000-03-05
1   2001-05-20
2   1999-12-10
Name: Nacimiento, dtype: datetime64[ns]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;resumen-descriptivo-de-un-dataframe&#34;&gt;Resumen descriptivo de un DataFrame&lt;/h2&gt;
&lt;p&gt;Al igual que para las series, los siguientes métodos permiten resumir la información de un DataFrame por columnas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df.count()&lt;/code&gt; : Devuelve una serie número de elementos que no son nulos ni &lt;code&gt;NaN&lt;/code&gt; en cada columna del DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;df.sum()&lt;/code&gt; : Devuelve una serie con la suma de los datos de las columnas del DataFrame &lt;code&gt;df&lt;/code&gt; cuando los datos son de un tipo numérico, o la concatenación de ellos cuando son del tipo cadena &lt;code&gt;str&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;df.cumsum()&lt;/code&gt; : Devuelve un DataFrame con la suma acumulada de los datos de las columnas del DataFrame &lt;code&gt;df&lt;/code&gt; cuando los datos son de un tipo numérico.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;df.min()&lt;/code&gt; : Devuelve una serie con los menores de los datos de las columnas del DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;df.max()&lt;/code&gt; : Devuelve una serie con los mayores de los datos de las columnas del DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;df.mean()&lt;/code&gt; : Devuelve una serie con las media de los datos de las columnas del DataFrame &lt;code&gt;df&lt;/code&gt; cuando los datos son de un tipo numérico.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;df.std()&lt;/code&gt; : Devuelve una serie con las desviaciones típicas de los datos de las columnas del DataFrame &lt;code&gt;df&lt;/code&gt; cuando los datos son de un tipo numérico.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;df.describe(include = tipo)&lt;/code&gt; : Devuelve un DataFrame con un resumen estadístico de las columnas del DataFrame &lt;code&gt;df&lt;/code&gt; del tipo &lt;code&gt;tipo&lt;/code&gt;. Para los datos numéricos (&lt;code&gt;number&lt;/code&gt;) se calcula la media, la desviación típica, el mínimo, el máximo y los cuartiles de las columnas numéricas. Para los datos no numéricos (&lt;code&gt;object&lt;/code&gt;) se calcula el número de valores, el número de valores distintos, la moda y su frecuencia. Si no se indica el tipo solo se consideran las columnas numéricas.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; print(df.describe())
            edad        peso     altura  colesterol
count  14.000000   13.000000  14.000000   13.000000
mean   38.214286   70.923077   1.768571  220.230769
std    15.621379   16.126901   0.115016   39.847948
min    18.000000   51.000000   1.580000  148.000000
25%    24.750000   61.000000   1.705000  194.000000
50%    35.000000   65.000000   1.755000  210.000000
75%    49.750000   78.000000   1.840000  249.000000
max    68.000000  109.000000   1.980000  280.000000
&amp;gt;&amp;gt;&amp;gt; print(df.describe(include=&#39;object&#39;))
                          nombre sexo
count                         14   14
unique                        14    2
top      Antonio Fernández Ocaña    H
freq                           1    8
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;eliminar-columnas-de-un-dataframe&#34;&gt;Eliminar columnas de un DataFrame&lt;/h2&gt;
&lt;p&gt;Para eliminar columnas de un DataFrame se utilizan los siguientes métodos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;del d[nombre]&lt;/code&gt; : Elimina la columna con nombre &lt;code&gt;nombre&lt;/code&gt; del DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.pop(nombre)&lt;/code&gt; : Elimina la columna con nombre &lt;code&gt;nombre&lt;/code&gt; del DataFrame &lt;code&gt;df&lt;/code&gt; y la devuelve como una serie.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; edad = df.pop(&#39;edad&#39;)
&amp;gt;&amp;gt;&amp;gt; print(df)
                              nombre    sexo  peso  altura    colesterol
0       José Luis Martínez Izquierdo     H    85.0    1.79         182.0
1                     Rosa Díaz Díaz     M    65.0    1.73         232.0
2              Javier García Sánchez     H     
NaN    1.81         191.0
...
print(edad)
0     18
1     32
2     24
...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;operaciones-con-las-filas-de-un-dataframe&#34;&gt;Operaciones con las filas de un DataFrame&lt;/h2&gt;
&lt;h2 id=&#34;añadir-una-fila-a-un-dataframe&#34;&gt;Añadir una fila a un DataFrame&lt;/h2&gt;
&lt;p&gt;Para añadir una fila a un DataFrame se utiliza el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df.append(serie, ignore_index=True)&lt;/code&gt; : Devuelve el DataFrame que resulta de añadir una fila al DataFrame &lt;code&gt;df&lt;/code&gt; con los valores de la serie &lt;code&gt;serie&lt;/code&gt;. Los nombres del índice de la serie deben corresponderse con los nombres de las columnas de &lt;code&gt;df&lt;/code&gt;. Si no se pasa el parámetro &lt;code&gt;ignore_index&lt;/code&gt; entonces debe pasarse el parámetro &lt;code&gt;name&lt;/code&gt; a la serie, donde su argumento será el nombre de la nueva fila.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; df = df.append(pd.Series([&#39;Carlos Rivas&#39;, 28, &#39;H&#39;, 89.0, 1.78, 245.0], index=[&#39;nombre&#39;,&#39;edad&#39;,&#39;sexo&#39;,&#39;peso&#39;,&#39;altura&#39;,&#39;colesterol&#39;]), ignore_index=True)
&amp;gt;&amp;gt;&amp;gt; print(df.tail())
                              nombre  edad sexo    peso  altura    colesterol
10             Macarena Álvarez Luna    53    M    55.0    1.62         262.0
11        José María de la Guía Sanz    58    H    78.0    1.87         198.0
12   Miguel Angel Cuadrado Gutiérrez    27    H   109.0    1.98         210.0
13             Carolina Rubio Moreno    20    M    61.0    1.77         194.0
14                      Carlos Rivas    28    H    89.0    1.78         245.0
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;eliminar-filas-de-un-dataframe&#34;&gt;Eliminar filas de un DataFrame&lt;/h2&gt;
&lt;p&gt;Para eliminar filas de un DataFrame se utilizan el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df.drop(filas)&lt;/code&gt; : Devuelve el DataFrame que resulta de eliminar las filas con los nombres indicados en la lista &lt;code&gt;filas&lt;/code&gt; del DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; print(df.drop([1, 3]))
                              nombre  edad sexo   peso  altura  colesterol
0       José Luis Martínez Izquierdo    18    H   85.0    1.79       182.0
2              Javier García Sánchez    24    H    NaN    1.81       191.0
4               Marisa López Collado    46    M   51.0    1.58       148.0
...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;filtrado-de-las-filas-de-un-dataframe&#34;&gt;Filtrado de las filas de un DataFrame&lt;/h2&gt;
&lt;p&gt;Una operación bastante común con un DataFrame es obtener las filas que cumplen una determinada condición.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df[condicion]&lt;/code&gt; : Devuelve un DataFrame con las filas del DataFrame &lt;code&gt;df&lt;/code&gt; que se corresponden con el valor &lt;code&gt;True&lt;/code&gt; de la lista booleana &lt;code&gt;condicion&lt;/code&gt;. &lt;code&gt;condicion&lt;/code&gt; debe ser una lista de valores booleanos de la misma longitud que el número de filas del DataFrame.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; print(df[(df[&#39;sexo&#39;]==&#39;H&#39;) &amp;amp; (df[&#39;colesterol&#39;] &amp;gt; 260)])
                     nombre  edad sexo    peso  altura    colesterol
6   Antonio Fernández Ocaña    51    H    62.0    1.72         276.0
9   Santiago Reillo Manzano    46    H    75.0    1.85         280.0
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;ordenar-un-dataframe&#34;&gt;Ordenar un DataFrame&lt;/h2&gt;
&lt;p&gt;Para ordenar un DataFrame de acuerdo a los valores de una determinada columna se utilizan los siguientes métodos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.sort_values(columna, ascending=booleano&lt;/code&gt;) : Devuelve el DataFrame que resulta de ordenar las filas del DataFrame &lt;code&gt;df&lt;/code&gt; según los valores del la columna con nombre &lt;code&gt;columna&lt;/code&gt;. Si argumento del parámetro &lt;code&gt;ascending&lt;/code&gt; es &lt;code&gt;True&lt;/code&gt; el orden es creciente y si es &lt;code&gt;False&lt;/code&gt; decreciente.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;df.sort_index(ascending=booleano&lt;/code&gt;) : Devuelve el DataFrame que resulta de ordenar las filas del DataFrame &lt;code&gt;df&lt;/code&gt; según los nombres de las filas. Si el argumento del parámetro &lt;code&gt;ascending&lt;/code&gt; es &lt;code&gt;True&lt;/code&gt; el orden es creciente y si es &lt;code&gt;False&lt;/code&gt; decreciente.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; print(df.sort_values(&#39;colesterol&#39;))
                              nombre  edad sexo   peso  altura  colesterol
4               Marisa López Collado    46    M   51.0    1.58       148.0
0       José Luis Martínez Izquierdo    18    H   85.0    1.79       182.0
2              Javier García Sánchez    24    H    NaN    1.81       191.0
13             Carolina Rubio Moreno    20    M   61.0    1.77       194.0
...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;eliminar-las-filas-con-dados-desconocidos-en-un-dataframe&#34;&gt;Eliminar las filas con dados desconocidos en un DataFrame&lt;/h2&gt;
&lt;p&gt;Para eliminar las filas de un DataFrame que contienen datos desconocidos &lt;code&gt;NaN&lt;/code&gt; o nulos &lt;code&gt;None&lt;/code&gt; se utiliza el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s.dropna(subset=columnas)&lt;/code&gt; : Devuelve el DataFrame que resulta de eliminar las filas que contienen algún dato desconocido o nulo en las columnas de la lista &lt;code&gt;columna&lt;/code&gt; del DataFrame &lt;code&gt;df&lt;/code&gt;. Si no se pasa un argumento al parámetro &lt;code&gt;subset&lt;/code&gt; se aplica a todas las columnas del DataFrame.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; print(df.dropna())
                              nombre  edad sexo   peso  altura  colesterol
0       José Luis Martínez Izquierdo    18    H   85.0    1.79       182.0
1                     Rosa Díaz Díaz    32    M   65.0    1.73       232.0
3                Carmen López Pinzón    35    M   65.0    1.70       200.0
4               Marisa López Collado    46    M   51.0    1.58       148.0
...
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;agrupación-de-un-dataframe&#34;&gt;Agrupación de un DataFrame&lt;/h2&gt;
&lt;p&gt;En muchas aplicaciones es útil agrupar los datos de un DataFrame de acuerdo a los valores de una o varias columnas (categorías), como por ejemplo el sexo o el país.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/pandas-grupos.png&#34; alt=&#34;División en grupos de un DataFrame&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;dividir-un-dataframe-en-grupos&#34;&gt;Dividir un DataFrame en grupos&lt;/h2&gt;
&lt;p&gt;Para dividir un DataFrame en grupos se utiliza el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df.groupby(columnas).groups&lt;/code&gt; : Devuelve un diccionario con cuyas claves son las tuplas que resultan de todas las combinaciones de los valores de las columnas con nombres en la lista &lt;code&gt;columnas&lt;/code&gt;, y valores las listas de los nombres de las filas que contienen esos valores en las correspondientes columnas del DataFrame &lt;code&gt;df&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; print(df.groupby(&#39;sexo&#39;).groups)
{&#39;H&#39;: Int64Index([0, 2, 5, 6, 8, 9, 11, 12], dtype=&#39;int64&#39;), &#39;M&#39;: Int64Index([1, 3, 4, 7, 10, 13], dtype=&#39;int64&#39;)}
&amp;gt;&amp;gt;&amp;gt; print(df.groupby([&#39;sexo&#39;,&#39;edad&#39;]).groups)
{(&#39;H&#39;, 18): Int64Index([0], dtype=&#39;int64&#39;), (&#39;H&#39;, 24): Int64Index([2], dtype=&#39;int64&#39;), (&#39;H&#39;, 27): Int64Index([12], dtype=&#39;int64&#39;), (&#39;H&#39;, 35): Int64Index([8], dtype=&#39;int64&#39;), (&#39;H&#39;, 46): Int64Index([9], dtype=&#39;int64&#39;), (&#39;H&#39;, 51): Int64Index([6], dtype=&#39;int64&#39;), (&#39;H&#39;, 58): Int64Index([11], dtype=&#39;int64&#39;), (&#39;H&#39;, 68): Int64Index([5], dtype=&#39;int64&#39;), (&#39;M&#39;, 20): Int64Index([13], dtype=&#39;int64&#39;), (&#39;M&#39;, 22): Int64Index([7], dtype=&#39;int64&#39;), (&#39;M&#39;, 32): Int64Index([1], dtype=&#39;int64&#39;), (&#39;M&#39;, 35): Int64Index([3], dtype=&#39;int64&#39;), (&#39;M&#39;, 46): Int64Index([4], dtype=&#39;int64&#39;), (&#39;M&#39;, 53): Int64Index([10], dtype=&#39;int64&#39;)}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Para obtener un grupo concreto se utiliza el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df.groupby(columnas).get_group(valores)&lt;/code&gt; : Devuelve un DataFrame con las filas del DataFrame &lt;code&gt;df&lt;/code&gt; que cumplen que las columnas de la lista &lt;code&gt;columnas&lt;/code&gt; presentan los valores de la tupla &lt;code&gt;valores&lt;/code&gt;. La lista &lt;code&gt;columnas&lt;/code&gt; y la tupla &lt;code&gt;valores&lt;/code&gt; deben tener el mismo tamaño.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; print(df.groupby(&#39;sexo&#39;).get_group(&#39;M&#39;))
                    nombre  edad sexo    peso   altura    colesterol
1           Rosa Díaz Díaz    32    M    65.0     1.73         232.0
3      Carmen López Pinzón    35    M    65.0     1.70         200.0
4     Marisa López Collado    46    M    51.0     1.58         148.0
7    Pilar Martín González    22    M    60.0     1.66           NaN
10   Macarena Álvarez Luna    53    M    55.0     1.62         262.0
13   Carolina Rubio Moreno    20    M    61.0     1.77         194.0
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;aplicar-una-función-de-agregación-por-grupos&#34;&gt;Aplicar una función de agregación por grupos&lt;/h2&gt;
&lt;p&gt;Una vez dividido el DataFame en grupos, es posible aplicar funciones de agregación a cada grupo mediante el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df.groupby(columnas).agg(funciones)&lt;/code&gt; : Devuelve un DataFrame con el resultado de aplicar las funciones de agregación de la lista &lt;code&gt;funciones&lt;/code&gt; a cada uno de los DataFrames que resultan de dividir el DataFrame según las columnas de la lista &lt;code&gt;columnas&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Una función de agregación toma como argumento una lista y devuelve una único valor. Algunas de las funciones de agregación más comunes son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;np.min&lt;/code&gt; : Devuelve el mínimo de una lista de valores.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.max&lt;/code&gt; : Devuelve el máximo de una lista de valores.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.count_nonzero&lt;/code&gt; : Devuelve el número de valores no nulos de una lista de valores.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.sum&lt;/code&gt; : Devuelve la suma de una lista de valores.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.mean&lt;/code&gt; : Devuelve la media de una lista de valores.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.std&lt;/code&gt; : Devuelve la desviación típica de una lista de valores.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; df = pd.read_csv(
&#39;https://raw.githubusercontent.com/asalber/manual-python/master/datos/colesterol.csv&#39;)
&amp;gt;&amp;gt;&amp;gt; print(df.groupby(&#39;sexo&#39;).agg(np.mean))
           edad       peso    altura  colesterol
sexo                                            
H     40.875000  80.714286  1.837500     228.375
M     34.666667  59.500000  1.676667     207.200
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;reestructurar-un-dataframe&#34;&gt;Reestructurar un DataFrame&lt;/h2&gt;
&lt;p&gt;A menudo la disposición de los datos en un DataFrame no es la adecuada para su tratamiento y es necesario reestructurar el DataFrame. Los datos que contiene un DataFrame pueden organizarse en dos formatos: ancho y largo.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/formatos-dataframe.png&#34; alt=&#34;Formatos de un DataFrame&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;convertir-un-dataframe-a-formato-largo&#34;&gt;Convertir un DataFrame a formato largo&lt;/h2&gt;
&lt;p&gt;Para convertir un DataFrame de formato ancho a formato largo (columnas a filas) se utiliza el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df.melt(id_vars=id-columnas, value_vars=columnas, var_name=nombre-columnas, var_value=nombre-valores)&lt;/code&gt; : Devuelve el DataFrame que resulta de convertir el DataFrame &lt;code&gt;df&lt;/code&gt; de formato ancho a formato largo. Todas las columnas de lista &lt;code&gt;columnas&lt;/code&gt; se reestructuran en dos nuevas columnas con nombres &lt;code&gt;nombre-columnas&lt;/code&gt; y &lt;code&gt;nombre-valores&lt;/code&gt; que contienen los nombres de las columnas originales y sus valores, respectivamente. Las columnas en la lista &lt;code&gt;id-columnas&lt;/code&gt; se mantienen sin reestructurar. Si no se pasa la lista &lt;code&gt;columnas&lt;/code&gt; entonces se reestructuran todas las columnas excepto las columnas de la lista &lt;code&gt;id-columnas&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import pandas as pd
&amp;gt;&amp;gt;&amp;gt; datos = {&#39;nombre&#39;:[&#39;María&#39;, &#39;Luis&#39;, &#39;Carmen&#39;],
... &#39;edad&#39;:[18, 22, 20],
... &#39;Matemáticas&#39;:[8.5, 7, 3.5],
... &#39;Economía&#39;:[8, 6.5, 5],
... &#39;Programación&#39;:[6.5, 4, 9]}
&amp;gt;&amp;gt;&amp;gt; df = pd.DataFrame(datos)
&amp;gt;&amp;gt;&amp;gt; df1 = df.melt(id_vars=[&#39;nombre&#39;, &#39;edad&#39;], var_name=&#39;asignatura&#39;, value_name=&#39;nota&#39;)
&amp;gt;&amp;gt;&amp;gt; print(df1)
   nombre  edad    asignatura  nota
0   María    18   Matemáticas   8.5
1    Luis    22   Matemáticas   7.0
2  Carmen    20   Matemáticas   3.5
3   María    18      Economía   8.0
4    Luis    22      Economía   6.5
5  Carmen    20      Economía   5.0
6   María    18  Programación   6.5
7    Luis    22  Programación   4.0
8  Carmen    20  Programación   9.0
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;convertir-un-dataframe-a-formato-ancho&#34;&gt;Convertir un DataFrame a formato ancho&lt;/h2&gt;
&lt;p&gt;Para convertir un DataFrame de formato largo a formato ancho (filas a columnas) se utiliza el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df.pivot(index=filas, columns=columna, values=valores)&lt;/code&gt; : Devuelve el DataFrame que resulta de convertir el DataFrame &lt;code&gt;df&lt;/code&gt; de formato largo a formato ancho. Se crean tantas columnas nuevas como valores distintos haya en la columna &lt;code&gt;columna&lt;/code&gt;. Los nombres de estas nuevas columnas son los valores de la columna &lt;code&gt;columna&lt;/code&gt; mientras que sus valores se toman de la columna &lt;code&gt;valores&lt;/code&gt;. Los nombres del índice del nuevo DataFrame se toman de los valores de la columna &lt;code&gt;filas&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Continuación del código anterior
&amp;gt;&amp;gt;&amp;gt; print(df1.pivot(index=&#39;nombre&#39;, columns=&#39;asignatura&#39;, values=&#39;nota&#39;))
asignatura  Economía  Matemáticas  Programación
nombre                                  
Carmen           5.0          3.5           9.0
Luis             6.5          7.0           4.0
María            8.0          8.5           6.5
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>La librería Matplotlib</title>
      <link>/docencia/python/manual/matplotlib/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/manual/matplotlib/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;https://matplotlib.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Matplotlib&lt;/a&gt; es una librería de Python especializada en la creación de gráficos en dos dimensiones.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/matplotlib-logo.png&#34; alt=&#34;Gráfico con matplotlib&#34;&gt;&lt;/p&gt;
&lt;p&gt;Permite crear y personalizar los tipos de gráficos más comunes, entre ellos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Diagramas de barras&lt;/li&gt;
&lt;li&gt;Histograma&lt;/li&gt;
&lt;li&gt;Diagramas de sectores&lt;/li&gt;
&lt;li&gt;Diagramas de caja y bigotes&lt;/li&gt;
&lt;li&gt;Diagramas de violín&lt;/li&gt;
&lt;li&gt;Diagramas de dispersión o puntos&lt;/li&gt;
&lt;li&gt;Diagramas de lineas&lt;/li&gt;
&lt;li&gt;Diagramas de areas&lt;/li&gt;
&lt;li&gt;Diagramas de contorno&lt;/li&gt;
&lt;li&gt;Mapas de color&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;y combinaciones de todos ellos.&lt;/p&gt;
&lt;p&gt;En la siguiente 
&lt;a href=&#34;https://matplotlib.org/gallery/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;galería de gráficos&lt;/a&gt; pueden apreciarse todos los tipos de gráficos que pueden crearse con esta librería.&lt;/p&gt;
&lt;h2 id=&#34;creación-de-gráficos-con-matplotlib&#34;&gt;Creación de gráficos con matplotlib&lt;/h2&gt;
&lt;p&gt;Para crear un gráfico con matplotlib es habitual seguir los siguientes pasos:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Importar el módulo &lt;code&gt;pyplot&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Definir la figura que contendrá el gráfico, que es la region (ventana o página) donde se dibujará y los ejes sobre los que se dibujarán los datos. Para ello se utiliza la función &lt;code&gt;subplots()&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dibujar los datos sobre los ejes. Para ello se utilizan distintas funciones dependiendo del tipo de gráfico que se quiera.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Personalizar el gráfico. Para ello existen multitud de funciones que permiten añadir un título, una leyenda, una rejilla, cambiar colores o personalizar los ejes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Guardar el gráfico. Para ello se utiliza la función &lt;code&gt;savefig()&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mostrar el gráfico. Para ello se utiliza la función &lt;code&gt;show()&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Importar el módulo pyplot con el alias plt
import matplotlib.pyplot as plt
# Crear la figura y los ejes
fig, ax = plt.subplots()
# Dibujar puntos
ax.scatter(x = [1, 2, 3], y = [3, 2, 1])
# Guardar el gráfico en formato png
plt.savefig(&#39;diagrama-dispersion.png&#39;)
# Mostrar el gráfico
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/diagrama-dispersion.png&#34; alt=&#34;Gráfico con matplotlib&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;diagramas-de-dispersión-o-puntos&#34;&gt;Diagramas de dispersión o puntos&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;scatter(x, y)&lt;/code&gt;: Dibuja un diagrama de puntos con las coordenadas de la lista &lt;code&gt;x&lt;/code&gt; en el eje X y las coordenadas de la lista &lt;code&gt;y&lt;/code&gt; en el eje Y. 
&lt;a href=&#34;https://matplotlib.org/api/_as_gen/matplotlib.pyplot.scatter.html#matplotlib.pyplot.scatter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;i class=&#34;fa fa-info-circle&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
fig, ax = plt.subplots()
ax.scatter([1, 2, 3, 4], [1, 2, 0, 0.5])
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/diagrama-puntos.png&#34; alt=&#34;Gráfico con matplotlib&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;diagramas-de-líneas&#34;&gt;Diagramas de líneas&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;plot(x, y)&lt;/code&gt;: Dibuja un polígono con los vértices dados por las coordenadas de la lista &lt;code&gt;x&lt;/code&gt; en el eje X y las coordenadas de la lista &lt;code&gt;y&lt;/code&gt; en el eje Y. 
&lt;a href=&#34;https://matplotlib.org/api/_as_gen/matplotlib.pyplot.plot.html#matplotlib.pyplot.plot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;i class=&#34;fa fa-info-circle&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
fig, ax = plt.subplots()
ax.plot([1, 2, 3, 4], [1, 2, 0, 0.5])
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/diagrama-lineas.png&#34; alt=&#34;Gráfico con matplotlib&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;diagramas-de-areas&#34;&gt;Diagramas de areas&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fill_between(x, y)&lt;/code&gt;: Dibuja el area bajo el polígono con los vértices dados por las coordenadas de la lista &lt;code&gt;x&lt;/code&gt; en el eje X y las coordenadas de la lista &lt;code&gt;y&lt;/code&gt; en el eje Y. 
&lt;a href=&#34;https://matplotlib.org/api/_as_gen/matplotlib.pyplot.fill_between.html#matplotlib.pyplot.fill_between&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;i class=&#34;fa fa-info-circle&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
fig, ax = plt.subplots()
ax.fill_between([1, 2, 3, 4], [1, 2, 0, 0.5])
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/diagrama-areas.png&#34; alt=&#34;Gráfico con matplotlib&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;diagramas-de-barras-verticales&#34;&gt;Diagramas de barras verticales&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bar(x, y)&lt;/code&gt;: Dibuja un diagrama de barras verticales donde &lt;code&gt;x&lt;/code&gt; es una lista con la posición de las barras en el eje X, e &lt;code&gt;y&lt;/code&gt; es una lista con la altura de las barras en el eje Y. 
&lt;a href=&#34;https://matplotlib.org/api/_as_gen/matplotlib.pyplot.bar.html#matplotlib.pyplot.bar&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;i class=&#34;fa fa-info-circle&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
fig, ax = plt.subplots()
ax.bar([1, 2, 3], [3, 2, 1])
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/diagrama-barras.png&#34; alt=&#34;Gráfico con matplotlib&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;diagramas-de-barras-horizontales&#34;&gt;Diagramas de barras horizontales&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;barh(x, y)&lt;/code&gt;: Dibuja un diagrama de barras horizontales donde &lt;code&gt;x&lt;/code&gt; es una lista con la posición de las barras en el eje Y, e &lt;code&gt;y&lt;/code&gt; es una lista con la longitud de las barras en el eje X. 
&lt;a href=&#34;https://matplotlib.org/api/_as_gen/matplotlib.pyplot.barh.html#matplotlib.pyplot.barh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;i class=&#34;fa fa-info-circle&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
fig, ax = plt.subplots()
ax.barh([1, 2, 3], [3, 2, 1])
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/diagrama-barras-horizontales.png&#34; alt=&#34;Gráfico con matplotlib&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;histogramas&#34;&gt;Histogramas&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hist(x, bins)&lt;/code&gt;: Dibuja un histograma con las frecuencias resultantes de agrupar los datos de la lista &lt;code&gt;x&lt;/code&gt; en las clases definidas por la lista &lt;code&gt;bins&lt;/code&gt;. 
&lt;a href=&#34;https://matplotlib.org/api/_as_gen/matplotlib.pyplot.hist.html#matplotlib.pyplot.hist&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;i class=&#34;fa fa-info-circle&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
import matplotlib.pyplot as plt
fig, ax = plt.subplots()
x = np.random.normal(5, 1.5, size=1000)
ax.hist(x, np.arange(0, 11))
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/histograma.png&#34; alt=&#34;Gráfico con matplotlib&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;diagramas-de-sectores&#34;&gt;Diagramas de sectores&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pie(x)&lt;/code&gt;: Dibuja un diagrama de sectores con las frecuencias de la lista &lt;code&gt;x&lt;/code&gt;. 
&lt;a href=&#34;https://matplotlib.org/api/_as_gen/matplotlib.pyplot.pie.html#matplotlib.pyplot.pie&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;i class=&#34;fa fa-info-circle&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
fig, ax = plt.subplots()
ax.pie([5, 4, 3, 2, 1])
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/diagrama-sectores.png&#34; alt=&#34;Gráfico con matplotlib&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;diagramas-de-caja-y-bigotes&#34;&gt;Diagramas de caja y bigotes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boxplot(x)&lt;/code&gt;: Dibuja un diagrama de caja y bigotes con los datos de la lista &lt;code&gt;x&lt;/code&gt;. 
&lt;a href=&#34;https://matplotlib.org/api/_as_gen/matplotlib.pyplot.boxplot.html#matplotlib.pyplot.boxplot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;i class=&#34;fa fa-info-circle&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
fig, ax = plt.subplots()
ax.boxplot([1, 2, 1, 2, 3, 4, 3, 3, 5, 7])
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/diagrama-caja.png&#34; alt=&#34;Gráfico con matplotlib&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;diagramas-de-violín&#34;&gt;Diagramas de violín&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;violinplot(x)&lt;/code&gt;: Dibuja un diagrama de violín con los datos de la lista &lt;code&gt;x&lt;/code&gt;. 
&lt;a href=&#34;https://matplotlib.org/api/_as_gen/matplotlib.pyplot.violinplot.html#matplotlib.pyplot.violinplot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;i class=&#34;fa fa-info-circle&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
fig, ax = plt.subplots()
ax.violinplot([1, 2, 1, 2, 3, 4, 3, 3, 5, 7])
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/diagrama-violin.png&#34; alt=&#34;Gráfico con matplotlib&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;diagramas-de-contorno&#34;&gt;Diagramas de contorno&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;contourf(x, y, z)&lt;/code&gt;: Dibuja un diagrama de contorno con las curvas de nivel de la superficie dada por los puntos con las coordenadas de las listas &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; y &lt;code&gt;z&lt;/code&gt; en los ejes X, Y y Z respectivamente. 
&lt;a href=&#34;https://matplotlib.org/api/_as_gen/matplotlib.pyplot.contourf.html#matplotlib.pyplot.contourf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;i class=&#34;fa fa-info-circle&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
fig, ax = plt.subplots()
x = np.linspace(-3.0, 3.0, 100)
y = np.linspace(-3.0, 3.0, 100)
x, y = np.meshgrid(x, y)
z = np.sqrt(x**2 + 2*y**2)
ax.contourf(x, y, z)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/diagrama-contorno.png&#34; alt=&#34;Gráfico con matplotlib&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;mapas-de-color&#34;&gt;Mapas de color&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;imshow(x)&lt;/code&gt;: Dibuja un mapa de color a partir de una matriz (array bidimensiona) &lt;code&gt;x&lt;/code&gt;. 
&lt;a href=&#34;https://matplotlib.org/api/_as_gen/matplotlib.pyplot.imshow.html#matplotlib.pyplot.imshow&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;i class=&#34;fa fa-info-circle&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
fig, ax = plt.subplots()
x = np.random.random((16, 16))
ax.imshow(x)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/mapa-calor.png&#34; alt=&#34;Gráfico con matplotlib&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hist2d(x, y)&lt;/code&gt;: Dibuja un mapa de color que simula un histograma bidimensional, donde los colores de los cuadrados dependen de las frecuencias de las clases de la muestra dada por las listas &lt;code&gt;x&lt;/code&gt; e &lt;code&gt;y&lt;/code&gt;. 
&lt;a href=&#34;https://matplotlib.org/api/_as_gen/matplotlib.pyplot.hist2d.html#matplotlib.pyplot.hist2d&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;i class=&#34;fa fa-info-circle&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
fig, ax = plt.subplots()
x, y = np.random.multivariate_normal(mean=[0.0, 0.0], cov=[[1.0, 0.4], [0.4, 0.5]], size=1000).T
ax.hist2d(x, y)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/histograma2D.png&#34; alt=&#34;Gráfico con matplotlib&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;cambiar-el-aspecto-de-los-gráficos&#34;&gt;Cambiar el aspecto de los gráficos&lt;/h2&gt;
&lt;p&gt;Los gráficos creados con Matplotlib son personalizables y puede cambiarse el aspecto de casi todos sus elementos. Los elementos que suelen modificarse más a menudo son:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Colores&lt;/li&gt;
&lt;li&gt;Marcadores de puntos&lt;/li&gt;
&lt;li&gt;Estilo de líneas&lt;/li&gt;
&lt;li&gt;Títulos&lt;/li&gt;
&lt;li&gt;Ejes&lt;/li&gt;
&lt;li&gt;Leyenda&lt;/li&gt;
&lt;li&gt;Rejilla&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;colores&#34;&gt;Colores&lt;/h2&gt;
&lt;p&gt;Para cambiar el color de los objetos se utiliza el parámetro &lt;code&gt;color = nombre-color&lt;/code&gt;, donde &lt;code&gt;nombre-color&lt;/code&gt; es una cadena con el nombre del color de entre los 
&lt;a href=&#34;https://matplotlib.org/3.2.1/gallery/color/named_colors.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;colores disponibles&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
fig, ax = plt.subplots()
dias = [&#39;L&#39;, &#39;M&#39;, &#39;X&#39;, &#39;J&#39;, &#39;V&#39;, &#39;S&#39;, &#39;D&#39;]
temperaturas = {&#39;Madrid&#39;:[28.5, 30.5, 31, 30, 28, 27.5, 30.5], &#39;Barcelona&#39;:[24.5, 25.5, 26.5, 25, 26.5, 24.5, 25]}
ax.plot(dias, temperaturas[&#39;Madrid&#39;], color = &#39;tab:purple&#39;)
ax.plot(dias, temperaturas[&#39;Barcelona&#39;], color = &#39;tab:green&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/lineas-colores.png&#34; alt=&#34;Gráfico con matplotlib&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;marcadores&#34;&gt;Marcadores&lt;/h2&gt;
&lt;p&gt;Para cambiar la forma de los puntos marcadores se utiliza el parámetro &lt;code&gt;marker = nombre-marcador&lt;/code&gt; donde &lt;code&gt;nombre-marcador&lt;/code&gt; es una cadena con el nombre del marcador de entre los 
&lt;a href=&#34;https://matplotlib.org/3.2.1/api/markers_api.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;marcadores disponibles&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
fig, ax = plt.subplots()
dias = [&#39;L&#39;, &#39;M&#39;, &#39;X&#39;, &#39;J&#39;, &#39;V&#39;, &#39;S&#39;, &#39;D&#39;]
temperaturas = {&#39;Madrid&#39;:[28.5, 30.5, 31, 30, 28, 27.5, 30.5], &#39;Barcelona&#39;:[24.5, 25.5, 26.5, 25, 26.5, 24.5, 25]}
ax.plot(dias, temperaturas[&#39;Madrid&#39;], marker = &#39;^&#39;)
ax.plot(dias, temperaturas[&#39;Barcelona&#39;], marker = &#39;o&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/lineas-marcadores.png&#34; alt=&#34;Gráfico con matplotlib&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;líneas&#34;&gt;Líneas&lt;/h2&gt;
&lt;p&gt;Para cambiar el estilo de las líneas se utiliza el parámetro &lt;code&gt;linestyle = nombre-estilo&lt;/code&gt; donde &lt;code&gt;nombre-estilo&lt;/code&gt; es una cadena con el nombre del estilo de entre los 
&lt;a href=&#34;https://matplotlib.org/3.2.1/gallery/lines_bars_and_markers/linestyles.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;estilos disponibles&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
fig, ax = plt.subplots()
dias = [&#39;L&#39;, &#39;M&#39;, &#39;X&#39;, &#39;J&#39;, &#39;V&#39;, &#39;S&#39;, &#39;D&#39;]
temperaturas = {&#39;Madrid&#39;:[28.5, 30.5, 31, 30, 28, 27.5, 30.5], &#39;Barcelona&#39;:[24.5, 25.5, 26.5, 25, 26.5, 24.5, 25]}
ax.plot(dias, temperaturas[&#39;Madrid&#39;], linestyle = &#39;dashed&#39;)
ax.plot(dias, temperaturas[&#39;Barcelona&#39;], linestyle = &#39;dotted&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/lineas-estilo.png&#34; alt=&#34;Gráfico con matplotlib&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;títulos&#34;&gt;Títulos&lt;/h2&gt;
&lt;p&gt;Para añadir un título principal al gráfico se utiliza el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ax.set_title(titulo, loc=alineacion, fontdict=fuente)&lt;/code&gt; : Añade un título con el contenido de la cadena &lt;code&gt;titulo&lt;/code&gt; a los ejes &lt;code&gt;ax&lt;/code&gt;. El parámetro &lt;code&gt;loc&lt;/code&gt; indica la alineación del título, que puede ser &lt;code&gt;&#39;left&#39;&lt;/code&gt; (izquierda), &lt;code&gt;&#39;center&#39;&lt;/code&gt; (centro) o &lt;code&gt;&#39;right&#39;&lt;/code&gt; (derecha), y el parámetro &lt;code&gt;fontdict&lt;/code&gt; indica mediante un diccionario las características de la fuente (la el tamaño &lt;code&gt;fontisize&lt;/code&gt;, el grosor &lt;code&gt;fontweight&lt;/code&gt; o el color &lt;code&gt;color&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
fig, ax = plt.subplots()
dias = [&#39;L&#39;, &#39;M&#39;, &#39;X&#39;, &#39;J&#39;, &#39;V&#39;, &#39;S&#39;, &#39;D&#39;]
temperaturas = {&#39;Madrid&#39;:[28.5, 30.5, 31, 30, 28, 27.5, 30.5], &#39;Barcelona&#39;:[24.5, 25.5, 26.5, 25, 26.5, 24.5, 25]}
ax.plot(dias, temperaturas[&#39;Madrid&#39;])
ax.plot(dias, temperaturas[&#39;Barcelona&#39;])
ax.set_title(&#39;Evolución de la temperatura diaria&#39;, loc = &amp;quot;left&amp;quot;, fontdict = {&#39;fontsize&#39;:14, &#39;fontweight&#39;:&#39;bold&#39;, &#39;color&#39;:&#39;tab:blue&#39;})
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/titulo.png&#34; alt=&#34;Gráfico con matplotlib&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejes&#34;&gt;Ejes&lt;/h2&gt;
&lt;p&gt;Para cambiar el aspecto de los ejes se suelen utilizar los siguientes métodos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ax.set_xlabel(titulo)&lt;/code&gt; : Añade un título con el contenido de la cadena &lt;code&gt;titulo&lt;/code&gt; al eje x de &lt;code&gt;ax&lt;/code&gt;. Se puede personalizar la alineación y la fuente con los mismos parámetros que para el título principal.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ax.set_ylabel(titulo)&lt;/code&gt; : Añade un título con el contenido de la cadena &lt;code&gt;titulo&lt;/code&gt; al eje y de &lt;code&gt;ax&lt;/code&gt;. Se puede personalizar la alineación y la fuente con los mismos parámetros que para el título principal.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ax.set_xlim([limite-inferior, limite-superior])&lt;/code&gt; : Establece los límites que se muestran en el eje x de &lt;code&gt;ax&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ax.set_ylim([limite-inferior, limite-superior])&lt;/code&gt; : Establece los límites que se muestran en el eje y de &lt;code&gt;ax&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ax.set_xticks(marcas)&lt;/code&gt; : Dibuja marcas en el eje x de &lt;code&gt;ax&lt;/code&gt; en las posiciones indicadas en la lista &lt;code&gt;marcas&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ax.set_yticks(marcas)&lt;/code&gt; : Dibuja marcas en el eje y de &lt;code&gt;ax&lt;/code&gt; en las posiciones indicadas en la lista &lt;code&gt;marcas&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ax.set_xscale(escala)&lt;/code&gt; : Establece la escala del eje x de &lt;code&gt;ax&lt;/code&gt;, donde el parámetro &lt;code&gt;escala&lt;/code&gt; puede ser &lt;code&gt;&#39;linear&#39;&lt;/code&gt; (lineal) o &lt;code&gt;&#39;log&#39;&lt;/code&gt; (logarítmica).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ax.set_yscale(escala)&lt;/code&gt; : Establece la escala del eje y de &lt;code&gt;ax&lt;/code&gt;, donde el parámetro &lt;code&gt;escala&lt;/code&gt; puede ser &lt;code&gt;&#39;linear&#39;&lt;/code&gt; (lineal) o &lt;code&gt;&#39;log&#39;&lt;/code&gt; (logarítmica).&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
fig, ax = plt.subplots()
dias = [&#39;L&#39;, &#39;M&#39;, &#39;X&#39;, &#39;J&#39;, &#39;V&#39;, &#39;S&#39;, &#39;D&#39;]
temperaturas = {&#39;Madrid&#39;:[28.5, 30.5, 31, 30, 28, 27.5, 30.5], &#39;Barcelona&#39;:[24.5, 25.5, 26.5, 25, 26.5, 24.5, 25]}
ax.plot(dias, temperaturas[&#39;Madrid&#39;])
ax.plot(dias, temperaturas[&#39;Barcelona&#39;])
ax.set_xlabel(&amp;quot;Días&amp;quot;, fontdict = {&#39;fontsize&#39;:14, &#39;fontweight&#39;:&#39;bold&#39;, &#39;color&#39;:&#39;tab:blue&#39;})
ax.set_ylabel(&amp;quot;Temperatura ºC&amp;quot;)
ax.set_ylim([20,35])
ax.set_yticks(range(20, 35))
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/ejes.png&#34; alt=&#34;Gráfico con matplotlib&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;leyenda&#34;&gt;Leyenda&lt;/h2&gt;
&lt;p&gt;Para añadir una leyenda a un gráfico se utiliza el siguiente método:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ax.legend(leyendas, loc = posición)&lt;/code&gt; : Dibuja un leyenda en los ejes &lt;code&gt;ax&lt;/code&gt; con los nombres indicados en la lista &lt;code&gt;leyendas&lt;/code&gt;. El parámetro &lt;code&gt;loc&lt;/code&gt; indica la posición en la que se dibuja la leyenda y puede ser &lt;code&gt;&#39;upper left&#39;&lt;/code&gt; (arriba izquierda), &lt;code&gt;&#39;upper center&#39;&lt;/code&gt; (arriba centro), &lt;code&gt;&#39;upper right&#39;&lt;/code&gt; (arriba derecha), &lt;code&gt;&#39;center left&#39;&lt;/code&gt; (centro izquierda), &lt;code&gt;&#39;center&#39;&lt;/code&gt; (centro), &lt;code&gt;&#39;center right&#39;&lt;/code&gt; (centro derecha), &lt;code&gt;&#39;lower left&#39;&lt;/code&gt; (abajo izquierda), &lt;code&gt;&#39;lower center&#39;&lt;/code&gt; (abajo centro), &lt;code&gt;&#39;lower right&#39;&lt;/code&gt; (abajo derecha). Se puede omitir la lista &lt;code&gt;leyendas&lt;/code&gt; si se indica la leyenda de cada serie en la función que la dibuja mediante el parámetro &lt;code&gt;label&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
fig, ax = plt.subplots()
dias = [&#39;L&#39;, &#39;M&#39;, &#39;X&#39;, &#39;J&#39;, &#39;V&#39;, &#39;S&#39;, &#39;D&#39;]
temperaturas = {&#39;Madrid&#39;:[28.5, 30.5, 31, 30, 28, 27.5, 30.5], &#39;Barcelona&#39;:[24.5, 25.5, 26.5, 25, 26.5, 24.5, 25]}
ax.plot(dias, temperaturas[&#39;Madrid&#39;], label = &#39;Madrid&#39;)
ax.plot(dias, temperaturas[&#39;Barcelona&#39;], label = &#39;Barcelona&#39;)
ax.legend(loc = &#39;upper right&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/leyenda.png&#34; alt=&#34;Gráfico con matplotlib&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;rejilla&#34;&gt;Rejilla&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ax.grid(axis=ejes, color=color, linestyle=estilo)&lt;/code&gt; : Dibuja una rejilla en los ejes de &lt;code&gt;ax&lt;/code&gt;. El parámetro &lt;code&gt;axis&lt;/code&gt; indica los ejes sobre los que se dibuja la regilla y puede ser &lt;code&gt;&#39;x&#39;&lt;/code&gt; (eje x), &lt;code&gt;&#39;y&#39;&lt;/code&gt; (eje y) o &lt;code&gt;&#39;both&#39;&lt;/code&gt; (ambos). Los parámetros &lt;code&gt;color&lt;/code&gt; y &lt;code&gt;linestyle&lt;/code&gt; establecen el color y el estilo de las líneas de la rejilla, y pueden tomar los mismos valores vistos en los apartados de colores y líneas.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
fig, ax = plt.subplots()
dias = [&#39;L&#39;, &#39;M&#39;, &#39;X&#39;, &#39;J&#39;, &#39;V&#39;, &#39;S&#39;, &#39;D&#39;]
temperaturas = {&#39;Madrid&#39;:[28.5, 30.5, 31, 30, 28, 27.5, 30.5], &#39;Barcelona&#39;:[24.5, 25.5, 26.5, 25, 26.5, 24.5, 25]}
ax.plot(dias, temperaturas[&#39;Madrid&#39;])
ax.plot(dias, temperaturas[&#39;Barcelona&#39;])
ax.grid(axis = &#39;y&#39;, color = &#39;gray&#39;, linestyle = &#39;dashed&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/rejilla.png&#34; alt=&#34;Gráfico con matplotlib&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;múltiples-gráficos&#34;&gt;Múltiples gráficos&lt;/h2&gt;
&lt;p&gt;Es posible dibujar varios gráficos en distintos ejes en una misma figura organizados en forma de tabla. Para ello, cuando se inicializa la figura y los ejes, hay que pasarle a la función &lt;code&gt;subplots&lt;/code&gt; el número de filas y columnas de la tabla que contendrá los gráficos. Con esto los distintos ejes se organizan en un array y se puede acceder a cada uno de ellos a través de sus índices. Si se quiere que los distintos ejes compartan los mismos límites para los ejes se pueden pasar los parámetros &lt;code&gt;sharex = True&lt;/code&gt; para el eje x o &lt;code&gt;sharey = True&lt;/code&gt; para el eje y.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import matplotlib.pyplot as plt
fig, ax = plt.subplots(2, 2, sharey = True)
dias = [&#39;L&#39;, &#39;M&#39;, &#39;X&#39;, &#39;J&#39;, &#39;V&#39;, &#39;S&#39;, &#39;D&#39;]
temperaturas = {&#39;Madrid&#39;:[28.5, 30.5, 31, 30, 28, 27.5, 30.5], &#39;Barcelona&#39;:[24.5, 25.5, 26.5, 25, 26.5, 24.5, 25]}
ax[0, 0].plot(dias, temperaturas[&#39;Madrid&#39;])
ax[0, 1].plot(dias, temperaturas[&#39;Barcelona&#39;], color = &#39;tab:orange&#39;)
ax[1, 0].bar(dias, temperaturas[&#39;Madrid&#39;])
ax[1, 1].bar(dias, temperaturas[&#39;Barcelona&#39;], color = &#39;tab:orange&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/multiples-graficos.png&#34; alt=&#34;Gráfico con matplotlib&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;integración-con-pandas&#34;&gt;Integración con Pandas&lt;/h2&gt;
&lt;p&gt;Matplotlib se integra a la perfección con la librería Pandas, permitiendo dibujar gráficos a partir de los datos de las series y DataFrames de Pandas.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;df.plot(kind=tipo, x=columnax, y=columnay, ax=ejes)&lt;/code&gt; : Dibuja un diagrama del tipo indicado por el parámetro &lt;code&gt;kind&lt;/code&gt; en los ejes indicados en el parámetro &lt;code&gt;ax&lt;/code&gt;, representando en el eje x la columna del parámetro &lt;code&gt;x&lt;/code&gt; y en el eje y la columna del parámetro &lt;code&gt;y&lt;/code&gt;. El parámetro &lt;code&gt;kind&lt;/code&gt; puede tomar como argumentos &lt;code&gt;&#39;line&#39;&lt;/code&gt; (lineas), &lt;code&gt;&#39;scatter&#39;&lt;/code&gt; (puntos), &lt;code&gt;&#39;bar&#39;&lt;/code&gt; (barras verticales), &lt;code&gt;&#39;barh&#39;&lt;/code&gt; (barras horizontales), &lt;code&gt;&#39;hist&#39;&lt;/code&gt; (histograma), &lt;code&gt;&#39;box&#39;&lt;/code&gt; (cajas), &lt;code&gt;&#39;density&#39;&lt;/code&gt; (densidad), &lt;code&gt;&#39;area&#39;&lt;/code&gt; (area) o &lt;code&gt;&#39;pie&#39;&lt;/code&gt; (sectores). Es posible pasar otros parámetros para indicar el color, el marcador o el estilo de línea como se vió en los apartados anteriores.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd 
import matplotlib.pyplot as plt
df = pd.DataFrame({&#39;Días&#39;:[&#39;L&#39;, &#39;M&#39;, &#39;X&#39;, &#39;J&#39;, &#39;V&#39;, &#39;S&#39;, &#39;D&#39;], 
                   &#39;Madrid&#39;:[28.5, 30.5, 31, 30, 28, 27.5, 30.5], 
                   &#39;Barcelona&#39;:[24.5, 25.5, 26.5, 25, 26.5, 24.5, 25]})
fig, ax = plt.subplots()
df.plot(x = &#39;Días&#39;, y = &#39;Madrid&#39;, ax = ax)
df.plot(x = &#39;Días&#39;, y = &#39;Barcelona&#39;, ax = ax)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/matplotlib-pandas.png&#34; alt=&#34;Gráfico con matplotlib&#34;&gt;&lt;/p&gt;
&lt;p&gt;Si no se indican los parámetros &lt;code&gt;x&lt;/code&gt; e &lt;code&gt;y&lt;/code&gt; se representa el índice de las filas en el eje x y una serie por cada columna del Dataframe. Las columnas no numéricas se ignoran.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd 
import matplotlib.pyplot as plt
df = pd.DataFrame({&#39;Días&#39;:[&#39;L&#39;, &#39;M&#39;, &#39;X&#39;, &#39;J&#39;, &#39;V&#39;, &#39;S&#39;, &#39;D&#39;], 
                   &#39;Madrid&#39;:[28.5, 30.5, 31, 30, 28, 27.5, 30.5], 
                   &#39;Barcelona&#39;:[24.5, 25.5, 26.5, 25, 26.5, 24.5, 25]})
df = df.set_index(&#39;Días&#39;)
fig, ax = plt.subplots()
df.plot(ax = ax)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/matplotlib-pandas2.png&#34; alt=&#34;Gráfico con matplotlib&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Depuración de código</title>
      <link>/docencia/python/manual/depuracion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/manual/depuracion/</guid>
      <description>&lt;h2 id=&#34;depuración-de-programas&#34;&gt;Depuración de programas&lt;/h2&gt;
&lt;p&gt;La depuración es una técnica que permite &lt;em&gt;trazar&lt;/em&gt; un programa, es decir, seguir el flujo de ejecución de un programa paso a paso, ejecutando una instrucción en cada paso, y observar el estado de sus variables.&lt;/p&gt;
&lt;p&gt;Cuando un programa tiene cierta complejidad, la depuración es imprescindible pare detectar posibles errores.&lt;/p&gt;
&lt;p&gt;Python dispone del módulo &lt;code&gt;pyd&lt;/code&gt; para depurar programas, pero es mucho más cómodo utilizar algún entorno de desarrollo que incorpore la depuración, como por ejemplo Visual Studio Code.&lt;/p&gt;
&lt;h3 id=&#34;comandos-de-depuración&#34;&gt;Comandos de depuración&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Establecer punto de parada&lt;/strong&gt;: Detiene la ejecución del programa en una línea concreta de código.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Continuar la ejecución&lt;/strong&gt;: Continúa la ejecución del programa hasta el siguiente punto de parada o hasta que finalice.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Próximo paso&lt;/strong&gt;: Ejecuta la siguiente línea de código y para la ejecución.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Próximo paso con entrada en función&lt;/strong&gt;: Ejecuta la siguiente línea de código. Si se trata de una llamada a una función entonces ejecuta la primera instrucción de la función y para la ejecución.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Próximo paso con salida de función&lt;/strong&gt;: Ejecuta lo que queda de la función actual y para la ejecución.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Terminar la depuración&lt;/strong&gt;: Termina la depuración.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;depuración-en-visual-studio-code&#34;&gt;Depuración en Visual Studio Code&lt;/h3&gt;
&lt;p&gt;Antes de iniciar la depuración de un programa en VSCode hay que establecer algún punto de parada. Para ello basta con hacer click en le margen izquierdo de la ventana con del código a la altura de la línea donde se quiere parar la ejecución del programa.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/break-point.png&#34; alt=&#34;Punto de parada en Visual Studio Code&#34;&gt;&amp;gt;&lt;/p&gt;
&lt;p&gt;Para iniciar la depuración de un programa en VSCode hay que hacer clic sobre el botón &lt;img src=&#34;../img/debug-button.png&#34; alt=&#34;Visual Studio Code debbuger&#34;&gt; o pulsar la combinación de teclas (Ctr+Shift+D).&lt;/p&gt;
&lt;p&gt;La primera vez que depuremos un programa tendremos que crear un fichero de configuración del depurador (&lt;code&gt;launch.json&lt;/code&gt;). Para ello hay que hacer clic en el botón &lt;code&gt;Run and Debug&lt;/code&gt;. VSCode mostrará los distintos ficheros de configuración disponibles y debe seleccionarse el más adecuado para el tipo de programa a depurar. Para programas simples se debe seleccionar &lt;code&gt;Python file&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;La depuración comenzará iniciando la ejecución del programa desde el inicio hasta el primer punto de parada que encuentre.&lt;/p&gt;
&lt;p&gt;Una vez iniciado el proceso de depuración, se puede avanzar en la ejecución del programa haciendo uso de la barra de depuración que contiene botones con los principales comandos de depuración.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/debbuger-bar.png&#34; alt=&#34;Barra de depuración de Visual Studio Code&#34;&gt;&lt;/p&gt;
&lt;p&gt;Durante la ejecución del programa, se puede ver el contenido de las variables del programa en la ventana del estado de las variables.&lt;/p&gt;
&lt;p&gt;El usuario también puede introducir expresiones y ver cómo se evalúan durante la ejecución del programa en la ventana de vista de expresiones.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/debbuger-estado-variables.png&#34; alt=&#34;Ventana de estado de variables de Visual Studio Code&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Referencias</title>
      <link>/docencia/python/manual/referencias/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/manual/referencias/</guid>
      <description>&lt;h2 id=&#34;referencias&#34;&gt;Referencias&lt;/h2&gt;
&lt;h3 id=&#34;webs&#34;&gt;Webs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.python.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python&lt;/a&gt; Sitio web de Python.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://repl.it/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Repl.it&lt;/a&gt; Entorno de desarrollo web para varios lenguajes, incluido Python.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;http://pythontutor.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python tutor&lt;/a&gt; Sitio web que permite visualizar la ejecución el código Python.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;libros-y-manuales&#34;&gt;Libros y manuales&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.tutorialpython.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tutorial de Python&lt;/a&gt; Tutorial rápido de python.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;http://mundogeek.net/tutorial-python/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python para todos&lt;/a&gt; Libro de introducción a Python con muchos ejemplos. Es de licencia libre.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.safecreative.org/work/1207302042960-curso-python-para-principiantes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python para principiantes&lt;/a&gt; Libro de introducción Python que abarca orientación a objetos. Es de licencia libre.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;https://ehmatthes.github.io/pcc/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python crash course&lt;/a&gt; Libro de introducción a Python gratuito.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;http://greenteapress.com/wp/think-python-2e/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Think python 2e&lt;/a&gt;. Libro de introducción a Python que abarca también algoritmos, estructuras de datos y gráficos. Es de licencia libre.&lt;/li&gt;
&lt;li&gt;
&lt;a href=&#34;http://shop.oreilly.com/product/0636920028154.do&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Learning Python&lt;/a&gt; Libro de introducción a Python con enfoque de programación orientada a objetos.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;vídeos&#34;&gt;Vídeos&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;a href=&#34;https://www.edx.org/course/programming-for-everybody-getting-started-with-python&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Curso &amp;ldquo;Python para todos&amp;rdquo;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Examen de Inteligencia de los Negocios 2022-03-24</title>
      <link>/docencia/python/examenes/inteligencia-negocios/examen-python-2022-03-24/</link>
      <pubDate>Thu, 24 Mar 2022 00:00:00 +0000</pubDate>
      <guid>/docencia/python/examenes/inteligencia-negocios/examen-python-2022-03-24/</guid>
      <description>&lt;p&gt;Grado: Inteligencia de los Negocios&lt;br&gt;
Fecha: 24 de marzo de 2022&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-1&#34;&gt;Ejercicio 1&lt;/h2&gt;
&lt;p&gt;Escriba un programa que permita practicar una variante simplificada de la prueba de cálculo mental &lt;em&gt;La calculadora humana&lt;/em&gt; del concurso televisivo Saber y ganar. El usuario debe ir sumando todos los números de la lista de uno en uno hasta que se equivoque o termine la lista, en cuyo caso ganará.&lt;/p&gt;
&lt;p&gt;Ejemplo usando la lista [50, 4, 28, 33, 12]:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;SUMAR Y GANAR 
Vaya sumando todos los números que le iré diciendo. Empezamos por 0. 
Más 50: 50 
Más 4: 54 
Más 28: 72 
Te has equivocado, pero has acertado 2 veces seguidas.


SUMAR Y GANAR 
Vaya sumando todos los números que le iré diciendo. Empezamos por 0. 
Más 50: 50 
Más 4: 54 
Más 28: 82
Más 33: 115
Más 12: 127
Enhorabuena, GANASTE.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2022-03-24/ejercicio1.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-2&#34;&gt;Ejercicio 2&lt;/h2&gt;
&lt;p&gt;Escribir un programa que calcule a partir de una fecha de un año no bisiesto el número de días que han transcurrido en ese año y el número de meses lunares completos que abarcan. Se recuerda que un mes lunar dura aproximadamente 29,53 días.&lt;/p&gt;
&lt;p&gt;El programa debe usar diccionarios para acceder al número de días de cada mes.&lt;/p&gt;
&lt;p&gt;Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;CALENDARIO LUNAR 
Este programa convierte una fecha de un año NO bisiesto a un calendario lunar. 
Indique el día: 1 
Indique el mes: henero 
El mes henero no existe. 

CALENDARIO LUNAR 
Este programa convierte una fecha de un año NO bisiesto a un calendario lunar 
Indique el día: -5 
Indique el mes: marzo 
El día -5 de marzo no existe.

CALENDARIO LUNAR 
Este programa convierte una fecha de un año NO bisiesto a un calendario lunar 
Indique el día: 29 
Indique el mes: febrero 
El día 29 de febrero no existe. 

CALENDARIO LUNAR 
Este programa convierte una fecha de un año NO bisiesto a un calendario lunar 
Indique el día: 1 
Indique el mes: febrero 
El día 1 de febrero es el día 32 del año. 
Habrán pasado 1.08 meses lunares.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2022-03-24/ejercicio2.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-3&#34;&gt;Ejercicio 3&lt;/h2&gt;
&lt;p&gt;Un cine tiene una sala rectangular con 5 filas y 4 columnas de butacas.  Escribir un programa que permita gestionar la reserva de butacas con los siguientes requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El programa mostrará una matriz con el carácter X para las butacas libres y O para las ocupadas y preguntará por la fila y columna de la butaca a reservar.&lt;/li&gt;
&lt;li&gt;Si el usuario introduce una fila o una columna no válidas, se le avisará y se le volverá a preguntar.&lt;/li&gt;
&lt;li&gt;Si la fila y la columna introducida corresponde a una butaca ocupada, se avisará al usuario y se le volverá a preguntar.&lt;/li&gt;
&lt;li&gt;Si la butaca está libre se reservará y se volverá a preguntar al usuario si quiere hacer más reservas.&lt;/li&gt;
&lt;li&gt;El programa terminará cuando el usuario no quiera hacer más reservas.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;RESERVA DE BUCATAS 
XXXXX  
XXXXX  
XXXXX  
XXXXX  
Introduce la fila que quieres: 2  
Introduce la columna que quieres: 3  
Reserva realizada.  
¿Desea realizar otra reserva? (S/N): S

RESERVA DE BUCATAS 
XXXXX  
XXOXX  
XXXXX  
XXXXX  
Introduce la fila que quieres: 5  
Introduce la columna que quieres: 1  
La fila y columna elegidas no son válidas.  
¿Desea realizar otra reserva? (S/N): S

RESERVA DE BUCATAS  
XXXXX  
XXOXX  
XXXXX  
XXXXX  
Introduce la fila que quieres: 2  
Introduce la columna que quieres: 3  
La butaca elegida está ocupada.  
¿Desea realizar otra reserva? 
(S/N): S

RESERVA DE BUCATAS  
XXXXX  
XXOXX  
XXXXX  
XXXXX  
Introduce la fila que quieres: 1  
Introduce la columna que quieres: 2  
Reserva realizada.  
¿Desea realizar otra reserva? (S/N): N  
¡Gracias! 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2022-03-24/ejercicio3.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Examen de Inteligencia de los Negocios 2021-06-05</title>
      <link>/docencia/python/examenes/inteligencia-negocios/examen-python-2021-06-05/</link>
      <pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate>
      <guid>/docencia/python/examenes/inteligencia-negocios/examen-python-2021-06-05/</guid>
      <description>&lt;p&gt;Grado: Inteligencia de los Negocios&lt;br&gt;
Fecha: 5 de junio de 2021&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-1&#34;&gt;Ejercicio 1&lt;/h2&gt;
&lt;p&gt;A veces, al tratar con tuplas, podemos tener un problema en el que necesitamos extraer solo $k$ elementos extremos, es decir, los $k$ máximos y mínimos. Este problema puede tener aplicaciones en campos como el desarrollo web y la ciencia de datos. Desarrollar un programa que dada una tupla y un número $k$ devuelva otra tupla con los $k$ elementos máximos y mínimos.&lt;/p&gt;
&lt;p&gt;Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;La tupla original es: (5, 20, 3, 7, 6, 8) 
La tupla con los k = 2 máximos y mínimos es: (3, 5, 8, 20) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2021-06-05/ejercicio1.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-2&#34;&gt;Ejercicio 2&lt;/h2&gt;
&lt;p&gt;Construir un programa que evalúe operaciones aritméticas sencillas (sumas, restas, productos, cocientes y potencias) introducidas por el usuario. El programa preguntará por la operación a realizar y el usuario tecleará por pantalla la operación con el siguiente formato:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;operando1 operador operando2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Después el programa debe mostrar por pantalla el resultado de la operación con el siguiente formato:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;operando1 operador operando2 = resultado&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;El programa debe preguntar al usuario hasta que este introduzca la palabra “salir”. También mostrará un mensaje de error si el usuario introduce un número de valores distinto de 3 y si introduce un operador no válido.&lt;/p&gt;
&lt;p&gt;Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Introduce la operación con el formato operando1 operador operando2: 2+3 
Entrada no válida. Debes introducir exactamente tres valores separados por espacio. 
Introduce la operación con el formato operando1 operador operando2: 2 + 3 
2 + 3 = 5.0 
Introduce la operación con el formato operando1 operador operando2: 4 ^ 2 
Operación no válida. 
Introduce la operación con el formato operando1 operador operando2: 4 ** 2 
4 ** 2 = 16.0 
Introduce la operación con el formato operando1 operador operando2: salir 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2021-06-05/ejercicio2.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-3&#34;&gt;Ejercicio 3&lt;/h2&gt;
&lt;p&gt;El siguiente diccionario contiene pares formados por números de teléfonos y propietarios:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{&#39;919654665&#39;:&#39;Pedro&#39;, &#39;917489210&#39;: &#39;Luis&#39;, &#39;623543213&#39;:&#39;Carmen&#39;, &#39;674833721&#39;:&#39;Luis&#39;}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Crear un programa que construya un diccionario con la misma información, pero tomando como claves los nombres de los usuarios y como valores los teléfonos. Como un usuario puede tener dos teléfonos, uno móvil y uno fijo, los teléfonos deben agruparse a su vez en un diccionario cuyos elementos tendrán clave “movil” o “fijo” según el teléfono empiece por 6 o no. Por ejemplo, a partir del diccionario anterior debe construirse el siguiente diccionario:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{&#39;Pedro&#39;: {&#39;fijo&#39;: &#39;919654665&#39;}, &#39;Luis&#39;: {&#39;fijo&#39;: &#39;917489210&#39;, &#39;movil&#39;: &#39;674833721&#39;}, &#39;Carmen&#39;: {&#39;movil&#39;: &#39;623543213&#39;}}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Después el programa debe recorrer este diccionario y mostrar por pantalla los teléfonos del listín en orden alfabético.&lt;/p&gt;
&lt;p&gt;Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Teléfonos de Carmen 
         movil : 623543213 
Teléfonos de Luis 
         fijo : 917489210 
         movil : 674833721 
Teléfonos de Pedro 
         fijo : 919654665 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2021-06-05/ejercicio3.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-4&#34;&gt;Ejercicio 4&lt;/h2&gt;
&lt;p&gt;Construir un programa para realizar las siguientes operaciones con dos números proporcionados por el usuario:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Comprobar si uno de los dos números es divisible por el otro. Un número es divisible por otro cuando el resto de la división entera es cero.&lt;/li&gt;
&lt;li&gt;Calcular su Máximo Común Divisor.&lt;/li&gt;
&lt;li&gt;Calcular su Mínimo Común Múltiplo.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cada una de las operaciones deben estar separadas en funciones que tengan como parámetros los 2 números y devuelvan el resultado adecuado.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2021-06-05/ejercicio4.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-5&#34;&gt;Ejercicio 5&lt;/h2&gt;
&lt;p&gt;El fichero 
&lt;a href=&#34;../soluciones/examen-2021-06-05/cercanias.csv&#34;&gt;&lt;code&gt;cercanias.csv&lt;/code&gt;&lt;/a&gt; contiene información sobre las líneas de tren de cercanías de Madrid: id (identificador del tren), línea (nombre de la línea), estaciones (estaciones de origen y destino separadas por un guion). Se pide:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Construir una función que lea el fichero &lt;code&gt;cercanias.csv&lt;/code&gt; y cree un diccionario donde la clave de cada par sea el identificador de la línea y el valor asociado una lista de dos elementos con la estación de origen y la estación de destino como el que se muestra a continuación a modo de ejemplo:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;{&#39;10T0001C1&#39;: [&#39;Principe Pio&#39;, &#39;Aeropuerto&#39;], &#39;10T0002C1&#39;: [&#39;Aeropuerto&#39;, &#39;Principe Pio&#39;], ...}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;La función debe recibir el nombre del fichero como parámetro.
2. Construir otra función que guarde la información del diccionario obtenido en el apartado anterior en un fichero csv separado por punto y coma con 3 columnas con los encabezados id, origen y destino. La función debe recibir como parámetros el diccionario con los trenes y el nombre del fichero resultante.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2021-06-05/ejercicio5.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-6&#34;&gt;Ejercicio 6&lt;/h2&gt;
&lt;p&gt;Construir un programa que realize las siguientes operaciones con la librería Pandas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Crear un DataFrame con las siguientes columnas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nombre: Juan, Marta, Pedro, Jorge, Blas, Lisa, Antonio&lt;/li&gt;
&lt;li&gt;Edad: 23,78,22,19,45,33,20&lt;/li&gt;
&lt;li&gt;Género: M, F, M, M, M, F, M&lt;/li&gt;
&lt;li&gt;Provincia&amp;rsquo;: Burgos, Madrid, Toledo, Burgos, Madrid, Toledo, Madrid&lt;/li&gt;
&lt;li&gt;Hijos: 2,0,0,3,2,1,4&lt;/li&gt;
&lt;li&gt;Mascotas: 5,1,0,5,2,2,3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mostrar la información básica del DataFrame.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Obtener los principales estadísticos de las columnas numéricas.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Obtener los porcentajes de hombres y mujeres por provincias.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Representar, mediante un diagrama de dispersión, en número de hijos frente al número de mascotas para las personas de Madrid.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Realizar la siguiente gráfica.
&lt;img src=&#34;../img/diagrama-barras-provincias.png&#34; alt=&#34;&amp;amp;lsquo;Recta de regresión&amp;amp;rsquo;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2021-06-05/ejercicio6.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Examen de Inteligencia de los Negocios 2021-05-26</title>
      <link>/docencia/python/examenes/inteligencia-negocios/examen-python-2021-05-26/</link>
      <pubDate>Wed, 26 May 2021 00:00:00 +0000</pubDate>
      <guid>/docencia/python/examenes/inteligencia-negocios/examen-python-2021-05-26/</guid>
      <description>&lt;p&gt;Grado: Inteligencia de los Negocios&lt;br&gt;
Fecha: 26 de mayo de 2021&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-1&#34;&gt;Ejercicio 1&lt;/h2&gt;
&lt;p&gt;Dadas dos listas de números del mismo tamaño &lt;code&gt;x&lt;/code&gt; e &lt;code&gt;y&lt;/code&gt;, construir las siguientes funciones:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Una función para calcular la media de una lista de números.&lt;/li&gt;
&lt;li&gt;Una función para calcular la varianza de una lista de números.&lt;/li&gt;
&lt;li&gt;Una función para calcular la covarianza de dos listas de números.&lt;/li&gt;
&lt;li&gt;Una función para calcular los coeficientes de la recta de regresión de &lt;code&gt;y&lt;/code&gt; sobre &lt;code&gt;x&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Una función que devuelva el diagrama de dispersión y la recta de regresión como la que se muestra en el siguiente ejemplo:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-pyhton&#34;&gt;x = [1, 2, 3, 4, 5, 6]
y = [20, 18, 12, 10, 9, 9]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/recta-regresion.png&#34; alt=&#34;&amp;amp;lsquo;Recta de regresión&amp;amp;rsquo;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Usar las siguientes fórmulas para el cálculo de los estadísticos: $\bar x = \frac{\sum x_i}{n}$, $s^2 = \frac{\sum x_i^2}{n}-\bar{x}^2$, $s_{xy} = \frac{\sum x_iy_j}{n} - \bar{x}\bar{y}$, $b = \frac{s_{xy}}{s_x^2}$ y $a = \bar{y} - b * \bar{x}$.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2021-05-26/ejercicio1.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-2&#34;&gt;Ejercicio 2&lt;/h2&gt;
&lt;p&gt;Escribir una función que, dado un número &lt;code&gt;x&lt;/code&gt;, genere una matriz cuadrada (&lt;code&gt;x*x&lt;/code&gt; elementos) con el resultado de sus tablas de multiplicar desde 0 hasta &lt;code&gt;x&lt;/code&gt;. El resultado debe guardarse en un fichero llamado &lt;code&gt;tabla-X.txt&lt;/code&gt; donde &lt;code&gt;X&lt;/code&gt; es el número introducido por el usuario.&lt;/p&gt;
&lt;p&gt;Escribir otra función que, dado un número &lt;code&gt;x&lt;/code&gt;, acceda al fichero de la tabla correspondiente y muestre la tabla por pantalla. En caso de que la tabla no exista deberá controlar la excepción para mostrar un mensaje de aviso al usuario.&lt;/p&gt;
&lt;p&gt;Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt;&amp;gt;&amp;gt; Introduce un número entre 1 y 10: 5
&amp;gt;&amp;gt;&amp;gt; Contenido del fichero matriz-5.txt
0    0    0    0    0    0
0    1    2    3    4    5
0    2    4    6    8    10
0    3    6    9    12   15
0    4    8    12   16   20
0    5    10   15   20   25
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2021-05-26/ejercicio2.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-3&#34;&gt;Ejercicio 3&lt;/h2&gt;
&lt;p&gt;Crear un programa utilizando la librería Pandas y Matplotlib que realice lo siguiente:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Crear el siguiente DataFrame indexado:
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;  calorias  tiempo
L      420      60
M      380      40
X      390      75
J      490      55
V      300      45
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Calcular la media, mediana y desviación típica de ambas columnas.&lt;/li&gt;
&lt;li&gt;Añadir otra columna booleana al DataFrame para ver si se ha cumplido el reto de quemar más de 400 calorías por hora. La nueva columna debe generarse aplicando una fórmula a las otras columnas. El DataFrame resultante debe ser el siguiente:
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;  calorias  tiempo   reto
L      420      60   True
M      380      40   True
X      390      75  False
J      490      55   True
V      300      45  False
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Filtrar el DataFrame y devolver otro DataFrame con las filas pares que cumplan que el número de calorías es mayor de 400.&lt;/li&gt;
&lt;li&gt;Crear a partir del DataFrame una serie con los porcentajes de días que se ha conseguido el reto y los que no.&lt;/li&gt;
&lt;li&gt;Crear un gráfico como el de más abajo que muestre la progresión de las calorías y tiempo durante la semana.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;../img/evolucion-calorias.png&#34; alt=&#34;Serie evolución calorias&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2021-05-26/ejercicio3.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Examen de Inteligencia de los Negocios 2021-03-25</title>
      <link>/docencia/python/examenes/inteligencia-negocios/examen-python-2021-03-25/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      <guid>/docencia/python/examenes/inteligencia-negocios/examen-python-2021-03-25/</guid>
      <description>&lt;p&gt;Grado: Inteligencia de los Negocios&lt;br&gt;
Fecha: 25 de marzo de 2021&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-1&#34;&gt;Ejercicio 1&lt;/h2&gt;
&lt;p&gt;El cálculo del IRPF en la Hacienda española se define como progresivo. Hacienda divide los ingresos (tu renta) en tramos y asigna un porcentaje a pagar en cada uno de ellos. Estos tramos son los siguientes:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Tramos IRPF 2021&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Tipos a aplicar&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Desde 0 hasta 12.450€&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;19%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;De 12.450€ a 20.200€&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;24%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;De 20.200€ a 35.200€&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;30%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;De 35.200€ en adelante&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;37%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Por ejemplo, para una persona con una renta de 65.000€, el cálculo del impuesto se haría así:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Primer tramo IRPF: se paga el 19% de 12.450 euros, es decir, 2.365,5 euros&lt;/li&gt;
&lt;li&gt;Segundo tramo IRPF: se paga el 24% de 7.750 euros (la diferencia entre el primer y segundo tramo), es decir, 1.860 euros.&lt;/li&gt;
&lt;li&gt;Tercer tramo IRPF: se paga el 30% de 15.000 euros (la diferencia entre el segundo y tercer tramo), es decir, 4.500 euros.&lt;/li&gt;
&lt;li&gt;Cuarto tramo IRPF: se paga el 37% de 29.800 euros (la diferencia entre su renta y el límite del tercer tramo), es decir, 11.026 euros.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La suma de las anteriores cantidades es el total a pagar: 19.751,5 euros.&lt;/p&gt;
&lt;p&gt;Escribir un programa que pregunte por la renta del usuario y muestre por pantalla el IRPF que debe pagar a Hacienda.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2021-03-25/ejercicio1.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-2&#34;&gt;Ejercicio 2&lt;/h2&gt;
&lt;p&gt;Juan juega siempre la misma combinación a la bonoloto: 7, 13, 21, 37, 46, 49.&lt;/p&gt;
&lt;p&gt;Construir un programa que pregunte al usuario por la combinación ganadora y diga si Juan ha ganado o, en caso contrario, muestre por pantalla la lista de los números que no ha acertado. El programa debe usar listas.&lt;/p&gt;
&lt;p&gt;Nota: El juego de la bonoloto consiste en acertar una combinación de 6 números entre 1 y 49.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2021-03-25/ejercicio2.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-3&#34;&gt;Ejercicio 3&lt;/h2&gt;
&lt;p&gt;Los productos en oferta de una tienda de informática se guardan una cadena como la de más abajo, donde cada línea (separadas por el carácter de cambio de línea ‘\n’) contiene el nombre del producto, el número de unidades en stock, el precio (en €) y el descuento que tiene (en porcentaje), separados por punto y coma.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;disco duro 500Gb;200;25;15\nmemoria ram 16Gb;500;30;20\nratón inalámbrico;800;12;10\ntarjeta wifi;150;20;12&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Construir un programa que genere, a partir de la cadena anterior, un diccionario como el de más abajo, donde cada par corresponda un producto, siendo la clave el nombre del producto y el valor una lista con el resto de la información del producto.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;{‘disco duro 500Gb’: [‘200’, ‘25’, ‘15’], ‘memoria ram 16Gb’: [‘500’, ‘30’, ‘20’], ‘ratón inalámbrico’: [‘800’, ‘12’, ‘10’], ‘tarjeta wifi’: [‘150’, ‘20’, ‘12’]}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Después el programa debe recorrer el diccionario y mostrar por pantalla un listado con los nombres de todos los productos en oferta y su precio final tras aplicar el descuento.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2021-03-25/ejercicio3.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Examen de Inteligencia de los Negocios 2020-06-19</title>
      <link>/docencia/python/examenes/inteligencia-negocios/examen-python-2020-06-19/</link>
      <pubDate>Fri, 19 Jun 2020 00:00:00 +0000</pubDate>
      <guid>/docencia/python/examenes/inteligencia-negocios/examen-python-2020-06-19/</guid>
      <description>&lt;p&gt;Grado: Inteligencia de los Negocios&lt;br&gt;
Fecha: 19 de Junio de 2020&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-1&#34;&gt;Ejercicio 1&lt;/h2&gt;
&lt;p&gt;Escribe un programa en python que permita guardar las notas de un alumno conseguidas en un cuatrimestre. Guarda la información en un diccionario cuyas claves sean las asignaturas y los valores las notas de cada asignatura. El programa pedirá la asignatura y la nota para esa asignatura. Si se recibe un número negativo en la nota, el programa termina y muestra las asignaturas suspensas.&lt;/p&gt;
&lt;p&gt;Ejemplo&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ssh&#34;&gt;Introduce una asignatura: matemáticas
Introduce la nota: 4
Introduce una asignatura: economía
Introduce la nota: 8
Introduce una asignatura: programación
Introduce la nota: 10
Introduce una asignatura: ninguna
Introduce la nota: -2
Las asignaturas suspensas son:
matemáticas
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2020-06-19/ejercicio1.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-2&#34;&gt;Ejercicio 2&lt;/h2&gt;
&lt;p&gt;Escribir una función que tome una lista de números enteros desordenados y devuelva dos listas ordenadas. La primera con los números pares y la segunda con los números impares.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2020-06-19/ejercicio2.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-3&#34;&gt;Ejercicio 3&lt;/h2&gt;
&lt;p&gt;Escribir un programa para gestionar las citas de una consulta médica. La base de datos de citas debe estar en un fichero de nombre &lt;code&gt;citas.csv&lt;/code&gt;. Cada cita contendrá los campos &lt;code&gt;dni&lt;/code&gt;, &lt;code&gt;mes&lt;/code&gt;, &lt;code&gt;dia&lt;/code&gt;, &lt;code&gt;hora&lt;/code&gt; y &lt;code&gt;especialidad&lt;/code&gt;. No es necesario que la primera fila del csv contenga los nombres de los campos. El programa debe incluir las siguientes funciones:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Una función que permita generar el fichero y añadir una cita a la base de datos.&lt;/li&gt;
&lt;li&gt;Una función que reciba un dni y devuelva una lista con las citas de ese paciente.&lt;/li&gt;
&lt;li&gt;Una función para eliminar las citas anteriores a una fecha dada.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2020-06-19/ejercicio3.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-4&#34;&gt;Ejercicio 4&lt;/h2&gt;
&lt;p&gt;El fichero 
&lt;a href=&#34;../soluciones/examen-2020-06-19/ipc-2020.csv&#34;&gt;ipc-2020.csv&lt;/a&gt; contiene el IPC de las comunidades autónomas de los cinco primeros meses de 2020. Crear un programa que realice las siguientes operaciones utilizando la librería Pandas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Crear un DataFrame leyendo el fichero desde internet con la url &lt;code&gt;https://aprendeconalf.es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2020-06-19/ipc-2020.csv&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla el DataFrame con los datos de las filas 10 a 15.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla el DataFrame con los datos de Canarias de Mayo.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla una serie con el IPC mensual máximo de cada comunidad autónoma.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla una serie con la desviación típica del IPC mensual de cada grupo.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla un DataFrame con las comunidades y grupos donde los precios no han subido en promedio (IPC mensual medio menor de 100).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2020-06-19/ejercicio4.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Examen de Inteligencia de los Negocios 2020-05-27</title>
      <link>/docencia/python/examenes/inteligencia-negocios/examen-python-2020-05-27/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
      <guid>/docencia/python/examenes/inteligencia-negocios/examen-python-2020-05-27/</guid>
      <description>&lt;p&gt;Grado: Inteligencia de los Negocios&lt;br&gt;
Fecha: 27 de Mayo de 2020&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-1&#34;&gt;Ejercicio 1&lt;/h2&gt;
&lt;p&gt;Escribir un programa al que al introducirle la altura de una línea sea capaz de dibujarla en diagonal con asteriscos. Por ejemplo, si introducimos &lt;code&gt;altura = 5&lt;/code&gt; dibujaría lo siguiente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    *
   *
  *
 *
*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2020-05-27/ejercicio1.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-2&#34;&gt;Ejercicio 2&lt;/h2&gt;
&lt;p&gt;Escribir una función que cuente las palabras que hay en una frase y las devuelva dentro de un diccionario. También tiene que devolver una lista con las palabras que aparecen más de una vez. Por ejemplo si se le pasa la frase: &lt;code&gt;La caracola está enterrada al lado de otra caracola de color&lt;/code&gt; la función debe devolver el diccionario y la lista siguientes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;{&#39;La&#39;: 1, &#39;caracola&#39;: 2, &#39;está&#39;: 1, &#39;enterrada&#39;: 1, &#39;al&#39;: 1, &#39;lado&#39;: 1, &#39;de&#39;: 2, &#39;otra&#39;: 1, &#39;color&#39;: 1}
[&#39;caracola&#39;, &#39;de&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2020-05-27/ejercicio2.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-3&#34;&gt;Ejercicio 3&lt;/h2&gt;
&lt;p&gt;El fichero 
&lt;a href=&#34;../soluciones/examen-2020-05-27/horas-trabajo.csv&#34;&gt;horas-trabajo.csv&lt;/a&gt; contiene el número de horas mensuales trabajadas por los empleados de una empresa durante el primer cuatrimestre. Crear un programa que realice las siguientes operaciones sin utilizar la librería Pandas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Leer el fichero de internet &lt;code&gt;https://aprendeconalf.es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2020-05-27/horas-trabajo.csv&lt;/code&gt; y crear una lista con las líneas del fichero.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla las horas totales del primer operario.&lt;/li&gt;
&lt;li&gt;Crear un diccionario de diccionarios tal que las claves del diccionario principal serán los identificadores de los operarios y sus valores serán, a su vez, otros diccionarios cuyas claves serán los meses y sus valores las horas trabajadas en esos meses para cada operario. Es decir, un diccionario como el siguiente:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;{&#39;OP1&#39;: {&#39;Enero&#39;: &#39;180&#39;, &#39;Febrero&#39;: &#39;160&#39;, &#39;Marzo&#39;: &#39;140&#39;, &#39;Abril&#39;: &#39;180&#39;},
&#39;OP2&#39;: {&#39;Enero&#39;: &#39;120&#39;, &#39;Febrero&#39;: &#39;140&#39;, &#39;Marzo&#39;: &#39;&#39;, &#39;Abril&#39;: &#39;100&#39;}, ... }
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Crear una función que reciba la base de datos de las horas trabajadas (puede utilizarse el diccionario del apartado anterior u otra estructura de datos), el identificador de un operario y el precio de la hora, y devuelva una tupla con el número totales de horas trabajadas y el salario de ese operario.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2020-05-27/ejercicio3.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-4&#34;&gt;Ejercicio 4&lt;/h2&gt;
&lt;p&gt;El fichero 
&lt;a href=&#34;http://aprendeconalf.es/python/examenes/soluciones/examen-2020-05-27/horas-trabajo.csv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;horas-trabajo.csv&lt;/a&gt; contiene el número de horas mensuales trabajadas por los empleados de una empresa durante el primer cuatrimestre. Crear un programa que realice las siguientes operaciones utilizando la librería Pandas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Crear un DataFrame leyendo el fichero desde internet con la url &lt;code&gt;http://aprendeconalf.es/python/examenes/soluciones/examen-2020-05-27/horas-trabajo.csv&lt;/code&gt;. Obsérvese que el separador de campos es el punto y coma.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla una serie con el número total de horas trabajadas para cada mes.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla una serie con el número de operarios de cada departamento.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla el número de empleados que han trabajado todos los meses, es decir, que tienen un número de horas todos los meses del cuatrimestre.&lt;/li&gt;
&lt;li&gt;Convertir el DataFrame a formato largo, de manera que todas las horas aparezcan en la misma columna.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla una serie con el número medio de horas trabajadas en cada departamento.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla una serie con el total de horas trabajadas de cada operario.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla una serie con los salarios de todos los operarios ordenados de mayor a menor.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2020-05-27/ejercicio4.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Examen de Inteligencia de los Negocios 2019-06-18</title>
      <link>/docencia/python/examenes/inteligencia-negocios/examen-python-2019-06-18/</link>
      <pubDate>Tue, 18 Jun 2019 00:00:00 +0000</pubDate>
      <guid>/docencia/python/examenes/inteligencia-negocios/examen-python-2019-06-18/</guid>
      <description>&lt;p&gt;Grado: Inteligencia de los Negocios&lt;br&gt;
Fecha: 18 de Junio de 2019&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-1&#34;&gt;Ejercicio 1&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Clonar con git el repositorio con la url &lt;code&gt;https://github.com/asalberceu/examen-fundamentos-computadores-2019-06-18-parcial1.git&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Crear una rama con los apellidos del alumno en mayúsculas y separados por un guión, es decir, &lt;code&gt;&amp;lt;APELLIDO1-APELLIDO2&amp;gt;&lt;/code&gt;, y convertir esta rama en la rama activa.&lt;/li&gt;
&lt;li&gt;Crear el fichero &lt;code&gt;ejercicio1.3.txt&lt;/code&gt; que contenga la salida del comando de Git que muestra el historial de commits del repositorio, mostrando un commit por línea.&lt;/li&gt;
&lt;li&gt;Crear un fichero &lt;code&gt;ejercicio1.4.txt&lt;/code&gt; que contenga la salida del comando que muestra las diferencias entre el primer y el tercer commits del repositorio.&lt;/li&gt;
&lt;li&gt;Crear un fichero &lt;code&gt;ejercicio1.5.txt&lt;/code&gt; que contenga la salida del comando de Git que muestra los repositorios remotos configurados junto con sus urls.&lt;/li&gt;
&lt;li&gt;Añadir todos los cambios a la zona temporal de intercambio y hacer un commit con el mensaje &amp;ldquo;Añadidas respuestas ejercicio 1.&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;spoiler &#34; &gt;
  &lt;p&gt;
    &lt;a class=&#34;btn btn-primary&#34; data-toggle=&#34;collapse&#34; href=&#34;#spoiler-0&#34; role=&#34;button&#34; aria-expanded=&#34;false&#34; aria-controls=&#34;spoiler-0&#34;&gt;
      Solución
    &lt;/a&gt;
  &lt;/p&gt;
  &lt;div class=&#34;collapse card &#34; id=&#34;spoiler-0&#34;&gt;
    &lt;div class=&#34;card-body&#34;&gt;
      &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt; git clone https://github.com/asalberceu/examen-fundamentos-computadores-2019-06-18-parcial1.git
&amp;gt; cd examen-fundamentos-computadores-2019-06-18-parcial1.git
&amp;gt; git checkout -b SANCHEZ-ALBERCA
&amp;gt; git log --oneline &amp;gt; ejercicio1.3.txt
&amp;gt; git diff f9ed835 a485ced &amp;gt; ejercicio1.4.txt
&amp;gt; git remote -v &amp;gt; ejercicio1.5.txt
&amp;gt; git add . 
&amp;gt; git commit -m &amp;quot;Añadida respuestas.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;ejercicio-2&#34;&gt;Ejercicio 2&lt;/h2&gt;
&lt;p&gt;A lo largo de un curso se realizan dos exámenes parciales. Para aprobar el curso la nota media debe ser mayor o igual que 5 siempre y cuando en ambos parciales se tenga al menos un 4. Escribir un programa que pregunte al usuario la nota de los dos parciales y muestre por pantalla si el alumno ha aprobado el curso o si no, y en caso de no haber aprobado, qué parcial tiene que repetir por tener menos de 4 en él.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2019-06-18/ejercicio2.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-3&#34;&gt;Ejercicio 3&lt;/h2&gt;
&lt;p&gt;Un n-grama es una secuencia de $n$ caracteres consecutivos de una cadena. Por ejemplo, los 3-gramas de la cadena &lt;code&gt;&#39;Python&#39;&lt;/code&gt; son &lt;code&gt;&#39;Pyt&#39;&lt;/code&gt;, &lt;code&gt;&#39;yth&#39;&lt;/code&gt;, &lt;code&gt;&#39;tho&#39;&lt;/code&gt; y &lt;code&gt;&#39;hon&#39;&lt;/code&gt;. Escribir un programa que pregunte por una cadena y un número entero positivo $n$ y muestre por pantalla todos los n-gramas de la cadena.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2019-06-18/ejercicio3.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-4&#34;&gt;Ejercicio 4&lt;/h2&gt;
&lt;p&gt;Escribir un programa que elimine de una lista dada todos los elementos repetidos y muestre por pantalla los elementos de la lista sin repeticiones.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2019-06-18/ejercicio4.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-5&#34;&gt;Ejercicio 5&lt;/h2&gt;
&lt;p&gt;Definir funciones para codificar y decodificar mensajes en código morse.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Definir una función para codificar una palabra en código morse. Debe cumplir los siguientes requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Debe usarse el diccionario que se da.&lt;/li&gt;
&lt;li&gt;El único parámetro de entrada de la función es una cadena con una palabra.&lt;/li&gt;
&lt;li&gt;Debe devolver una cadena con el código morse correspondiente a la palabra, separando los bloques de código correspondientes a cada letra por punto y coma &lt;code&gt;;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Definir una función para decodificar una palabra en código morse. Debe cumplir los siguientes requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A partir del diccionario que se da se debe crear el diccionario invertido, es decir, un diccionario cuyas claves son los códigos morse y sus valores las letras correspondientes. Se valorará especialmente el uso de comprensión de diccionarios.&lt;/li&gt;
&lt;li&gt;El único parámetro de entrada de la función es una cadena de código morse, donde los bloques de código correspondientes a cada letra van separados por puntos y coma &lt;code&gt;;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Debe devolver una cadena con la palabra decodificada.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Definir una función para codificar un mensaje en código morse. Debe cumplir los siguientes requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Debe usarse la función anterior para codificar palabras.&lt;/li&gt;
&lt;li&gt;El único parámetro de entrada de la función es una cadena con un mensaje (palabras separadas con espacios).&lt;/li&gt;
&lt;li&gt;Debe devolver una cadena con las palabras del mensaje codificadas y separadas por espacios.&lt;/li&gt;
&lt;li&gt;Se valorará especialmente el uso de programación funcional.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Definir una función para decodificar un mensaje en código morse. Debe cumplir los siguientes requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Debe usarse la función anterior para decodificar palabras.&lt;/li&gt;
&lt;li&gt;El único parámetro de entrada de la función es una cadena con un mensaje en código morse (letras separadas por punto y coma, y palabras separadas con espacios).&lt;/li&gt;
&lt;li&gt;Debe devolver una cadena con las palabras del mensaje decodificadas y separadas por espacios.&lt;/li&gt;
&lt;li&gt;Se valorará especialmente el uso de programación funcional.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2019-06-18/ejercicio5.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-6&#34;&gt;Ejercicio 6&lt;/h2&gt;
&lt;p&gt;La url 
&lt;a href=&#34;https://datos.madrid.es/egob/catalogo/300117-0-arrendamiento-programas.csv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;https://datos.madrid.es/egob/catalogo/300117-0-arrendamiento-programas.csv&lt;/code&gt;&lt;/a&gt; apunta a un fichero en formato csv con datos de los arrendamientos de viviendas de la Empresa Municipal de la Vivienda del Ayuntamiento de Madrid.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Construir una función que abra un fichero con el formato anterior y devuelva una lista cuyos elementos son a su vez las listas que contienen los datos de cada línea del fichero menos la primera línea. Debe cumplir los siguientes requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;La función recibirá como único parámetro la url del fichero.&lt;/li&gt;
&lt;li&gt;Debe leer el fichero por líneas y para cada línea debe dividir la línea por el separador de campos (punto y coma) y guardar los datos en una lista.&lt;/li&gt;
&lt;li&gt;Debe devolver la lista con las listas de datos obtenidas a partir de cada línea.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Construir una función que reciba una lista de listas como la que devuelve la función anterior y devuelva otra lista con los nombres de los distritos contenidos en la lista. Debe cumplir los siguientes requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;La función recibirá como único parámetro una lista de listas con las viviendas arrendadas por distrito.&lt;/li&gt;
&lt;li&gt;Debe recorrer la lista de listas y para cada lista debe extraer el nombre del distrito y añadirlo a una lista con los distritos.&lt;/li&gt;
&lt;li&gt;Debe devolver la lista de distritos.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Construir una función que reciba una lista de listas como la que devuelve la primera función y una lista de nombres de distritos y devuelva la lista con las listas correspondientes a los distritos indicados. Debe satisfacer los siguientes requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;La función recibirá como parámetros una lista de listas con las viviendas arrendadas por distrito y otra lista con nombres de distritos.&lt;/li&gt;
&lt;li&gt;Debe recorrer la lista de viviendas arrendadas y añadir a otra lista nueva las líneas correspondientes a los distritos indicados en la segunda lista.&lt;/li&gt;
&lt;li&gt;Debe devolver la nueva lista con las listas correspondientes a los distritos indicados.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Construir una función que reciba una lista como la que devuelve la primera función y devuelva un diccionario cuyas claves sean los nombres de distrito y cuyos valores sean el total de viviendas arrendadas en el distrito. Debe cumplir los siguientes requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;La función recibirá como único parámetro la lista con las viviendas arrendadas por distrito.&lt;/li&gt;
&lt;li&gt;Debe recorrer la lista de listas y para cada lista extraer el nombre del distrito y el total de viviendas arrendadas en el distrito y añadir el par a un diccionario.&lt;/li&gt;
&lt;li&gt;Debe devolver un diccionario con un par para cada lista de la lista, cuya clave sea el nombre del distrito y cuyo valor sea el número total de viviendas arrendadas en ese distrito.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2019-06-18/ejercicio6.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Examen de Inteligencia de los Negocios 2019-05-27</title>
      <link>/docencia/python/examenes/inteligencia-negocios/examen-python-2019-05-27/</link>
      <pubDate>Mon, 27 May 2019 00:00:00 +0000</pubDate>
      <guid>/docencia/python/examenes/inteligencia-negocios/examen-python-2019-05-27/</guid>
      <description>&lt;p&gt;Grado: Inteligencia de los Negocios&lt;br&gt;
Fecha: 27 de Mayo de 2019&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-1&#34;&gt;Ejercicio 1&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Clonar con git el repositorio con la url &lt;code&gt;https://github.com/asalberceu/examen-fundamentos-computadores-2019-05-27-parcial1.git&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Crear una rama con los apellidos del alumno en mayúsculas y separados por un guión, es decir, &lt;code&gt;&amp;lt;APELLIDO1-APELLIDO2&amp;gt;&lt;/code&gt;, y convertir esta rama en la rama activa.&lt;/li&gt;
&lt;li&gt;Crear el fichero &lt;code&gt;ejercicio1.3.txt&lt;/code&gt; que contenga la salida del comando de Git que muestra para cada línea del fichero &lt;code&gt;ejercicio2.py&lt;/code&gt; la información sobre el commit en que se realizó el último cambio en esa línea.&lt;/li&gt;
&lt;li&gt;Crear un fichero &lt;code&gt;ejercicio1.4.txt&lt;/code&gt; que contenga la salida del comando que muestra las diferencias entre el primer y el segundo commits del repositorio.&lt;/li&gt;
&lt;li&gt;Crear un fichero &lt;code&gt;ejercicio1.5.txt&lt;/code&gt; que contenga la salida del comando de Git que muestra el estado actual del repositorio.&lt;/li&gt;
&lt;li&gt;Añadir todos los cambios a la zona temporal de intercambio y hacer un commit con el mensaje &amp;ldquo;Añadidas respuestas.&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;spoiler &#34; &gt;
  &lt;p&gt;
    &lt;a class=&#34;btn btn-primary&#34; data-toggle=&#34;collapse&#34; href=&#34;#spoiler-0&#34; role=&#34;button&#34; aria-expanded=&#34;false&#34; aria-controls=&#34;spoiler-0&#34;&gt;
      Solución
    &lt;/a&gt;
  &lt;/p&gt;
  &lt;div class=&#34;collapse card &#34; id=&#34;spoiler-0&#34;&gt;
    &lt;div class=&#34;card-body&#34;&gt;
      &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt; git clone https://github.com/asalberceu/examen-fundamentos-computadores-2019-05-27-parcial1.git
&amp;gt; cd examen-fundamentos-computadores-2019-05-27-parcial1.git
&amp;gt; git checkout -b SANCHEZ-ALBERCA
&amp;gt; git annotate ejercicio2.py &amp;gt; ejercicio1.3.txt
&amp;gt; git diff afce5 b4a76 &amp;gt; ejercicio1.4.txt
&amp;gt; git status &amp;gt; ejercicio1.5.txt
&amp;gt; git add . 
&amp;gt; git commit -m &amp;quot;Añadida respuestas.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;ejercicio-2&#34;&gt;Ejercicio 2&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pida al usuario un número entero $n$ y muestre por pantalla un triángulo el de más abajo.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    * 
   ***
  *****
 *******
*********
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;donde $n$ es el número de filas del triángulo.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2019-05-27/ejercicio2.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-3&#34;&gt;Ejercicio 3&lt;/h2&gt;
&lt;p&gt;Escribir un programa para ver los beneficios de una empresa en un periodo de años.&lt;/p&gt;
&lt;p&gt;El programa debe cumplir los siguientes requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El programa tiene que preguntar al usuario por un año inicial y otro final, y después preguntar por los ingresos y los gastos de cada año desde el año inicial hasta el año final.&lt;/li&gt;
&lt;li&gt;Con los datos introducidos se deben crear dos listas, una con los ingresos y otra con los gastos, de manera que los ingresos y los gastos de cada año aparezcan en la misma posición de las listas.&lt;/li&gt;
&lt;li&gt;El programa debe crear otra lista con el beneficio de cada año (ingresos menos gastos) y mostrarla por pantalla.&lt;/li&gt;
&lt;li&gt;El programa debe crear otra lista booleana que indique para cada año si ha habido beneficios o no y mostrarla por pantalla.&lt;/li&gt;
&lt;li&gt;Finalmente el programa debe mostrar por pantalla la lista de los años con beneficios la lista de los años con pérdidas.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2019-05-27/ejercicio3.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-4&#34;&gt;Ejercicio 4&lt;/h2&gt;
&lt;p&gt;Definir una función que reciba un número entero entre 0 y 999, y devuelva una cadena con la cantidad introducida en palabras. Por ejemplo, si se introduce 647 debe devolver la cadena &amp;ldquo;seiscientos cuarenta y siete&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;La función debe cumplir los siguientes requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El único parámetro de entrada de la función es un número entero entre 0 y 999.&lt;/li&gt;
&lt;li&gt;Deben usarse diccionarios para emparejar cada dígito con la palabra correspondiente para las unidades, decenas y centenas.&lt;/li&gt;
&lt;li&gt;Debe devolver una cadena con la cantidad introducida en palabras.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2019-05-27/ejercicio4.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-5&#34;&gt;Ejercicio 5&lt;/h2&gt;
&lt;p&gt;El fichero 
&lt;a href=&#34;../soluciones/examen-2019-05-27/cotizacion.csv&#34;&gt;&lt;code&gt;cotizacion.csv&lt;/code&gt;&lt;/a&gt; contiene las cotizaciones de las empresas del IBEX35 con las siguientes columnas: &lt;code&gt;nombre&lt;/code&gt; (nombre de la empresa), &lt;code&gt;Final&lt;/code&gt; (precio de la acción al cierre de bolsa), &lt;code&gt;Máximo&lt;/code&gt; (precio máximo de la acción durante la jornada), &lt;code&gt;Mínimo&lt;/code&gt; (precio mínimo de la acción durante la jornada), &lt;code&gt;volumen&lt;/code&gt; (Volumen al cierre de bolsa), &lt;code&gt;Efectivo&lt;/code&gt; (capitalización al cierre en miles de euros).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Construir una función que abra un fichero con el formato anterior y devuelva un diccionario con los datos del fichero por columnas.&lt;/p&gt;
&lt;p&gt;La función debe cumplir los siguientes requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;La función recibirá como único parámetro la ruta del fichero.&lt;/li&gt;
&lt;li&gt;Debe realizarse un preprocesado de los datos que reemplace la coma por el punto como separador de decimales.&lt;/li&gt;
&lt;li&gt;Debe realizarse el control de errores mediante excepciones para el caso de que el fichero no exista en la ruta indicada.&lt;/li&gt;
&lt;li&gt;Debe devolver un diccionario con tantos elementos como columnas tenga el fichero, donde la clave de cada par sea el nombre de la columna y el valor la lista de datos de la columna.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Construir una función que reciba el diccionario devuelto por la función anterior y cree un fichero en formato csv con el mínimo, el máximo y la media de dada columna.&lt;/p&gt;
&lt;p&gt;La función debe cumplir los siguientes requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;La función recibirá como parámetros el diccionario con los datos de cotización y la ruta del fichero a crear.&lt;/li&gt;
&lt;li&gt;El fichero generado tendrá las mismas columnas que el fichero &lt;code&gt;cotizacion.csv&lt;/code&gt; con los mismos nombres de columnas, y tres líneas correspondientes al mínimo, máximo y media de los datos de cada columna. En la columna &lt;code&gt;nombre&lt;/code&gt; en lugar del nombre de la empresa debe aparecer la medida calculada en esa línea (mínimo, máximo o media). Los datos deben estar separados por punto y coma.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2019-05-27/ejercicio5.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-6&#34;&gt;Ejercicio 6&lt;/h2&gt;
&lt;p&gt;Definir una función que reciba una lista de facturas, un NIF y un mes, y devuelva un diccionario con el número de facturas emitidas a ese NIF en el mes indicado y el total facturado en ese mes.&lt;/p&gt;
&lt;p&gt;La función debe cumplir los siguientes requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Los parámetros de entrada serán una lista de facturas, una cadena con un NIF y otra cadena con el mes.&lt;/li&gt;
&lt;li&gt;Cada factura se representarán mediante un diccionario con las claves &lt;code&gt;nif&lt;/code&gt; (NIF del cliente), &lt;code&gt;mes&lt;/code&gt; (mes de emisión de la factura), &lt;code&gt;cantidad&lt;/code&gt; (cantidad facturada sin IVA), &lt;code&gt;iva&lt;/code&gt; (porcentaje de IVA a aplicar).&lt;/li&gt;
&lt;li&gt;Se debe crear una lista con el total de cada factura (una vez aplicado el IVA) para el NIF y el mes indicados utilizando programación funcional o comprensión de listas.&lt;/li&gt;
&lt;li&gt;La función debe devolver un diccionario con el número de facturas y el total facturado al NIF en el mes indicado.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2019-05-27/ejercicio6.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Examen de Inteligencia de los Negocios 2019-03-27</title>
      <link>/docencia/python/examenes/inteligencia-negocios/examen-python-2019-03-27/</link>
      <pubDate>Wed, 27 Mar 2019 00:00:00 +0000</pubDate>
      <guid>/docencia/python/examenes/inteligencia-negocios/examen-python-2019-03-27/</guid>
      <description>&lt;p&gt;Grado: Inteligencia de los Negocios&lt;br&gt;
Fecha: 27 de Marzo de 2019&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-1&#34;&gt;Ejercicio 1&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Clonar con git el repositorio con la url &lt;code&gt;https://github.com/asalberceu/examen-fundamentos-programacion-2019-03-27-A.git&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Crear una rama con los apellidos del alumno en mayúsculas y separados por un guión, es decir, &lt;code&gt;APELLIDO1-APELLIDO2&lt;/code&gt;, y convertir esta rama en la rama activa.&lt;/li&gt;
&lt;li&gt;Crear la carpeta &lt;code&gt;respuestas&lt;/code&gt;, y dentro de ella el fichero &lt;code&gt;ejercicio1.3.txt&lt;/code&gt; que contenga la salida que da el comando de Git para mostrar todas diferencias entre la última versión de la rama actual y la anterior.&lt;/li&gt;
&lt;li&gt;Añadir todos los cambios a la zona temporal de intercambio y hacer un commit con el mensaje &amp;ldquo;Añadida respuesta ejercicio 1.3.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Crear dentro de la carpeta &lt;code&gt;respuestas&lt;/code&gt; el fichero &lt;code&gt;ejercicio1.5.txt&lt;/code&gt; que contenga la salida que da el comando de Git para mostrar todos los commits del repositorio (una línea por commit), incluyendo todas las ramas.&lt;/li&gt;
&lt;li&gt;Añadir todos los cambios a la zona temporal de intercambio y hacer un commit con el mensaje &amp;ldquo;Añadida respuesta ejercicio 1.5.&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;spoiler &#34; &gt;
  &lt;p&gt;
    &lt;a class=&#34;btn btn-primary&#34; data-toggle=&#34;collapse&#34; href=&#34;#spoiler-0&#34; role=&#34;button&#34; aria-expanded=&#34;false&#34; aria-controls=&#34;spoiler-0&#34;&gt;
      Solución
    &lt;/a&gt;
  &lt;/p&gt;
  &lt;div class=&#34;collapse card &#34; id=&#34;spoiler-0&#34;&gt;
    &lt;div class=&#34;card-body&#34;&gt;
      &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt; git clone https://github.com/asalberceu/examen-fundamentos-programacion-2019-03-27-A.git
&amp;gt; cd examen-fundamentos-programacion-2019-03-27-A
&amp;gt; git checkout -b SANCHEZ-ALBERCA
&amp;gt; mkdir respuestas
&amp;gt; git diff HEAD~1 &amp;gt; respuestas/ejercicio1.3.txt
&amp;gt; git add .
&amp;gt; git commit -m &amp;quot;Añadida respuesta ejercicio 1.3&amp;quot;
&amp;gt; git log --oneline --all &amp;gt; respuestas/ejercicio1.5.txt
&amp;gt; git add .
&amp;gt; git commit -m &amp;quot;Añadida respuesta ejercicio 1.5&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;ejercicio-2&#34;&gt;Ejercicio 2&lt;/h2&gt;
&lt;p&gt;Escribir un programa que realice la devolución de una cantidad dada por el usuario en monedas.&lt;/p&gt;
&lt;p&gt;El programa debe cumplir los siguientes requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Solo se disponen de tres tipos de monedas: 5, 2 y 1 €. Crear una lista que contenga estos tres tipos de moneda y usar la lista en la solución.&lt;/li&gt;
&lt;li&gt;El programa debe preguntar al usuario por una cantidad entera de euros.&lt;/li&gt;
&lt;li&gt;El programa debe mostrar por pantalla el mínimo número de monedas necesarias para sumar la cantidad introducida por el usuario y cuántas monedas de cada tipo se necesitan para ello. El número de monedas de cada tipo debe guardarse en otra lista.&lt;/li&gt;
&lt;li&gt;El programa debe guardarse dentro de la carpeta &lt;code&gt;respuestas&lt;/code&gt; con el nombre &lt;code&gt;ejercicio2.py&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Cuando el programa esté terminado, añadir el fichero &lt;code&gt;ejercicio2.py&lt;/code&gt; a la zona de intercambio temporal y hacer un commit con el mensaje &amp;ldquo;Añadida respuesta ejercicio 2&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://repl.it/@asalber/examen-2019-03-27-ejercicio-2&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-3&#34;&gt;Ejercicio 3&lt;/h2&gt;
&lt;p&gt;Escribir un programa que simule el famoso juego del ahorcado.&lt;/p&gt;
&lt;p&gt;El programa debe cumplir los siguientes requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El programa debe preguntar al usuario la palabra a adivinar. A partir de la palabra introducida debe crear una lista con los caracteres de la palabra.&lt;/li&gt;
&lt;li&gt;Después debe ir preguntando al usuario por letras hasta un máximo de 5 fallos o hasta que no queden letras en la lista. En ambos casos el programa terminará pero mostrará el mensaje &amp;ldquo;Perdiste&amp;rdquo; si se comenten 5 fallos y el mensaje &amp;ldquo;Ganaste&amp;rdquo; si no quedan palabras en la lista.&lt;/li&gt;
&lt;li&gt;Cada vez que el usuario introduzca una nueva letra, si la letra está en la lista la eliminará y mostrará el mensaje &amp;ldquo;Acierto&amp;rdquo;, mientras que si la letra no está en la lista mostrará el mensaje &amp;ldquo;Fallo&amp;rdquo;. Si la letra está más de una vez en la lista, sólo se eliminará la primera instancia que aparezca.&lt;/li&gt;
&lt;li&gt;El programa debe guardarse dentro de la carpeta &lt;code&gt;respuestas&lt;/code&gt; con el nombre &lt;code&gt;ejercicio3.py&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Cuando el programa esté terminado, añadir el fichero &lt;code&gt;ejercicio3.py&lt;/code&gt; a la zona de intercambio temporal y hacer un commit con el mensaje &amp;ldquo;Añadida respuesta ejercicio 3&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Requisito adicional para un punto extra:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cada vez que el usuario acierte una letra debe mostrar la palabra a adivinar con las letras acertadas hasta el momento y el resto reemplazadas por asteriscos.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://repl.it/@asalber/examen-2019-03-27-ejercicio-3&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Airbnb Madrid</title>
      <link>/docencia/python/trabajos/inteligencia-negocios/madrid-airbnb1/</link>
      <pubDate>Thu, 01 Jan 1970 01:33:40 +0100</pubDate>
      <guid>/docencia/python/trabajos/inteligencia-negocios/madrid-airbnb1/</guid>
      <description>&lt;p&gt;El objetivo de este trabajo es comprobar si se está utilizando la plataforma Airbnb por parte de empresas, en lugar de particulares, para alquiler turístico en el centro de Madrid.&lt;/p&gt;
&lt;h3 id=&#34;conjunto-de-datos&#34;&gt;Conjunto de datos&lt;/h3&gt;
&lt;p&gt;Datos abiertos de Inside Airbnb: &lt;a href=&#34;../datos/madrid-airbnb-listings-small.csv&#34;&gt;Fichero alojamientos Madrid detallado&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;requisitos-obligatorios&#34;&gt;Requisitos obligatorios&lt;/h3&gt;
&lt;p&gt;Sin usar Pandas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Extraer del fichero de alojamientos una lista con todos los alojamientos, donde cada alojamiento sea un diccionario que contenga el identificador del alojamiento, el identificador del anfitrión, el distrito, el precio y las plazas.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba la lista de alojamientos y devuelva el número de alojamientos en cada distrito.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba la lista de alojamientos y un número de ocupantes y devuelva la lista de alojamientos con un número de plazas mayor o igual que el número de ocupantes.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba la lista de alojamientos un distrito, y devuelva los 10 alojamientos más baratos del distrito.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba la lista de alojamientos y devuelva un diccionario con los anfitriones y el número de alojamientos que posee cada uno.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Usando Pandas:&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;Preprocesar el fichero de alojamientos para crear un data frame con las variables id, host_id, listing_url, room_type, neighbourhood_group_cleansed, price, cleaning_fee, accommodates, minimum_nights, minimum_cost, review_scores_rating, latitude, longitude, is_location_exact. Eliminar del data frame cualquier fila incompleta. Añadir al data frame nuevas variables con el coste mínimo por noche y por persona (que incluya los gastos de limpieza).&lt;/li&gt;
&lt;li&gt;Crear una función que reciba una lista de distritos y devuelva un diccionario con los tipos de alojamiento en ese distrito y el porcentaje de alojamientos de ese tipo.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba una lista de distritos y devuelva un diccionario con el número de alojamientos que cada anfitrión ofrece en esos distrito, ordenado de más a menos alojamientos.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba devuelva un diccionario con el número medio de alojamientos por anfitrión de cada distrito.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba una lista de distritos y dibuje un diagrama de sectores con los porcentajes de tipos de alojamientos en esos distritos.&lt;/li&gt;
&lt;li&gt;Crear una función que dibuje un diagrama de barras con el número de alojamientos por distritos.&lt;/li&gt;
&lt;li&gt;Crear una función que dibuje un diagrama de barras con los porcentajes acumulados de tipos de alojamientos por distritos.&lt;/li&gt;
&lt;li&gt;Crear una función reciba una lista de distritos y una lista de tipos de alojamientos, y dibuje un diagrama de sectores con la distribución del número de alojamientos de ese tipo por anfitrión.&lt;/li&gt;
&lt;li&gt;Crear una función que dibuje un diagrama de barras con los precios medios por persona y día de cada distrito.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba una lista de distritos y dibuje un gráfico de dispersión con el coste mínimo por noche y persona y la puntuación en esos distritos.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba una lista de distritos y dibuje dos histogramas con la distribución de precios por persona y día, uno para los alojamientos con título en inglés y otro para los alojamientos con títulos en español. Si la distribución es muy asimétrica, aplicar una transformación logarítmica. ¿Hay diferencias entre los precios de los alojamientos en inglés y el español? Nota: Para identificar el idioma puede usare el módulo langdetect.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;solución&#34;&gt;Solución&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/trabajos/inteligencia-negocios/soluciones/madrid-airbnb1.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Abrir con &lt;a href=&#34;https://repl.it/@asalber/madrid-airbnb1py&#34;&gt;&lt;img src=&#34;/media/logo-replit.png#left&#34; alt=&#34;Abrir con repl.it&#34;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deuda Pública</title>
      <link>/docencia/python/trabajos/inteligencia-negocios/deuda-publica/</link>
      <pubDate>Thu, 01 Jan 1970 01:33:40 +0100</pubDate>
      <guid>/docencia/python/trabajos/inteligencia-negocios/deuda-publica/</guid>
      <description>&lt;p&gt;El objetivo de este trabajo es hacer un análisis del endeudamiento público por países.&lt;/p&gt;
&lt;h2 id=&#34;conjunto-de-datos&#34;&gt;Conjunto de datos&lt;/h2&gt;
&lt;p&gt;Datos del banco mundial: 
&lt;a href=&#34;../datos/deuda.csv&#34;&gt;Deuda pública países&lt;/a&gt; y 
&lt;a href=&#34;../datos/pib.csv&#34;&gt;PIB países&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;requisitos&#34;&gt;Requisitos&lt;/h2&gt;
&lt;p&gt;Sin usar la librería Pandas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Crear una función que reciba un país y un tipo de deuda y devuelva un diccionario con todos los periodos y la cantidad de deuda en esos periodos de ese país y tipo de deuda.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba un país y un tipo de deuda y devuelva un diccionario con el mínimo y el máximo de deuda de ese tipo para ese país.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba un país y un año, y devuelva un diccionario con la deuda interna y la deuda externa de ese país en ese año.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba un país y un año, y devuelva un diccionario con la deuda en moneda local y la deuda en moneda extranjera de ese país en ese año.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Usando Pandas:&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Preprocesar el fichero de deuda pública para obtener un data frame con el país, el tipo de deuda, la fecha y la cantidad de deuda.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba un país y una fecha y devuelva un diccionario con la deuda total interna, externa, en moneda local, en moneda extranjera, a corto plazo y a largo plazo, de ese país en esa fecha.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba un tipo de deuda y una fecha, y devuelva un diccionario con la deuda de ese tipo de todos los países en esa fecha.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba un país y una fecha y dibuje un diagrama de sectores con la deuda interna y la deuda externa de ese país en esa fecha.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba un país y una fecha, y dibuje un diagrama de barras con las cantidades de los distintos tipos de deudas de ese país en esa fecha.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba una lista de países y un tipo de deuda y dibuje un diagrama de líneas con la evolución de ese tipo de deuda de esos países (una línea por país).&lt;/li&gt;
&lt;li&gt;Crear una función que reciba un país y una lista de tipos de deuda y dibuje un diagrama de líneas con la evolución de esos tipos de deuda de ese país (una línea por tipo de deuda).&lt;/li&gt;
&lt;li&gt;Crear una función que reciba una lista de países y una lista de tipos de deuda, y dibuje un diagrama de cajas con las deudas de esos tipos de esos países (una caja por país y tipo de deuda).&lt;/li&gt;
&lt;li&gt;Preprocesar el fichero del PIB crear un data frame con el país, la fecha y el PIB.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba un país y dibuje la evolución de la deuda pública total como porcentaje del PIB.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba un país devuelva un diccionario con los años y si el endeudamiento en esa fecha era insostenible. Se considera un endeudamiento insostenible si durante los tres años anteriores el porcentaje de deuda pública con respecto al PIB es superior al 20%.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;solución&#34;&gt;Solución&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/trabajos/inteligencia-negocios/soluciones/deuda-publica.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Abrir con &lt;a href=&#34;https://repl.it/@asalber/deudapy&#34;&gt;&lt;img src=&#34;/media/logo-replit.png#left&#34; alt=&#34;Abrir con repl.it&#34;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ajedrez</title>
      <link>/docencia/python/retos/ajedrez/</link>
      <pubDate>Thu, 01 Jan 1970 01:33:39 +0100</pubDate>
      <guid>/docencia/python/retos/ajedrez/</guid>
      <description>&lt;h2 id=&#34;tarea-1&#34;&gt;Tarea 1&lt;/h2&gt;
&lt;p&gt;La primera tarea consiste en escribir un programa que guarde en un fichero la secuencia de tableros de una partida de ajedrez. Partiremos del tablero inicial donde las filas del tablero están separadas por cambios de línea y las columnas por tabuladores.&lt;/p&gt;
&lt;p&gt;El programa debe guardar el tablero inicial en un fichero con el nombre que elija el usuario. Después debe preguntar al usuario si quiere hacer un movimiento o terminar la partida. Cada vez que el usuario quiera hacer un nuevo movimiento debe preguntar la fila y la columna de la pieza que quiere mover y la fila y la columna a la que la quiere mover. Tras ello añadirá el tablero resultante al final del fichero anterior.&lt;/p&gt;
&lt;p&gt;El fichero 
&lt;a href=&#34;doc/partida-ajedrez.txt&#34;&gt;partida-ajedrez.txt&lt;/a&gt; contiene un ejemplo con el fichero resultante de una partida con 3 movimientos.&lt;/p&gt;
&lt;h2 id=&#34;tarea-2&#34;&gt;Tarea 2&lt;/h2&gt;
&lt;p&gt;Una vez generado el fichero con los tableros sucesivos de una partida de ajedrez, el programa preguntará por un movimiento y mostrará por pantalla el tablero correspondiente ese movimiento.
Por ejemplo, utilizando el fichero 
&lt;a href=&#34;doc/partida-ajedrez.txt&#34;&gt;partida-ajedrez.txt&lt;/a&gt;, si el usuario introduce el movimiento 2, debería mostrar por pantalla el siguiente tablero:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;♜	♞	♝	♛	♚	♝	♞	♜
♟	♟	♟		♟	♟	♟	♟
							
			♟				
						♙	
							
♙	♙	♙	♙	♙	♙		♙
♖	♘	♗	♕	♔	♗	♘	♖
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;solución&#34;&gt;Solución&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/retos/soluciones/ajedrez.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Contratos menores de Madrid</title>
      <link>/docencia/python/trabajos/inteligencia-negocios/contratos-menores-madrid/</link>
      <pubDate>Thu, 01 Jan 1970 01:33:39 +0100</pubDate>
      <guid>/docencia/python/trabajos/inteligencia-negocios/contratos-menores-madrid/</guid>
      <description>&lt;p&gt;El objetivo de este trabajo es hacer un análisis de los contratos menores del Ayuntamiento de Madrid desde 2015 para hacer una comparativa por años y ver qué empresas han resultado más beneficiadas.&lt;/p&gt;
&lt;h3 id=&#34;conjunto-de-datos&#34;&gt;Conjunto de datos&lt;/h3&gt;
&lt;p&gt;Datos abiertos del Ayuntamiento de Madrid: 
&lt;a href=&#34;../datos/contratos-menores-madrid.csv&#34;&gt;Contratos menores&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Deben usarse los datos desde 2015.&lt;/p&gt;
&lt;h3 id=&#34;requisitos-obligatorios&#34;&gt;Requisitos obligatorios&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Crear una función que reciba una empresa y una lista de años y devuelva un diccionario con el número de contratos y el total facturado por la empresa esos años.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba una sección y una lista de años y devuelva un diccionario con el número de contratos y el total facturado a la sección esos años.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba una empresa, una sección y una lista de años y devuelva un diccionario con el número de contratos y el total facturado por la empresa a la sección esos años.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba una rango de años y un número entero n e imprima la lista de las n empresas que más han facturado durante esos años ordenadas de mayor a menor facturación y genere un gráfico con esa información.&lt;/li&gt;
&lt;li&gt;Crear una función reciba una rango de años y un número entero n y genere un gráfico con la evolución anual del total facturado por las n empresas que más han facturado.&lt;/li&gt;
&lt;li&gt;Crear una función reciba una rango de años y genere un gráfico con la evolución anual del total facturado a las secciones.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;solución&#34;&gt;Solución&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/trabajos/inteligencia-negocios/soluciones/contratos-menores-madrid.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Abrir con &lt;a href=&#34;https://repl.it/@asalber/contratos-menores-madrid&#34;&gt;&lt;img src=&#34;/media/logo-replit.png#left&#34; alt=&#34;Abrir con repl.it&#34;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emisiones de Madrid</title>
      <link>/docencia/python/trabajos/inteligencia-negocios/emisiones-madrid/</link>
      <pubDate>Thu, 01 Jan 1970 01:33:39 +0100</pubDate>
      <guid>/docencia/python/trabajos/inteligencia-negocios/emisiones-madrid/</guid>
      <description>&lt;p&gt;El objetivo de este trabajo es comprobar si las restricciones de tráfico establecidas en Madrid Central han servido para reducir significativamente las emisiones de gases contaminantes.&lt;/p&gt;
&lt;h3 id=&#34;conjunto-de-datos&#34;&gt;Conjunto de datos&lt;/h3&gt;
&lt;p&gt;Datos abiertos del Ayuntamiento de Madrid: 
&lt;a href=&#34;../datos/emisiones-madrid.csv&#34;&gt;Calidad del aire. Datos diarios años 2001 a 2019&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;requisitos&#34;&gt;Requisitos&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Crear una función que reciba una estación de medición y una magnitud y devuelva una lista con todas las mediciones de la magnitud en la estación.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba un mes y una estación de medición y devuelva un diccionario con las medias de las magnitudes medidas por la estación durante ese mes.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba un mes y una magnitud y devuelva un diccionario con las medias de las estaciones de medición de la magnitud durante ese mes.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba un rango de fechas y una estación de medición y genere un gráfico con la evolución diaria de las magnitudes de esa estación en las fechas indicadas.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba un rango de fechas y una magnitud y genere un gráfico con la evolución diaria de la magnitud para cada estación de medición en las fechas indicadas.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba una magnitud y genere un gráfico con las medias mensuales para cada estación de medición.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba un mes y una magnitud y devuelva un diccionario con las medias de la magnitud dentro de Madrid Central y fuera de ella.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba una magnitud y genere un gráfico con las medias mensuales dentro de Madrid Central y fuera de ella.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;solución&#34;&gt;Solución&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/trabajos/inteligencia-negocios/soluciones/emisiones-madrid.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Abrir con &lt;a href=&#34;https://repl.it/@asalber/emisiones-madrid&#34;&gt;&lt;img src=&#34;/media/logo-replit.png#left&#34; alt=&#34;Abrir con repl.it&#34;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Estrellas regulares</title>
      <link>/docencia/python/retos/estrellas-regulares/</link>
      <pubDate>Thu, 01 Jan 1970 01:33:39 +0100</pubDate>
      <guid>/docencia/python/retos/estrellas-regulares/</guid>
      <description>&lt;h2 id=&#34;tarea&#34;&gt;Tarea&lt;/h2&gt;
&lt;p&gt;El reto consiste en programar una función que dibuje estrellas como la que aparece a continuación con un número de puntas dado.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/estrella.png&#34; alt=&#34;Estrella&#34;&gt;&lt;/p&gt;
&lt;p&gt;Para ello hay que utilizar el módulo de Python 
&lt;a href=&#34;https://docs.python.org/3/library/turtle.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Turtle&lt;/a&gt; que permite realizar trazos sencillos en una ventana gráfica.&lt;/p&gt;
&lt;p&gt;En el siguiente video hay una introducción básica al módulo Turtle.&lt;/p&gt;
&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/cX9efszLbJw&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;Y también dispones de una 
&lt;a href=&#34;doc/PythonTurtle-cheatsheet.pdf&#34;&gt;hoja de resumen con las principales funciones de Turtle&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;solución&#34;&gt;Solución&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/retos/soluciones/dibujo-estrellas-turtle.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Laberinto</title>
      <link>/docencia/python/retos/laberinto/</link>
      <pubDate>Thu, 01 Jan 1970 01:33:39 +0100</pubDate>
      <guid>/docencia/python/retos/laberinto/</guid>
      <description>&lt;h2 id=&#34;tarea-1&#34;&gt;Tarea 1&lt;/h2&gt;
&lt;p&gt;La primera tarea consiste en construir un laberinto como el de la siguiente figura.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../img/laberinto.png&#34; alt=&#34;Laberinto&#34;&gt;&lt;/p&gt;
&lt;p&gt;El laberinto se representará como una una lista de listas, donde cada lista es una fila del laberinto y cada casilla se representará con un espacio &amp;rsquo; &amp;rsquo; si hay paso o con la letra &amp;lsquo;X&amp;rsquo; si hay un muro, tal y como se muestra a continuación:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;laberinto = [
    [&#39; &#39;, &#39;X&#39;, &#39;X&#39;, &#39;X&#39;, &#39;X&#39;], 
    [&#39; &#39;, &#39;X&#39;, &#39; &#39;, &#39; &#39;, &#39; &#39;],
    [&#39; &#39;, &#39;X&#39;, &#39; &#39;, &#39;X&#39;, &#39; &#39;], 
    [&#39; &#39;, &#39; &#39;, &#39; &#39;, &#39;X&#39;, &#39; &#39;], 
    [&#39;X&#39;, &#39;X&#39;, &#39;X&#39;, &#39;X&#39;, &#39;S&#39;]
    ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El laberinto se debe crear a partir de una tupla con las coordenadas de las casillas donde hay muro, como la siguiente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;muro = ((0,1), (0,2), (0,3), (0,4), (1,1), (2,1), (2,3), (3,3), (4,0), (4,1), (4,2), (4,3))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;tarea-2&#34;&gt;Tarea 2&lt;/h2&gt;
&lt;p&gt;La segunda tarea a resolver consiste en construir un programa para recorrer el laberinto desde la entrada a la salida. La entrada siempre está en la esquina superior izquierda y la salida en la esquina inferior derecha.&lt;/p&gt;
&lt;p&gt;El programa debe devolver una lista con la secuencia de movimientos para ir de la entrada a la salida del laberinto, tal y como se muestra a continuación:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;[&#39;Abajo&#39;, &#39;Abajo&#39;, &#39;Abajo&#39;, &#39;Abajo&#39;, &#39;Derecha&#39;, &#39;Derecha&#39;, &#39;Arriba&#39;, &#39;Arriba&#39;, &#39;Derecha&#39;, &#39;Derecha&#39;, &#39;Abajo&#39;, &#39;Abajo&#39;, &#39;Abajo&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;solución&#34;&gt;Solución&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/retos/soluciones/laberinto.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Terminal de sistemas MacOs</title>
      <link>/docencia/python/herramientas/terminal-macos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/herramientas/terminal-macos/</guid>
      <description>&lt;p&gt;El sistema de archivos del sistema operativo MacOs es muy parecida a la de los sistemas Linux y organiza el contenido de todos los discos duros y sistemas de almacenamiento siguiendo una estructura de árbol cuya raíz es siempre el directorio principal que se representa como la barra diagonal &lt;code&gt;/&lt;/code&gt;. El directorio principal contiene todos los archivos del sistema.&lt;/p&gt;
&lt;p&gt;Por otro lado, cada usuario del sistema tiene asignado un directorio principal de usuario que está dentro del directorio &lt;code&gt;/Users&lt;/code&gt; y se representa con el carácter &lt;code&gt;~&lt;/code&gt;. Cualquier usuario puede hacer los cambios que quiera en su directorio de usuario pero no podrá acceder los directorios de otros usuarios ni del resto del sistema de archivos salvo que tenga permiso de administrador del sistema (root).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;img/sistema-archivos-macos.png&#34; alt=&#34;Estructura de directorios del sistema operativo MacOs&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;rutas-absolutas-y-relativas&#34;&gt;Rutas absolutas y relativas&lt;/h2&gt;
&lt;p&gt;La ubicación de un archivo o un directorio en la estructura de árbol de la unidad se puede determinar mediante una ruta absoluta o una ruta relativa.&lt;/p&gt;
&lt;p&gt;La &lt;strong&gt;ruta absoluta&lt;/strong&gt; de un archivo o directorio es la secuencia de directorios que hay que atravesar para llegar al archivo o directorio en cuestión desde el directorio raíz. La ruta se expresa separando los directorios con la barra diagonal &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;La &lt;strong&gt;ruta relativa&lt;/strong&gt; de un archivo o directorio es la secuencia de directorios que hay que atravesar para llegar al archivo o directorio en cuestión desde el directorio activo. Para referirse al directorio madre se utiliza el alias &lt;code&gt;..&lt;/code&gt;, mientras que para referirse al propio directorio activo se utiliza el alias &lt;code&gt;.&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Mientras que la ruta absoluta de un archivo o directorio es única, la ruta relativa depende del directorio activo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ejemplo&lt;/strong&gt;. Supongamos el siguiente árbol de directorios.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;img/arbol-archivos.svg&#34; alt=&#34;Ejemplo de árbol de archivos&#34;&gt;&lt;/p&gt;
&lt;p&gt;La ruta absoluta al directorio &lt;code&gt;Programación&lt;/code&gt; sería &lt;code&gt;/Users/Alumno/Grado/Primero/Programación&lt;/code&gt;, mientras que la ruta relativa, asumiendo que el directorio activo es &lt;code&gt;Primero&lt;/code&gt;, es &lt;code&gt;./Programación&lt;/code&gt;.
Del mismo modo, la ruta relativa hasta el directorio &lt;code&gt;Segundo&lt;/code&gt; sería &lt;code&gt;../Segundo&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;la-terminal-de-los-sistemas-macos&#34;&gt;La terminal de los sistemas MacOs&lt;/h2&gt;
&lt;p&gt;La terminal de los sistemas MacOs proporciona una interfaz de línea de comando (CLI) para acceder a los archivos y dar instrucciones al sistema.&lt;/p&gt;
&lt;p&gt;La aplicación &lt;code&gt;Terminal&lt;/code&gt; viene instalada por defecto en los sistemas MacOs y puede ejecutarse como cualquier otra aplicación desde el Launchpad. Cuando se ejecuta abre una ventana de texto muestra la fecha de la última conexión y el &lt;code&gt;prompt&lt;/code&gt;, que es una cadena de texto que incluye el nombre del usuario, el nombre del ordenador y la ruta del directorio actual (inicialmente el directorio principal del usuario &lt;code&gt;~&lt;/code&gt;) terminada con el carácter &lt;code&gt;%&lt;/code&gt;. A partir de aquí el usuario puede dar ordenes al sistema tecleando comandos.&lt;/p&gt;
&lt;p&gt;El programa encargado de interpretar los comandos que el usuario introduce en la terminal se denomina &lt;code&gt;shell&lt;/code&gt; y en las últimas versiones de MacOs por defecto se utiliza la 
&lt;a href=&#34;https://es.wikipedia.org/wiki/Zsh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;shell zsh&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;comandos-básicos-de-la-shell-zsh&#34;&gt;Comandos básicos de la shell zsh&lt;/h2&gt;
&lt;p&gt;Un comando es una instrucción a ejecutar por el sistema operativo. Los comandos suelen llevar asociados parámetros y argumentos. Los parámetros modifican la manera de realizar la instrucción y van precedidos de un guión &lt;code&gt;-&lt;/code&gt; o un doble guión &lt;code&gt;--&lt;/code&gt;, mientras que los argumentos indican sobre qué objeto se realiza la acción de indica la instrucción (un archivo, un directorio, etc.)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Comando&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Acción&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ls&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Muestra un listado con el contenido del directorio actual.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ls -l&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Muestra un listado detallado con el contenido del directorio actual.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ls -la&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Muestra un listado detallado con el contenido del directorio actual, incluyendo os archivos ocultos.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ls &amp;lt;dir&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Muestra un listado del directorio &lt;code&gt;&amp;lt;dir&amp;gt;&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;cd &amp;lt;dir&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Cambia al directorio &lt;code&gt;&amp;lt;dir&amp;gt;&lt;/code&gt; convirtiéndolo en el directorio activo.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;mkdir &amp;lt;dir&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Crea el directorio &lt;code&gt;&amp;lt;dir&amp;gt;&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;mv &amp;lt;origen&amp;gt; &amp;lt;destino&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Mueve el archivo o directorio &lt;code&gt;&amp;lt;origen&amp;gt;&lt;/code&gt; al directorio &lt;code&gt;&amp;lt;destino&amp;gt;&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;rm &amp;lt;f&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Elimina el archivo &lt;code&gt;&amp;lt;f&amp;gt;&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;rm -r &amp;lt;dir&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Elimina el directorio &lt;code&gt;&amp;lt;dir&amp;gt;&lt;/code&gt; y todo su contenido.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;trucos-de-la-terminal&#34;&gt;Trucos de la terminal&lt;/h2&gt;
&lt;p&gt;Para manejar con soltura la terminal conviene utilizar algunos trucos que facilitan su uso.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Tabulador. La tecla tabulador (⇥) permite completar la entrada del usuario automáticamente, es decir, el usuario comienza a teclear un comando o ruta de archivo y, sin necesidad de escribirla por completo, cuando se pulsa la tecla tabulador el sistema intenta completarla siempre y cuando no haya más de un comando o ruta que comiencen por esos caracteres.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Teclas de desplazamiento. Las teclas con las flechas de desplazamiento arriba (↑) y abajo (↓) permiten reutilizar comandos que se han usado previamente en la misma sesión de la terminal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Limpiar la terminal. La combinación de las teclas &lt;code&gt;Ctr&lt;/code&gt; + &lt;code&gt;l&lt;/code&gt; limpia la terminal.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Terminal de sistemas Windows</title>
      <link>/docencia/python/herramientas/terminal-windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/docencia/python/herramientas/terminal-windows/</guid>
      <description>&lt;h2 id=&#34;sistema-de-archivos-de-los-sistemas-windows&#34;&gt;Sistema de archivos de los sistemas Windows&lt;/h2&gt;
&lt;p&gt;El sistema de archivos del sistema operativo Windows organiza el contenido de los discos duros en unidades. El disco duro principal es la unidad &lt;code&gt;C:&lt;/code&gt;. En cada unidad, los archivos se organizan en directorios (carpetas) siguiendo una estructura de árbol cuya raíz es siempre el directorio principal que se representa como la barra invertida &lt;code&gt;\&lt;/code&gt;. El directorio principal contiene todos los archivos del disco duro.&lt;/p&gt;
&lt;p&gt;Por otro lado, cada usuario del sistema tiene asignado un directorio principal de usuario que está dentro del directorio &lt;code&gt;/Usuarios&lt;/code&gt; y se representa con el carácter &lt;code&gt;~&lt;/code&gt;. Cualquier usuario puede hacer los cambios que quiera en su directorio de usuario pero no podrá acceder los directorios de otros usuarios ni del resto del sistema de archivos salvo que tenga permiso de administrador del sistema.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;img/ubicacion-carpetas-sistema-windows.jpg&#34; alt=&#34;Estructura de directorios del sistema operativo Windows 10&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;rutas-absolutas-y-relativas&#34;&gt;Rutas absolutas y relativas&lt;/h2&gt;
&lt;p&gt;La ubicación de un archivo o un directorio en la estructura de árbol de la unidad se puede determinar mediante una ruta absoluta o una ruta relativa.&lt;/p&gt;
&lt;p&gt;La &lt;strong&gt;ruta absoluta&lt;/strong&gt; de un archivo o directorio es la secuencia de directorios que hay que atravesar para llegar al archivo o directorio en cuestión desde el directorio raíz. La ruta se expresa separando los directorios con la barra &lt;code&gt;\&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;La &lt;strong&gt;ruta relativa&lt;/strong&gt; de un archivo o directorio es la secuencia de directorios que hay que atravesar para llegar al archivo o directorio en cuestión desde el directorio activo. Para referirse al directorio madre se utiliza el alias &lt;code&gt;..&lt;/code&gt;, mientras que para referirse al propio directorio activo se utiliza el alias &lt;code&gt;.&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Mientras que la ruta absoluta de un archivo o directorio es única, la ruta relativa depende del directorio activo.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Ejemplo&lt;/strong&gt;. Supongamos el siguiente árbol de directorios.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;img/arbol-archivos.svg&#34; alt=&#34;Ejemplo de árbol de archivos&#34;&gt;&lt;/p&gt;
&lt;p&gt;La ruta absoluta al directorio &lt;code&gt;Programación&lt;/code&gt; sería &lt;code&gt;C:\Usuarios\Alumno\Grado\Primero\Programación&lt;/code&gt;, mientras que la ruta relativa, asumiendo que el directorio activo es &lt;code&gt;Primero&lt;/code&gt;, es &lt;code&gt;.\Programación&lt;/code&gt;.
Del mismo modo, la ruta relativa hasta el directorio &lt;code&gt;Segundo&lt;/code&gt; sería &lt;code&gt;..\Segundo&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;la-terminal-de-los-sistemas-windows&#34;&gt;La terminal de los sistemas Windows&lt;/h2&gt;
&lt;p&gt;La terminal de los sistemas Windows proporciona una interfaz de línea de comando (CLI) para acceder a los archivos y dar instrucciones al sistema.&lt;/p&gt;
&lt;p&gt;La aplicación &lt;code&gt;Cmd&lt;/code&gt; viene instalada por defecto en los sistemas Windows y puede ejecutarse como cualquier otra aplicación desde el menú de inicio. Cuando se ejecuta abre una ventana de texto que muestra un mensaje de bienvenida y el &lt;code&gt;prompt&lt;/code&gt;, que es una cadena de texto con la ruta del directorio actual (inicialmente el directorio principal del usuario &lt;code&gt;~&lt;/code&gt;) terminada con el carácter &lt;code&gt;&amp;gt;&lt;/code&gt;. A partir de aquí el usuario puede dar ordenes al sistema tecleando comandos.&lt;/p&gt;
&lt;p&gt;El programa encargado de interpretar los comandos que el usuario introduce en la terminal se denomina &lt;code&gt;shell&lt;/code&gt;. La shell de Cmd es muy básica y conviene instalar la shell &lt;code&gt;PowerShell&lt;/code&gt; que es mucho más potente. La aplicación PowerShell no viene instalada en los sistemas Windows por defecto pero puede instalarse siguiendo las 
&lt;a href=&#34;https://docs.microsoft.com/es-es/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;instrucciones de instalación de PowerShell&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Al igual que para la aplicación Cmd, cuando se ejecuta PowerShell se abre la ventana de la terminal con un mensaje de bienvenida y el &lt;code&gt;prompt&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;comandos-básicos-de-powershell&#34;&gt;Comandos básicos de PowerShell&lt;/h2&gt;
&lt;p&gt;Un comando es una instrucción a ejecutar por el sistema operativo. Los comandos suelen llevar asociados parámetros y argumentos. Los parámetros modifican la manera de realizar la instrucción y van precedidos de un guión &lt;code&gt;-&lt;/code&gt;, mientras que los argumentos indican sobre qué objeto se realiza la acción de indica la instrucción (un archivo, un directorio, etc.)&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Comando&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Acción&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ls&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Muestra un listado con el contenido del directorio actual.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ls -l&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Muestra un listado detallado con el contenido del directorio actual.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ls -la&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Muestra un listado detallado con el contenido del directorio actual, incluyendo os archivos ocultos.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;ls &amp;lt;dir&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Muestra un listado del directorio &lt;code&gt;&amp;lt;dir&amp;gt;&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;cd &amp;lt;dir&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Cambia al directorio &lt;code&gt;&amp;lt;dir&amp;gt;&lt;/code&gt; convirtiéndolo en el directorio activo.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;mkdir &amp;lt;dir&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Crea el directorio &lt;code&gt;&amp;lt;dir&amp;gt;&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;mv &amp;lt;origen&amp;gt; &amp;lt;destino&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Mueve el archivo o directorio &lt;code&gt;&amp;lt;origen&amp;gt;&lt;/code&gt; al directorio &lt;code&gt;&amp;lt;destino&amp;gt;&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;rm &amp;lt;f&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Elimina el archivo &lt;code&gt;&amp;lt;f&amp;gt;&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;rmdir &amp;lt;dir&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Elimina el directorio &lt;code&gt;&amp;lt;dir&amp;gt;&lt;/code&gt; y todo su contenido.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;trucos-de-la-terminal&#34;&gt;Trucos de la terminal&lt;/h2&gt;
&lt;p&gt;Para manejar con soltura la terminal conviene utilizar algunos trucos que facilitan su uso.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Tabulador. La tecla tabulador (⇥) permite completar la entrada del usuario automáticamente, es decir, el usuario comienza a teclear un comando o ruta de archivo y, sin necesidad de escribirla por completo, cuando se pulsa la tecla tabulador el sistema intenta completarla siempre y cuando no haya más de un comando o ruta que comiencen por esos caracteres.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Teclas de desplazamiento. Las teclas con las flechas de desplazamiento arriba (↑) y abajo (↓) permiten reutilizar comandos que se han usado previamente en la misma sesión de la terminal.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Limpiar la terminal. El comando &lt;code&gt;cls&lt;/code&gt; limpia la terminal.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
