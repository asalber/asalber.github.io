<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Inteligencia de los Negocios | Aprende con Alf</title>
    <link>/category/inteligencia-de-los-negocios/</link>
      <atom:link href="/category/inteligencia-de-los-negocios/index.xml" rel="self" type="application/rss+xml" />
    <description>Inteligencia de los Negocios</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>es-es</language><lastBuildDate>Thu, 24 Mar 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/logo_hude38443eeb2faa5fa84365aba7d86a77_3514_300x300_fit_lanczos_3.png</url>
      <title>Inteligencia de los Negocios</title>
      <link>/category/inteligencia-de-los-negocios/</link>
    </image>
    
    <item>
      <title>Examen de Inteligencia de los Negocios 2022-03-24</title>
      <link>/docencia/python/examenes/inteligencia-negocios/examen-python-2022-03-24/</link>
      <pubDate>Thu, 24 Mar 2022 00:00:00 +0000</pubDate>
      <guid>/docencia/python/examenes/inteligencia-negocios/examen-python-2022-03-24/</guid>
      <description>&lt;p&gt;Grado: Inteligencia de los Negocios&lt;br&gt;
Fecha: 24 de marzo de 2022&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-1&#34;&gt;Ejercicio 1&lt;/h2&gt;
&lt;p&gt;Escriba un programa que permita practicar una variante simplificada de la prueba de cálculo mental &lt;em&gt;La calculadora humana&lt;/em&gt; del concurso televisivo Saber y ganar. El usuario debe ir sumando todos los números de la lista de uno en uno hasta que se equivoque o termine la lista, en cuyo caso ganará.&lt;/p&gt;
&lt;p&gt;Ejemplo usando la lista [50, 4, 28, 33, 12]:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;SUMAR Y GANAR 
Vaya sumando todos los números que le iré diciendo. Empezamos por 0. 
Más 50: 50 
Más 4: 54 
Más 28: 72 
Te has equivocado, pero has acertado 2 veces seguidas.


SUMAR Y GANAR 
Vaya sumando todos los números que le iré diciendo. Empezamos por 0. 
Más 50: 50 
Más 4: 54 
Más 28: 82
Más 33: 115
Más 12: 127
Enhorabuena, GANASTE.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2022-03-24/ejercicio1.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-2&#34;&gt;Ejercicio 2&lt;/h2&gt;
&lt;p&gt;Escribir un programa que calcule a partir de una fecha de un año no bisiesto el número de días que han transcurrido en ese año y el número de meses lunares completos que abarcan. Se recuerda que un mes lunar dura aproximadamente 29,53 días.&lt;/p&gt;
&lt;p&gt;El programa debe usar diccionarios para acceder al número de días de cada mes.&lt;/p&gt;
&lt;p&gt;Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;CALENDARIO LUNAR 
Este programa convierte una fecha de un año NO bisiesto a un calendario lunar. 
Indique el día: 1 
Indique el mes: henero 
El mes henero no existe. 

CALENDARIO LUNAR 
Este programa convierte una fecha de un año NO bisiesto a un calendario lunar 
Indique el día: -5 
Indique el mes: marzo 
El día -5 de marzo no existe.

CALENDARIO LUNAR 
Este programa convierte una fecha de un año NO bisiesto a un calendario lunar 
Indique el día: 29 
Indique el mes: febrero 
El día 29 de febrero no existe. 

CALENDARIO LUNAR 
Este programa convierte una fecha de un año NO bisiesto a un calendario lunar 
Indique el día: 1 
Indique el mes: febrero 
El día 1 de febrero es el día 32 del año. 
Habrán pasado 1.08 meses lunares.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2022-03-24/ejercicio2.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-3&#34;&gt;Ejercicio 3&lt;/h2&gt;
&lt;p&gt;Un cine tiene una sala rectangular con 5 filas y 4 columnas de butacas.  Escribir un programa que permita gestionar la reserva de butacas con los siguientes requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El programa mostrará una matriz con el carácter X para las butacas libres y O para las ocupadas y preguntará por la fila y columna de la butaca a reservar.&lt;/li&gt;
&lt;li&gt;Si el usuario introduce una fila o una columna no válidas, se le avisará y se le volverá a preguntar.&lt;/li&gt;
&lt;li&gt;Si la fila y la columna introducida corresponde a una butaca ocupada, se avisará al usuario y se le volverá a preguntar.&lt;/li&gt;
&lt;li&gt;Si la butaca está libre se reservará y se volverá a preguntar al usuario si quiere hacer más reservas.&lt;/li&gt;
&lt;li&gt;El programa terminará cuando el usuario no quiera hacer más reservas.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;RESERVA DE BUCATAS 
XXXXX  
XXXXX  
XXXXX  
XXXXX  
Introduce la fila que quieres: 2  
Introduce la columna que quieres: 3  
Reserva realizada.  
¿Desea realizar otra reserva? (S/N): S

RESERVA DE BUCATAS 
XXXXX  
XXOXX  
XXXXX  
XXXXX  
Introduce la fila que quieres: 5  
Introduce la columna que quieres: 1  
La fila y columna elegidas no son válidas.  
¿Desea realizar otra reserva? (S/N): S

RESERVA DE BUCATAS  
XXXXX  
XXOXX  
XXXXX  
XXXXX  
Introduce la fila que quieres: 2  
Introduce la columna que quieres: 3  
La butaca elegida está ocupada.  
¿Desea realizar otra reserva? 
(S/N): S

RESERVA DE BUCATAS  
XXXXX  
XXOXX  
XXXXX  
XXXXX  
Introduce la fila que quieres: 1  
Introduce la columna que quieres: 2  
Reserva realizada.  
¿Desea realizar otra reserva? (S/N): N  
¡Gracias! 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2022-03-24/ejercicio3.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Examen de Inteligencia de los Negocios 2021-06-05</title>
      <link>/docencia/python/examenes/inteligencia-negocios/examen-python-2021-06-05/</link>
      <pubDate>Sat, 05 Jun 2021 00:00:00 +0000</pubDate>
      <guid>/docencia/python/examenes/inteligencia-negocios/examen-python-2021-06-05/</guid>
      <description>&lt;p&gt;Grado: Inteligencia de los Negocios&lt;br&gt;
Fecha: 5 de junio de 2021&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-1&#34;&gt;Ejercicio 1&lt;/h2&gt;
&lt;p&gt;A veces, al tratar con tuplas, podemos tener un problema en el que necesitamos extraer solo $k$ elementos extremos, es decir, los $k$ máximos y mínimos. Este problema puede tener aplicaciones en campos como el desarrollo web y la ciencia de datos. Desarrollar un programa que dada una tupla y un número $k$ devuelva otra tupla con los $k$ elementos máximos y mínimos.&lt;/p&gt;
&lt;p&gt;Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;La tupla original es: (5, 20, 3, 7, 6, 8) 
La tupla con los k = 2 máximos y mínimos es: (3, 5, 8, 20) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2021-06-05/ejercicio1.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-2&#34;&gt;Ejercicio 2&lt;/h2&gt;
&lt;p&gt;Construir un programa que evalúe operaciones aritméticas sencillas (sumas, restas, productos, cocientes y potencias) introducidas por el usuario. El programa preguntará por la operación a realizar y el usuario tecleará por pantalla la operación con el siguiente formato:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;operando1 operador operando2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Después el programa debe mostrar por pantalla el resultado de la operación con el siguiente formato:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;operando1 operador operando2 = resultado&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;El programa debe preguntar al usuario hasta que este introduzca la palabra “salir”. También mostrará un mensaje de error si el usuario introduce un número de valores distinto de 3 y si introduce un operador no válido.&lt;/p&gt;
&lt;p&gt;Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Introduce la operación con el formato operando1 operador operando2: 2+3 
Entrada no válida. Debes introducir exactamente tres valores separados por espacio. 
Introduce la operación con el formato operando1 operador operando2: 2 + 3 
2 + 3 = 5.0 
Introduce la operación con el formato operando1 operador operando2: 4 ^ 2 
Operación no válida. 
Introduce la operación con el formato operando1 operador operando2: 4 ** 2 
4 ** 2 = 16.0 
Introduce la operación con el formato operando1 operador operando2: salir 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2021-06-05/ejercicio2.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-3&#34;&gt;Ejercicio 3&lt;/h2&gt;
&lt;p&gt;El siguiente diccionario contiene pares formados por números de teléfonos y propietarios:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{&#39;919654665&#39;:&#39;Pedro&#39;, &#39;917489210&#39;: &#39;Luis&#39;, &#39;623543213&#39;:&#39;Carmen&#39;, &#39;674833721&#39;:&#39;Luis&#39;}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Crear un programa que construya un diccionario con la misma información, pero tomando como claves los nombres de los usuarios y como valores los teléfonos. Como un usuario puede tener dos teléfonos, uno móvil y uno fijo, los teléfonos deben agruparse a su vez en un diccionario cuyos elementos tendrán clave “movil” o “fijo” según el teléfono empiece por 6 o no. Por ejemplo, a partir del diccionario anterior debe construirse el siguiente diccionario:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{&#39;Pedro&#39;: {&#39;fijo&#39;: &#39;919654665&#39;}, &#39;Luis&#39;: {&#39;fijo&#39;: &#39;917489210&#39;, &#39;movil&#39;: &#39;674833721&#39;}, &#39;Carmen&#39;: {&#39;movil&#39;: &#39;623543213&#39;}}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Después el programa debe recorrer este diccionario y mostrar por pantalla los teléfonos del listín en orden alfabético.&lt;/p&gt;
&lt;p&gt;Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Teléfonos de Carmen 
         movil : 623543213 
Teléfonos de Luis 
         fijo : 917489210 
         movil : 674833721 
Teléfonos de Pedro 
         fijo : 919654665 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2021-06-05/ejercicio3.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-4&#34;&gt;Ejercicio 4&lt;/h2&gt;
&lt;p&gt;Construir un programa para realizar las siguientes operaciones con dos números proporcionados por el usuario:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Comprobar si uno de los dos números es divisible por el otro. Un número es divisible por otro cuando el resto de la división entera es cero.&lt;/li&gt;
&lt;li&gt;Calcular su Máximo Común Divisor.&lt;/li&gt;
&lt;li&gt;Calcular su Mínimo Común Múltiplo.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cada una de las operaciones deben estar separadas en funciones que tengan como parámetros los 2 números y devuelvan el resultado adecuado.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2021-06-05/ejercicio4.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-5&#34;&gt;Ejercicio 5&lt;/h2&gt;
&lt;p&gt;El fichero 
&lt;a href=&#34;../soluciones/examen-2021-06-05/cercanias.csv&#34;&gt;&lt;code&gt;cercanias.csv&lt;/code&gt;&lt;/a&gt; contiene información sobre las líneas de tren de cercanías de Madrid: id (identificador del tren), línea (nombre de la línea), estaciones (estaciones de origen y destino separadas por un guion). Se pide:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Construir una función que lea el fichero &lt;code&gt;cercanias.csv&lt;/code&gt; y cree un diccionario donde la clave de cada par sea el identificador de la línea y el valor asociado una lista de dos elementos con la estación de origen y la estación de destino como el que se muestra a continuación a modo de ejemplo:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;{&#39;10T0001C1&#39;: [&#39;Principe Pio&#39;, &#39;Aeropuerto&#39;], &#39;10T0002C1&#39;: [&#39;Aeropuerto&#39;, &#39;Principe Pio&#39;], ...}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;La función debe recibir el nombre del fichero como parámetro.
2. Construir otra función que guarde la información del diccionario obtenido en el apartado anterior en un fichero csv separado por punto y coma con 3 columnas con los encabezados id, origen y destino. La función debe recibir como parámetros el diccionario con los trenes y el nombre del fichero resultante.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2021-06-05/ejercicio5.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-6&#34;&gt;Ejercicio 6&lt;/h2&gt;
&lt;p&gt;Construir un programa que realize las siguientes operaciones con la librería Pandas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Crear un DataFrame con las siguientes columnas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nombre: Juan, Marta, Pedro, Jorge, Blas, Lisa, Antonio&lt;/li&gt;
&lt;li&gt;Edad: 23,78,22,19,45,33,20&lt;/li&gt;
&lt;li&gt;Género: M, F, M, M, M, F, M&lt;/li&gt;
&lt;li&gt;Provincia&amp;rsquo;: Burgos, Madrid, Toledo, Burgos, Madrid, Toledo, Madrid&lt;/li&gt;
&lt;li&gt;Hijos: 2,0,0,3,2,1,4&lt;/li&gt;
&lt;li&gt;Mascotas: 5,1,0,5,2,2,3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Mostrar la información básica del DataFrame.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Obtener los principales estadísticos de las columnas numéricas.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Obtener los porcentajes de hombres y mujeres por provincias.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Representar, mediante un diagrama de dispersión, en número de hijos frente al número de mascotas para las personas de Madrid.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Realizar la siguiente gráfica.
&lt;img src=&#34;../img/diagrama-barras-provincias.png&#34; alt=&#34;&amp;amp;lsquo;Recta de regresión&amp;amp;rsquo;&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2021-06-05/ejercicio6.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Examen de Inteligencia de los Negocios 2021-05-26</title>
      <link>/docencia/python/examenes/inteligencia-negocios/examen-python-2021-05-26/</link>
      <pubDate>Wed, 26 May 2021 00:00:00 +0000</pubDate>
      <guid>/docencia/python/examenes/inteligencia-negocios/examen-python-2021-05-26/</guid>
      <description>&lt;p&gt;Grado: Inteligencia de los Negocios&lt;br&gt;
Fecha: 26 de mayo de 2021&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-1&#34;&gt;Ejercicio 1&lt;/h2&gt;
&lt;p&gt;Dadas dos listas de números del mismo tamaño &lt;code&gt;x&lt;/code&gt; e &lt;code&gt;y&lt;/code&gt;, construir las siguientes funciones:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Una función para calcular la media de una lista de números.&lt;/li&gt;
&lt;li&gt;Una función para calcular la varianza de una lista de números.&lt;/li&gt;
&lt;li&gt;Una función para calcular la covarianza de dos listas de números.&lt;/li&gt;
&lt;li&gt;Una función para calcular los coeficientes de la recta de regresión de &lt;code&gt;y&lt;/code&gt; sobre &lt;code&gt;x&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Una función que devuelva el diagrama de dispersión y la recta de regresión como la que se muestra en el siguiente ejemplo:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-pyhton&#34;&gt;x = [1, 2, 3, 4, 5, 6]
y = [20, 18, 12, 10, 9, 9]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;../img/recta-regresion.png&#34; alt=&#34;&amp;amp;lsquo;Recta de regresión&amp;amp;rsquo;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Usar las siguientes fórmulas para el cálculo de los estadísticos: $\bar x = \frac{\sum x_i}{n}$, $s^2 = \frac{\sum x_i^2}{n}-\bar{x}^2$, $s_{xy} = \frac{\sum x_iy_j}{n} - \bar{x}\bar{y}$, $b = \frac{s_{xy}}{s_x^2}$ y $a = \bar{y} - b * \bar{x}$.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2021-05-26/ejercicio1.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-2&#34;&gt;Ejercicio 2&lt;/h2&gt;
&lt;p&gt;Escribir una función que, dado un número &lt;code&gt;x&lt;/code&gt;, genere una matriz cuadrada (&lt;code&gt;x*x&lt;/code&gt; elementos) con el resultado de sus tablas de multiplicar desde 0 hasta &lt;code&gt;x&lt;/code&gt;. El resultado debe guardarse en un fichero llamado &lt;code&gt;tabla-X.txt&lt;/code&gt; donde &lt;code&gt;X&lt;/code&gt; es el número introducido por el usuario.&lt;/p&gt;
&lt;p&gt;Escribir otra función que, dado un número &lt;code&gt;x&lt;/code&gt;, acceda al fichero de la tabla correspondiente y muestre la tabla por pantalla. En caso de que la tabla no exista deberá controlar la excepción para mostrar un mensaje de aviso al usuario.&lt;/p&gt;
&lt;p&gt;Ejemplo:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt;&amp;gt;&amp;gt; Introduce un número entre 1 y 10: 5
&amp;gt;&amp;gt;&amp;gt; Contenido del fichero matriz-5.txt
0    0    0    0    0    0
0    1    2    3    4    5
0    2    4    6    8    10
0    3    6    9    12   15
0    4    8    12   16   20
0    5    10   15   20   25
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2021-05-26/ejercicio2.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-3&#34;&gt;Ejercicio 3&lt;/h2&gt;
&lt;p&gt;Crear un programa utilizando la librería Pandas y Matplotlib que realice lo siguiente:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Crear el siguiente DataFrame indexado:
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;  calorias  tiempo
L      420      60
M      380      40
X      390      75
J      490      55
V      300      45
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Calcular la media, mediana y desviación típica de ambas columnas.&lt;/li&gt;
&lt;li&gt;Añadir otra columna booleana al DataFrame para ver si se ha cumplido el reto de quemar más de 400 calorías por hora. La nueva columna debe generarse aplicando una fórmula a las otras columnas. El DataFrame resultante debe ser el siguiente:
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;  calorias  tiempo   reto
L      420      60   True
M      380      40   True
X      390      75  False
J      490      55   True
V      300      45  False
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Filtrar el DataFrame y devolver otro DataFrame con las filas pares que cumplan que el número de calorías es mayor de 400.&lt;/li&gt;
&lt;li&gt;Crear a partir del DataFrame una serie con los porcentajes de días que se ha conseguido el reto y los que no.&lt;/li&gt;
&lt;li&gt;Crear un gráfico como el de más abajo que muestre la progresión de las calorías y tiempo durante la semana.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;../img/evolucion-calorias.png&#34; alt=&#34;Serie evolución calorias&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2021-05-26/ejercicio3.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Examen de Inteligencia de los Negocios 2021-03-25</title>
      <link>/docencia/python/examenes/inteligencia-negocios/examen-python-2021-03-25/</link>
      <pubDate>Thu, 25 Mar 2021 00:00:00 +0000</pubDate>
      <guid>/docencia/python/examenes/inteligencia-negocios/examen-python-2021-03-25/</guid>
      <description>&lt;p&gt;Grado: Inteligencia de los Negocios&lt;br&gt;
Fecha: 25 de marzo de 2021&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-1&#34;&gt;Ejercicio 1&lt;/h2&gt;
&lt;p&gt;El cálculo del IRPF en la Hacienda española se define como progresivo. Hacienda divide los ingresos (tu renta) en tramos y asigna un porcentaje a pagar en cada uno de ellos. Estos tramos son los siguientes:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Tramos IRPF 2021&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Tipos a aplicar&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;Desde 0 hasta 12.450€&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;19%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;De 12.450€ a 20.200€&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;24%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;De 20.200€ a 35.200€&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;30%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;De 35.200€ en adelante&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;37%&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Por ejemplo, para una persona con una renta de 65.000€, el cálculo del impuesto se haría así:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Primer tramo IRPF: se paga el 19% de 12.450 euros, es decir, 2.365,5 euros&lt;/li&gt;
&lt;li&gt;Segundo tramo IRPF: se paga el 24% de 7.750 euros (la diferencia entre el primer y segundo tramo), es decir, 1.860 euros.&lt;/li&gt;
&lt;li&gt;Tercer tramo IRPF: se paga el 30% de 15.000 euros (la diferencia entre el segundo y tercer tramo), es decir, 4.500 euros.&lt;/li&gt;
&lt;li&gt;Cuarto tramo IRPF: se paga el 37% de 29.800 euros (la diferencia entre su renta y el límite del tercer tramo), es decir, 11.026 euros.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;La suma de las anteriores cantidades es el total a pagar: 19.751,5 euros.&lt;/p&gt;
&lt;p&gt;Escribir un programa que pregunte por la renta del usuario y muestre por pantalla el IRPF que debe pagar a Hacienda.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2021-03-25/ejercicio1.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-2&#34;&gt;Ejercicio 2&lt;/h2&gt;
&lt;p&gt;Juan juega siempre la misma combinación a la bonoloto: 7, 13, 21, 37, 46, 49.&lt;/p&gt;
&lt;p&gt;Construir un programa que pregunte al usuario por la combinación ganadora y diga si Juan ha ganado o, en caso contrario, muestre por pantalla la lista de los números que no ha acertado. El programa debe usar listas.&lt;/p&gt;
&lt;p&gt;Nota: El juego de la bonoloto consiste en acertar una combinación de 6 números entre 1 y 49.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2021-03-25/ejercicio2.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-3&#34;&gt;Ejercicio 3&lt;/h2&gt;
&lt;p&gt;Los productos en oferta de una tienda de informática se guardan una cadena como la de más abajo, donde cada línea (separadas por el carácter de cambio de línea ‘\n’) contiene el nombre del producto, el número de unidades en stock, el precio (en €) y el descuento que tiene (en porcentaje), separados por punto y coma.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&#39;disco duro 500Gb;200;25;15\nmemoria ram 16Gb;500;30;20\nratón inalámbrico;800;12;10\ntarjeta wifi;150;20;12&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Construir un programa que genere, a partir de la cadena anterior, un diccionario como el de más abajo, donde cada par corresponda un producto, siendo la clave el nombre del producto y el valor una lista con el resto de la información del producto.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;{‘disco duro 500Gb’: [‘200’, ‘25’, ‘15’], ‘memoria ram 16Gb’: [‘500’, ‘30’, ‘20’], ‘ratón inalámbrico’: [‘800’, ‘12’, ‘10’], ‘tarjeta wifi’: [‘150’, ‘20’, ‘12’]}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Después el programa debe recorrer el diccionario y mostrar por pantalla un listado con los nombres de todos los productos en oferta y su precio final tras aplicar el descuento.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2021-03-25/ejercicio3.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Examen de Inteligencia de los Negocios 2020-06-19</title>
      <link>/docencia/python/examenes/inteligencia-negocios/examen-python-2020-06-19/</link>
      <pubDate>Fri, 19 Jun 2020 00:00:00 +0000</pubDate>
      <guid>/docencia/python/examenes/inteligencia-negocios/examen-python-2020-06-19/</guid>
      <description>&lt;p&gt;Grado: Inteligencia de los Negocios&lt;br&gt;
Fecha: 19 de Junio de 2020&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-1&#34;&gt;Ejercicio 1&lt;/h2&gt;
&lt;p&gt;Escribe un programa en python que permita guardar las notas de un alumno conseguidas en un cuatrimestre. Guarda la información en un diccionario cuyas claves sean las asignaturas y los valores las notas de cada asignatura. El programa pedirá la asignatura y la nota para esa asignatura. Si se recibe un número negativo en la nota, el programa termina y muestra las asignaturas suspensas.&lt;/p&gt;
&lt;p&gt;Ejemplo&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-ssh&#34;&gt;Introduce una asignatura: matemáticas
Introduce la nota: 4
Introduce una asignatura: economía
Introduce la nota: 8
Introduce una asignatura: programación
Introduce la nota: 10
Introduce una asignatura: ninguna
Introduce la nota: -2
Las asignaturas suspensas son:
matemáticas
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2020-06-19/ejercicio1.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-2&#34;&gt;Ejercicio 2&lt;/h2&gt;
&lt;p&gt;Escribir una función que tome una lista de números enteros desordenados y devuelva dos listas ordenadas. La primera con los números pares y la segunda con los números impares.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2020-06-19/ejercicio2.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-3&#34;&gt;Ejercicio 3&lt;/h2&gt;
&lt;p&gt;Escribir un programa para gestionar las citas de una consulta médica. La base de datos de citas debe estar en un fichero de nombre &lt;code&gt;citas.csv&lt;/code&gt;. Cada cita contendrá los campos &lt;code&gt;dni&lt;/code&gt;, &lt;code&gt;mes&lt;/code&gt;, &lt;code&gt;dia&lt;/code&gt;, &lt;code&gt;hora&lt;/code&gt; y &lt;code&gt;especialidad&lt;/code&gt;. No es necesario que la primera fila del csv contenga los nombres de los campos. El programa debe incluir las siguientes funciones:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Una función que permita generar el fichero y añadir una cita a la base de datos.&lt;/li&gt;
&lt;li&gt;Una función que reciba un dni y devuelva una lista con las citas de ese paciente.&lt;/li&gt;
&lt;li&gt;Una función para eliminar las citas anteriores a una fecha dada.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2020-06-19/ejercicio3.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-4&#34;&gt;Ejercicio 4&lt;/h2&gt;
&lt;p&gt;El fichero 
&lt;a href=&#34;../soluciones/examen-2020-06-19/ipc-2020.csv&#34;&gt;ipc-2020.csv&lt;/a&gt; contiene el IPC de las comunidades autónomas de los cinco primeros meses de 2020. Crear un programa que realice las siguientes operaciones utilizando la librería Pandas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Crear un DataFrame leyendo el fichero desde internet con la url &lt;code&gt;https://aprendeconalf.es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2020-06-19/ipc-2020.csv&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla el DataFrame con los datos de las filas 10 a 15.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla el DataFrame con los datos de Canarias de Mayo.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla una serie con el IPC mensual máximo de cada comunidad autónoma.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla una serie con la desviación típica del IPC mensual de cada grupo.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla un DataFrame con las comunidades y grupos donde los precios no han subido en promedio (IPC mensual medio menor de 100).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2020-06-19/ejercicio4.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Examen de Inteligencia de los Negocios 2020-05-27</title>
      <link>/docencia/python/examenes/inteligencia-negocios/examen-python-2020-05-27/</link>
      <pubDate>Wed, 27 May 2020 00:00:00 +0000</pubDate>
      <guid>/docencia/python/examenes/inteligencia-negocios/examen-python-2020-05-27/</guid>
      <description>&lt;p&gt;Grado: Inteligencia de los Negocios&lt;br&gt;
Fecha: 27 de Mayo de 2020&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-1&#34;&gt;Ejercicio 1&lt;/h2&gt;
&lt;p&gt;Escribir un programa al que al introducirle la altura de una línea sea capaz de dibujarla en diagonal con asteriscos. Por ejemplo, si introducimos &lt;code&gt;altura = 5&lt;/code&gt; dibujaría lo siguiente:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;    *
   *
  *
 *
*
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2020-05-27/ejercicio1.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-2&#34;&gt;Ejercicio 2&lt;/h2&gt;
&lt;p&gt;Escribir una función que cuente las palabras que hay en una frase y las devuelva dentro de un diccionario. También tiene que devolver una lista con las palabras que aparecen más de una vez. Por ejemplo si se le pasa la frase: &lt;code&gt;La caracola está enterrada al lado de otra caracola de color&lt;/code&gt; la función debe devolver el diccionario y la lista siguientes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;{&#39;La&#39;: 1, &#39;caracola&#39;: 2, &#39;está&#39;: 1, &#39;enterrada&#39;: 1, &#39;al&#39;: 1, &#39;lado&#39;: 1, &#39;de&#39;: 2, &#39;otra&#39;: 1, &#39;color&#39;: 1}
[&#39;caracola&#39;, &#39;de&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2020-05-27/ejercicio2.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-3&#34;&gt;Ejercicio 3&lt;/h2&gt;
&lt;p&gt;El fichero 
&lt;a href=&#34;../soluciones/examen-2020-05-27/horas-trabajo.csv&#34;&gt;horas-trabajo.csv&lt;/a&gt; contiene el número de horas mensuales trabajadas por los empleados de una empresa durante el primer cuatrimestre. Crear un programa que realice las siguientes operaciones sin utilizar la librería Pandas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Leer el fichero de internet &lt;code&gt;https://aprendeconalf.es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2020-05-27/horas-trabajo.csv&lt;/code&gt; y crear una lista con las líneas del fichero.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla las horas totales del primer operario.&lt;/li&gt;
&lt;li&gt;Crear un diccionario de diccionarios tal que las claves del diccionario principal serán los identificadores de los operarios y sus valores serán, a su vez, otros diccionarios cuyas claves serán los meses y sus valores las horas trabajadas en esos meses para cada operario. Es decir, un diccionario como el siguiente:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;{&#39;OP1&#39;: {&#39;Enero&#39;: &#39;180&#39;, &#39;Febrero&#39;: &#39;160&#39;, &#39;Marzo&#39;: &#39;140&#39;, &#39;Abril&#39;: &#39;180&#39;},
&#39;OP2&#39;: {&#39;Enero&#39;: &#39;120&#39;, &#39;Febrero&#39;: &#39;140&#39;, &#39;Marzo&#39;: &#39;&#39;, &#39;Abril&#39;: &#39;100&#39;}, ... }
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;Crear una función que reciba la base de datos de las horas trabajadas (puede utilizarse el diccionario del apartado anterior u otra estructura de datos), el identificador de un operario y el precio de la hora, y devuelva una tupla con el número totales de horas trabajadas y el salario de ese operario.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2020-05-27/ejercicio3.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-4&#34;&gt;Ejercicio 4&lt;/h2&gt;
&lt;p&gt;El fichero 
&lt;a href=&#34;http://aprendeconalf.es/python/examenes/soluciones/examen-2020-05-27/horas-trabajo.csv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;horas-trabajo.csv&lt;/a&gt; contiene el número de horas mensuales trabajadas por los empleados de una empresa durante el primer cuatrimestre. Crear un programa que realice las siguientes operaciones utilizando la librería Pandas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Crear un DataFrame leyendo el fichero desde internet con la url &lt;code&gt;http://aprendeconalf.es/python/examenes/soluciones/examen-2020-05-27/horas-trabajo.csv&lt;/code&gt;. Obsérvese que el separador de campos es el punto y coma.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla una serie con el número total de horas trabajadas para cada mes.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla una serie con el número de operarios de cada departamento.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla el número de empleados que han trabajado todos los meses, es decir, que tienen un número de horas todos los meses del cuatrimestre.&lt;/li&gt;
&lt;li&gt;Convertir el DataFrame a formato largo, de manera que todas las horas aparezcan en la misma columna.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla una serie con el número medio de horas trabajadas en cada departamento.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla una serie con el total de horas trabajadas de cada operario.&lt;/li&gt;
&lt;li&gt;Mostrar por pantalla una serie con los salarios de todos los operarios ordenados de mayor a menor.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2020-05-27/ejercicio4.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Examen de Inteligencia de los Negocios 2019-06-18</title>
      <link>/docencia/python/examenes/inteligencia-negocios/examen-python-2019-06-18/</link>
      <pubDate>Tue, 18 Jun 2019 00:00:00 +0000</pubDate>
      <guid>/docencia/python/examenes/inteligencia-negocios/examen-python-2019-06-18/</guid>
      <description>&lt;p&gt;Grado: Inteligencia de los Negocios&lt;br&gt;
Fecha: 18 de Junio de 2019&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-1&#34;&gt;Ejercicio 1&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Clonar con git el repositorio con la url &lt;code&gt;https://github.com/asalberceu/examen-fundamentos-computadores-2019-06-18-parcial1.git&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Crear una rama con los apellidos del alumno en mayúsculas y separados por un guión, es decir, &lt;code&gt;&amp;lt;APELLIDO1-APELLIDO2&amp;gt;&lt;/code&gt;, y convertir esta rama en la rama activa.&lt;/li&gt;
&lt;li&gt;Crear el fichero &lt;code&gt;ejercicio1.3.txt&lt;/code&gt; que contenga la salida del comando de Git que muestra el historial de commits del repositorio, mostrando un commit por línea.&lt;/li&gt;
&lt;li&gt;Crear un fichero &lt;code&gt;ejercicio1.4.txt&lt;/code&gt; que contenga la salida del comando que muestra las diferencias entre el primer y el tercer commits del repositorio.&lt;/li&gt;
&lt;li&gt;Crear un fichero &lt;code&gt;ejercicio1.5.txt&lt;/code&gt; que contenga la salida del comando de Git que muestra los repositorios remotos configurados junto con sus urls.&lt;/li&gt;
&lt;li&gt;Añadir todos los cambios a la zona temporal de intercambio y hacer un commit con el mensaje &amp;ldquo;Añadidas respuestas ejercicio 1.&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;spoiler &#34; &gt;
  &lt;p&gt;
    &lt;a class=&#34;btn btn-primary&#34; data-toggle=&#34;collapse&#34; href=&#34;#spoiler-0&#34; role=&#34;button&#34; aria-expanded=&#34;false&#34; aria-controls=&#34;spoiler-0&#34;&gt;
      Solución
    &lt;/a&gt;
  &lt;/p&gt;
  &lt;div class=&#34;collapse card &#34; id=&#34;spoiler-0&#34;&gt;
    &lt;div class=&#34;card-body&#34;&gt;
      &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt; git clone https://github.com/asalberceu/examen-fundamentos-computadores-2019-06-18-parcial1.git
&amp;gt; cd examen-fundamentos-computadores-2019-06-18-parcial1.git
&amp;gt; git checkout -b SANCHEZ-ALBERCA
&amp;gt; git log --oneline &amp;gt; ejercicio1.3.txt
&amp;gt; git diff f9ed835 a485ced &amp;gt; ejercicio1.4.txt
&amp;gt; git remote -v &amp;gt; ejercicio1.5.txt
&amp;gt; git add . 
&amp;gt; git commit -m &amp;quot;Añadida respuestas.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;ejercicio-2&#34;&gt;Ejercicio 2&lt;/h2&gt;
&lt;p&gt;A lo largo de un curso se realizan dos exámenes parciales. Para aprobar el curso la nota media debe ser mayor o igual que 5 siempre y cuando en ambos parciales se tenga al menos un 4. Escribir un programa que pregunte al usuario la nota de los dos parciales y muestre por pantalla si el alumno ha aprobado el curso o si no, y en caso de no haber aprobado, qué parcial tiene que repetir por tener menos de 4 en él.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2019-06-18/ejercicio2.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-3&#34;&gt;Ejercicio 3&lt;/h2&gt;
&lt;p&gt;Un n-grama es una secuencia de $n$ caracteres consecutivos de una cadena. Por ejemplo, los 3-gramas de la cadena &lt;code&gt;&#39;Python&#39;&lt;/code&gt; son &lt;code&gt;&#39;Pyt&#39;&lt;/code&gt;, &lt;code&gt;&#39;yth&#39;&lt;/code&gt;, &lt;code&gt;&#39;tho&#39;&lt;/code&gt; y &lt;code&gt;&#39;hon&#39;&lt;/code&gt;. Escribir un programa que pregunte por una cadena y un número entero positivo $n$ y muestre por pantalla todos los n-gramas de la cadena.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2019-06-18/ejercicio3.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-4&#34;&gt;Ejercicio 4&lt;/h2&gt;
&lt;p&gt;Escribir un programa que elimine de una lista dada todos los elementos repetidos y muestre por pantalla los elementos de la lista sin repeticiones.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2019-06-18/ejercicio4.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-5&#34;&gt;Ejercicio 5&lt;/h2&gt;
&lt;p&gt;Definir funciones para codificar y decodificar mensajes en código morse.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Definir una función para codificar una palabra en código morse. Debe cumplir los siguientes requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Debe usarse el diccionario que se da.&lt;/li&gt;
&lt;li&gt;El único parámetro de entrada de la función es una cadena con una palabra.&lt;/li&gt;
&lt;li&gt;Debe devolver una cadena con el código morse correspondiente a la palabra, separando los bloques de código correspondientes a cada letra por punto y coma &lt;code&gt;;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Definir una función para decodificar una palabra en código morse. Debe cumplir los siguientes requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A partir del diccionario que se da se debe crear el diccionario invertido, es decir, un diccionario cuyas claves son los códigos morse y sus valores las letras correspondientes. Se valorará especialmente el uso de comprensión de diccionarios.&lt;/li&gt;
&lt;li&gt;El único parámetro de entrada de la función es una cadena de código morse, donde los bloques de código correspondientes a cada letra van separados por puntos y coma &lt;code&gt;;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Debe devolver una cadena con la palabra decodificada.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Definir una función para codificar un mensaje en código morse. Debe cumplir los siguientes requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Debe usarse la función anterior para codificar palabras.&lt;/li&gt;
&lt;li&gt;El único parámetro de entrada de la función es una cadena con un mensaje (palabras separadas con espacios).&lt;/li&gt;
&lt;li&gt;Debe devolver una cadena con las palabras del mensaje codificadas y separadas por espacios.&lt;/li&gt;
&lt;li&gt;Se valorará especialmente el uso de programación funcional.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Definir una función para decodificar un mensaje en código morse. Debe cumplir los siguientes requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Debe usarse la función anterior para decodificar palabras.&lt;/li&gt;
&lt;li&gt;El único parámetro de entrada de la función es una cadena con un mensaje en código morse (letras separadas por punto y coma, y palabras separadas con espacios).&lt;/li&gt;
&lt;li&gt;Debe devolver una cadena con las palabras del mensaje decodificadas y separadas por espacios.&lt;/li&gt;
&lt;li&gt;Se valorará especialmente el uso de programación funcional.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2019-06-18/ejercicio5.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-6&#34;&gt;Ejercicio 6&lt;/h2&gt;
&lt;p&gt;La url 
&lt;a href=&#34;https://datos.madrid.es/egob/catalogo/300117-0-arrendamiento-programas.csv&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;https://datos.madrid.es/egob/catalogo/300117-0-arrendamiento-programas.csv&lt;/code&gt;&lt;/a&gt; apunta a un fichero en formato csv con datos de los arrendamientos de viviendas de la Empresa Municipal de la Vivienda del Ayuntamiento de Madrid.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Construir una función que abra un fichero con el formato anterior y devuelva una lista cuyos elementos son a su vez las listas que contienen los datos de cada línea del fichero menos la primera línea. Debe cumplir los siguientes requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;La función recibirá como único parámetro la url del fichero.&lt;/li&gt;
&lt;li&gt;Debe leer el fichero por líneas y para cada línea debe dividir la línea por el separador de campos (punto y coma) y guardar los datos en una lista.&lt;/li&gt;
&lt;li&gt;Debe devolver la lista con las listas de datos obtenidas a partir de cada línea.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Construir una función que reciba una lista de listas como la que devuelve la función anterior y devuelva otra lista con los nombres de los distritos contenidos en la lista. Debe cumplir los siguientes requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;La función recibirá como único parámetro una lista de listas con las viviendas arrendadas por distrito.&lt;/li&gt;
&lt;li&gt;Debe recorrer la lista de listas y para cada lista debe extraer el nombre del distrito y añadirlo a una lista con los distritos.&lt;/li&gt;
&lt;li&gt;Debe devolver la lista de distritos.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Construir una función que reciba una lista de listas como la que devuelve la primera función y una lista de nombres de distritos y devuelva la lista con las listas correspondientes a los distritos indicados. Debe satisfacer los siguientes requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;La función recibirá como parámetros una lista de listas con las viviendas arrendadas por distrito y otra lista con nombres de distritos.&lt;/li&gt;
&lt;li&gt;Debe recorrer la lista de viviendas arrendadas y añadir a otra lista nueva las líneas correspondientes a los distritos indicados en la segunda lista.&lt;/li&gt;
&lt;li&gt;Debe devolver la nueva lista con las listas correspondientes a los distritos indicados.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Construir una función que reciba una lista como la que devuelve la primera función y devuelva un diccionario cuyas claves sean los nombres de distrito y cuyos valores sean el total de viviendas arrendadas en el distrito. Debe cumplir los siguientes requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;La función recibirá como único parámetro la lista con las viviendas arrendadas por distrito.&lt;/li&gt;
&lt;li&gt;Debe recorrer la lista de listas y para cada lista extraer el nombre del distrito y el total de viviendas arrendadas en el distrito y añadir el par a un diccionario.&lt;/li&gt;
&lt;li&gt;Debe devolver un diccionario con un par para cada lista de la lista, cuya clave sea el nombre del distrito y cuyo valor sea el número total de viviendas arrendadas en ese distrito.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2019-06-18/ejercicio6.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Examen de Inteligencia de los Negocios 2019-05-27</title>
      <link>/docencia/python/examenes/inteligencia-negocios/examen-python-2019-05-27/</link>
      <pubDate>Mon, 27 May 2019 00:00:00 +0000</pubDate>
      <guid>/docencia/python/examenes/inteligencia-negocios/examen-python-2019-05-27/</guid>
      <description>&lt;p&gt;Grado: Inteligencia de los Negocios&lt;br&gt;
Fecha: 27 de Mayo de 2019&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-1&#34;&gt;Ejercicio 1&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Clonar con git el repositorio con la url &lt;code&gt;https://github.com/asalberceu/examen-fundamentos-computadores-2019-05-27-parcial1.git&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Crear una rama con los apellidos del alumno en mayúsculas y separados por un guión, es decir, &lt;code&gt;&amp;lt;APELLIDO1-APELLIDO2&amp;gt;&lt;/code&gt;, y convertir esta rama en la rama activa.&lt;/li&gt;
&lt;li&gt;Crear el fichero &lt;code&gt;ejercicio1.3.txt&lt;/code&gt; que contenga la salida del comando de Git que muestra para cada línea del fichero &lt;code&gt;ejercicio2.py&lt;/code&gt; la información sobre el commit en que se realizó el último cambio en esa línea.&lt;/li&gt;
&lt;li&gt;Crear un fichero &lt;code&gt;ejercicio1.4.txt&lt;/code&gt; que contenga la salida del comando que muestra las diferencias entre el primer y el segundo commits del repositorio.&lt;/li&gt;
&lt;li&gt;Crear un fichero &lt;code&gt;ejercicio1.5.txt&lt;/code&gt; que contenga la salida del comando de Git que muestra el estado actual del repositorio.&lt;/li&gt;
&lt;li&gt;Añadir todos los cambios a la zona temporal de intercambio y hacer un commit con el mensaje &amp;ldquo;Añadidas respuestas.&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;spoiler &#34; &gt;
  &lt;p&gt;
    &lt;a class=&#34;btn btn-primary&#34; data-toggle=&#34;collapse&#34; href=&#34;#spoiler-0&#34; role=&#34;button&#34; aria-expanded=&#34;false&#34; aria-controls=&#34;spoiler-0&#34;&gt;
      Solución
    &lt;/a&gt;
  &lt;/p&gt;
  &lt;div class=&#34;collapse card &#34; id=&#34;spoiler-0&#34;&gt;
    &lt;div class=&#34;card-body&#34;&gt;
      &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt; git clone https://github.com/asalberceu/examen-fundamentos-computadores-2019-05-27-parcial1.git
&amp;gt; cd examen-fundamentos-computadores-2019-05-27-parcial1.git
&amp;gt; git checkout -b SANCHEZ-ALBERCA
&amp;gt; git annotate ejercicio2.py &amp;gt; ejercicio1.3.txt
&amp;gt; git diff afce5 b4a76 &amp;gt; ejercicio1.4.txt
&amp;gt; git status &amp;gt; ejercicio1.5.txt
&amp;gt; git add . 
&amp;gt; git commit -m &amp;quot;Añadida respuestas.&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;ejercicio-2&#34;&gt;Ejercicio 2&lt;/h2&gt;
&lt;p&gt;Escribir un programa que pida al usuario un número entero $n$ y muestre por pantalla un triángulo el de más abajo.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;    * 
   ***
  *****
 *******
*********
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;donde $n$ es el número de filas del triángulo.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2019-05-27/ejercicio2.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-3&#34;&gt;Ejercicio 3&lt;/h2&gt;
&lt;p&gt;Escribir un programa para ver los beneficios de una empresa en un periodo de años.&lt;/p&gt;
&lt;p&gt;El programa debe cumplir los siguientes requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El programa tiene que preguntar al usuario por un año inicial y otro final, y después preguntar por los ingresos y los gastos de cada año desde el año inicial hasta el año final.&lt;/li&gt;
&lt;li&gt;Con los datos introducidos se deben crear dos listas, una con los ingresos y otra con los gastos, de manera que los ingresos y los gastos de cada año aparezcan en la misma posición de las listas.&lt;/li&gt;
&lt;li&gt;El programa debe crear otra lista con el beneficio de cada año (ingresos menos gastos) y mostrarla por pantalla.&lt;/li&gt;
&lt;li&gt;El programa debe crear otra lista booleana que indique para cada año si ha habido beneficios o no y mostrarla por pantalla.&lt;/li&gt;
&lt;li&gt;Finalmente el programa debe mostrar por pantalla la lista de los años con beneficios la lista de los años con pérdidas.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2019-05-27/ejercicio3.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-4&#34;&gt;Ejercicio 4&lt;/h2&gt;
&lt;p&gt;Definir una función que reciba un número entero entre 0 y 999, y devuelva una cadena con la cantidad introducida en palabras. Por ejemplo, si se introduce 647 debe devolver la cadena &amp;ldquo;seiscientos cuarenta y siete&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;La función debe cumplir los siguientes requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El único parámetro de entrada de la función es un número entero entre 0 y 999.&lt;/li&gt;
&lt;li&gt;Deben usarse diccionarios para emparejar cada dígito con la palabra correspondiente para las unidades, decenas y centenas.&lt;/li&gt;
&lt;li&gt;Debe devolver una cadena con la cantidad introducida en palabras.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2019-05-27/ejercicio4.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-5&#34;&gt;Ejercicio 5&lt;/h2&gt;
&lt;p&gt;El fichero 
&lt;a href=&#34;../soluciones/examen-2019-05-27/cotizacion.csv&#34;&gt;&lt;code&gt;cotizacion.csv&lt;/code&gt;&lt;/a&gt; contiene las cotizaciones de las empresas del IBEX35 con las siguientes columnas: &lt;code&gt;nombre&lt;/code&gt; (nombre de la empresa), &lt;code&gt;Final&lt;/code&gt; (precio de la acción al cierre de bolsa), &lt;code&gt;Máximo&lt;/code&gt; (precio máximo de la acción durante la jornada), &lt;code&gt;Mínimo&lt;/code&gt; (precio mínimo de la acción durante la jornada), &lt;code&gt;volumen&lt;/code&gt; (Volumen al cierre de bolsa), &lt;code&gt;Efectivo&lt;/code&gt; (capitalización al cierre en miles de euros).&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Construir una función que abra un fichero con el formato anterior y devuelva un diccionario con los datos del fichero por columnas.&lt;/p&gt;
&lt;p&gt;La función debe cumplir los siguientes requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;La función recibirá como único parámetro la ruta del fichero.&lt;/li&gt;
&lt;li&gt;Debe realizarse un preprocesado de los datos que reemplace la coma por el punto como separador de decimales.&lt;/li&gt;
&lt;li&gt;Debe realizarse el control de errores mediante excepciones para el caso de que el fichero no exista en la ruta indicada.&lt;/li&gt;
&lt;li&gt;Debe devolver un diccionario con tantos elementos como columnas tenga el fichero, donde la clave de cada par sea el nombre de la columna y el valor la lista de datos de la columna.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Construir una función que reciba el diccionario devuelto por la función anterior y cree un fichero en formato csv con el mínimo, el máximo y la media de dada columna.&lt;/p&gt;
&lt;p&gt;La función debe cumplir los siguientes requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;La función recibirá como parámetros el diccionario con los datos de cotización y la ruta del fichero a crear.&lt;/li&gt;
&lt;li&gt;El fichero generado tendrá las mismas columnas que el fichero &lt;code&gt;cotizacion.csv&lt;/code&gt; con los mismos nombres de columnas, y tres líneas correspondientes al mínimo, máximo y media de los datos de cada columna. En la columna &lt;code&gt;nombre&lt;/code&gt; en lugar del nombre de la empresa debe aparecer la medida calculada en esa línea (mínimo, máximo o media). Los datos deben estar separados por punto y coma.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2019-05-27/ejercicio5.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-6&#34;&gt;Ejercicio 6&lt;/h2&gt;
&lt;p&gt;Definir una función que reciba una lista de facturas, un NIF y un mes, y devuelva un diccionario con el número de facturas emitidas a ese NIF en el mes indicado y el total facturado en ese mes.&lt;/p&gt;
&lt;p&gt;La función debe cumplir los siguientes requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Los parámetros de entrada serán una lista de facturas, una cadena con un NIF y otra cadena con el mes.&lt;/li&gt;
&lt;li&gt;Cada factura se representarán mediante un diccionario con las claves &lt;code&gt;nif&lt;/code&gt; (NIF del cliente), &lt;code&gt;mes&lt;/code&gt; (mes de emisión de la factura), &lt;code&gt;cantidad&lt;/code&gt; (cantidad facturada sin IVA), &lt;code&gt;iva&lt;/code&gt; (porcentaje de IVA a aplicar).&lt;/li&gt;
&lt;li&gt;Se debe crear una lista con el total de cada factura (una vez aplicado el IVA) para el NIF y el mes indicados utilizando programación funcional o comprensión de listas.&lt;/li&gt;
&lt;li&gt;La función debe devolver un diccionario con el número de facturas y el total facturado al NIF en el mes indicado.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/examenes/inteligencia-negocios/soluciones/examen-2019-05-27/ejercicio6.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Examen de Inteligencia de los Negocios 2019-03-27</title>
      <link>/docencia/python/examenes/inteligencia-negocios/examen-python-2019-03-27/</link>
      <pubDate>Wed, 27 Mar 2019 00:00:00 +0000</pubDate>
      <guid>/docencia/python/examenes/inteligencia-negocios/examen-python-2019-03-27/</guid>
      <description>&lt;p&gt;Grado: Inteligencia de los Negocios&lt;br&gt;
Fecha: 27 de Marzo de 2019&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-1&#34;&gt;Ejercicio 1&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Clonar con git el repositorio con la url &lt;code&gt;https://github.com/asalberceu/examen-fundamentos-programacion-2019-03-27-A.git&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Crear una rama con los apellidos del alumno en mayúsculas y separados por un guión, es decir, &lt;code&gt;APELLIDO1-APELLIDO2&lt;/code&gt;, y convertir esta rama en la rama activa.&lt;/li&gt;
&lt;li&gt;Crear la carpeta &lt;code&gt;respuestas&lt;/code&gt;, y dentro de ella el fichero &lt;code&gt;ejercicio1.3.txt&lt;/code&gt; que contenga la salida que da el comando de Git para mostrar todas diferencias entre la última versión de la rama actual y la anterior.&lt;/li&gt;
&lt;li&gt;Añadir todos los cambios a la zona temporal de intercambio y hacer un commit con el mensaje &amp;ldquo;Añadida respuesta ejercicio 1.3.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Crear dentro de la carpeta &lt;code&gt;respuestas&lt;/code&gt; el fichero &lt;code&gt;ejercicio1.5.txt&lt;/code&gt; que contenga la salida que da el comando de Git para mostrar todos los commits del repositorio (una línea por commit), incluyendo todas las ramas.&lt;/li&gt;
&lt;li&gt;Añadir todos los cambios a la zona temporal de intercambio y hacer un commit con el mensaje &amp;ldquo;Añadida respuesta ejercicio 1.5.&amp;rdquo;&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;spoiler &#34; &gt;
  &lt;p&gt;
    &lt;a class=&#34;btn btn-primary&#34; data-toggle=&#34;collapse&#34; href=&#34;#spoiler-0&#34; role=&#34;button&#34; aria-expanded=&#34;false&#34; aria-controls=&#34;spoiler-0&#34;&gt;
      Solución
    &lt;/a&gt;
  &lt;/p&gt;
  &lt;div class=&#34;collapse card &#34; id=&#34;spoiler-0&#34;&gt;
    &lt;div class=&#34;card-body&#34;&gt;
      &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt; git clone https://github.com/asalberceu/examen-fundamentos-programacion-2019-03-27-A.git
&amp;gt; cd examen-fundamentos-programacion-2019-03-27-A
&amp;gt; git checkout -b SANCHEZ-ALBERCA
&amp;gt; mkdir respuestas
&amp;gt; git diff HEAD~1 &amp;gt; respuestas/ejercicio1.3.txt
&amp;gt; git add .
&amp;gt; git commit -m &amp;quot;Añadida respuesta ejercicio 1.3&amp;quot;
&amp;gt; git log --oneline --all &amp;gt; respuestas/ejercicio1.5.txt
&amp;gt; git add .
&amp;gt; git commit -m &amp;quot;Añadida respuesta ejercicio 1.5&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2 id=&#34;ejercicio-2&#34;&gt;Ejercicio 2&lt;/h2&gt;
&lt;p&gt;Escribir un programa que realice la devolución de una cantidad dada por el usuario en monedas.&lt;/p&gt;
&lt;p&gt;El programa debe cumplir los siguientes requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Solo se disponen de tres tipos de monedas: 5, 2 y 1 €. Crear una lista que contenga estos tres tipos de moneda y usar la lista en la solución.&lt;/li&gt;
&lt;li&gt;El programa debe preguntar al usuario por una cantidad entera de euros.&lt;/li&gt;
&lt;li&gt;El programa debe mostrar por pantalla el mínimo número de monedas necesarias para sumar la cantidad introducida por el usuario y cuántas monedas de cada tipo se necesitan para ello. El número de monedas de cada tipo debe guardarse en otra lista.&lt;/li&gt;
&lt;li&gt;El programa debe guardarse dentro de la carpeta &lt;code&gt;respuestas&lt;/code&gt; con el nombre &lt;code&gt;ejercicio2.py&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Cuando el programa esté terminado, añadir el fichero &lt;code&gt;ejercicio2.py&lt;/code&gt; a la zona de intercambio temporal y hacer un commit con el mensaje &amp;ldquo;Añadida respuesta ejercicio 2&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://repl.it/@asalber/examen-2019-03-27-ejercicio-2&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ejercicio-3&#34;&gt;Ejercicio 3&lt;/h2&gt;
&lt;p&gt;Escribir un programa que simule el famoso juego del ahorcado.&lt;/p&gt;
&lt;p&gt;El programa debe cumplir los siguientes requisitos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;El programa debe preguntar al usuario la palabra a adivinar. A partir de la palabra introducida debe crear una lista con los caracteres de la palabra.&lt;/li&gt;
&lt;li&gt;Después debe ir preguntando al usuario por letras hasta un máximo de 5 fallos o hasta que no queden letras en la lista. En ambos casos el programa terminará pero mostrará el mensaje &amp;ldquo;Perdiste&amp;rdquo; si se comenten 5 fallos y el mensaje &amp;ldquo;Ganaste&amp;rdquo; si no quedan palabras en la lista.&lt;/li&gt;
&lt;li&gt;Cada vez que el usuario introduzca una nueva letra, si la letra está en la lista la eliminará y mostrará el mensaje &amp;ldquo;Acierto&amp;rdquo;, mientras que si la letra no está en la lista mostrará el mensaje &amp;ldquo;Fallo&amp;rdquo;. Si la letra está más de una vez en la lista, sólo se eliminará la primera instancia que aparezca.&lt;/li&gt;
&lt;li&gt;El programa debe guardarse dentro de la carpeta &lt;code&gt;respuestas&lt;/code&gt; con el nombre &lt;code&gt;ejercicio3.py&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Cuando el programa esté terminado, añadir el fichero &lt;code&gt;ejercicio3.py&lt;/code&gt; a la zona de intercambio temporal y hacer un commit con el mensaje &amp;ldquo;Añadida respuesta ejercicio 3&amp;rdquo;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Requisito adicional para un punto extra:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Cada vez que el usuario acierte una letra debe mostrar la palabra a adivinar con las letras acertadas hasta el momento y el resto reemplazadas por asteriscos.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://repl.it/@asalber/examen-2019-03-27-ejercicio-3&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Airbnb Madrid</title>
      <link>/docencia/python/trabajos/inteligencia-negocios/madrid-airbnb1/</link>
      <pubDate>Thu, 01 Jan 1970 01:33:40 +0100</pubDate>
      <guid>/docencia/python/trabajos/inteligencia-negocios/madrid-airbnb1/</guid>
      <description>&lt;p&gt;El objetivo de este trabajo es comprobar si se está utilizando la plataforma Airbnb por parte de empresas, en lugar de particulares, para alquiler turístico en el centro de Madrid.&lt;/p&gt;
&lt;h3 id=&#34;conjunto-de-datos&#34;&gt;Conjunto de datos&lt;/h3&gt;
&lt;p&gt;Datos abiertos de Inside Airbnb: &lt;a href=&#34;../datos/madrid-airbnb-listings-small.csv&#34;&gt;Fichero alojamientos Madrid detallado&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;requisitos-obligatorios&#34;&gt;Requisitos obligatorios&lt;/h3&gt;
&lt;p&gt;Sin usar Pandas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Extraer del fichero de alojamientos una lista con todos los alojamientos, donde cada alojamiento sea un diccionario que contenga el identificador del alojamiento, el identificador del anfitrión, el distrito, el precio y las plazas.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba la lista de alojamientos y devuelva el número de alojamientos en cada distrito.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba la lista de alojamientos y un número de ocupantes y devuelva la lista de alojamientos con un número de plazas mayor o igual que el número de ocupantes.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba la lista de alojamientos un distrito, y devuelva los 10 alojamientos más baratos del distrito.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba la lista de alojamientos y devuelva un diccionario con los anfitriones y el número de alojamientos que posee cada uno.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Usando Pandas:&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;Preprocesar el fichero de alojamientos para crear un data frame con las variables id, host_id, listing_url, room_type, neighbourhood_group_cleansed, price, cleaning_fee, accommodates, minimum_nights, minimum_cost, review_scores_rating, latitude, longitude, is_location_exact. Eliminar del data frame cualquier fila incompleta. Añadir al data frame nuevas variables con el coste mínimo por noche y por persona (que incluya los gastos de limpieza).&lt;/li&gt;
&lt;li&gt;Crear una función que reciba una lista de distritos y devuelva un diccionario con los tipos de alojamiento en ese distrito y el porcentaje de alojamientos de ese tipo.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba una lista de distritos y devuelva un diccionario con el número de alojamientos que cada anfitrión ofrece en esos distrito, ordenado de más a menos alojamientos.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba devuelva un diccionario con el número medio de alojamientos por anfitrión de cada distrito.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba una lista de distritos y dibuje un diagrama de sectores con los porcentajes de tipos de alojamientos en esos distritos.&lt;/li&gt;
&lt;li&gt;Crear una función que dibuje un diagrama de barras con el número de alojamientos por distritos.&lt;/li&gt;
&lt;li&gt;Crear una función que dibuje un diagrama de barras con los porcentajes acumulados de tipos de alojamientos por distritos.&lt;/li&gt;
&lt;li&gt;Crear una función reciba una lista de distritos y una lista de tipos de alojamientos, y dibuje un diagrama de sectores con la distribución del número de alojamientos de ese tipo por anfitrión.&lt;/li&gt;
&lt;li&gt;Crear una función que dibuje un diagrama de barras con los precios medios por persona y día de cada distrito.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba una lista de distritos y dibuje un gráfico de dispersión con el coste mínimo por noche y persona y la puntuación en esos distritos.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba una lista de distritos y dibuje dos histogramas con la distribución de precios por persona y día, uno para los alojamientos con título en inglés y otro para los alojamientos con títulos en español. Si la distribución es muy asimétrica, aplicar una transformación logarítmica. ¿Hay diferencias entre los precios de los alojamientos en inglés y el español? Nota: Para identificar el idioma puede usare el módulo langdetect.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;solución&#34;&gt;Solución&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/trabajos/inteligencia-negocios/soluciones/madrid-airbnb1.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Abrir con &lt;a href=&#34;https://repl.it/@asalber/madrid-airbnb1py&#34;&gt;&lt;img src=&#34;/media/logo-replit.png#left&#34; alt=&#34;Abrir con repl.it&#34;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deuda Pública</title>
      <link>/docencia/python/trabajos/inteligencia-negocios/deuda-publica/</link>
      <pubDate>Thu, 01 Jan 1970 01:33:40 +0100</pubDate>
      <guid>/docencia/python/trabajos/inteligencia-negocios/deuda-publica/</guid>
      <description>&lt;p&gt;El objetivo de este trabajo es hacer un análisis del endeudamiento público por países.&lt;/p&gt;
&lt;h2 id=&#34;conjunto-de-datos&#34;&gt;Conjunto de datos&lt;/h2&gt;
&lt;p&gt;Datos del banco mundial: 
&lt;a href=&#34;../datos/deuda.csv&#34;&gt;Deuda pública países&lt;/a&gt; y 
&lt;a href=&#34;../datos/pib.csv&#34;&gt;PIB países&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;requisitos&#34;&gt;Requisitos&lt;/h2&gt;
&lt;p&gt;Sin usar la librería Pandas:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Crear una función que reciba un país y un tipo de deuda y devuelva un diccionario con todos los periodos y la cantidad de deuda en esos periodos de ese país y tipo de deuda.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba un país y un tipo de deuda y devuelva un diccionario con el mínimo y el máximo de deuda de ese tipo para ese país.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba un país y un año, y devuelva un diccionario con la deuda interna y la deuda externa de ese país en ese año.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba un país y un año, y devuelva un diccionario con la deuda en moneda local y la deuda en moneda extranjera de ese país en ese año.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Usando Pandas:&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Preprocesar el fichero de deuda pública para obtener un data frame con el país, el tipo de deuda, la fecha y la cantidad de deuda.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba un país y una fecha y devuelva un diccionario con la deuda total interna, externa, en moneda local, en moneda extranjera, a corto plazo y a largo plazo, de ese país en esa fecha.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba un tipo de deuda y una fecha, y devuelva un diccionario con la deuda de ese tipo de todos los países en esa fecha.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba un país y una fecha y dibuje un diagrama de sectores con la deuda interna y la deuda externa de ese país en esa fecha.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba un país y una fecha, y dibuje un diagrama de barras con las cantidades de los distintos tipos de deudas de ese país en esa fecha.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba una lista de países y un tipo de deuda y dibuje un diagrama de líneas con la evolución de ese tipo de deuda de esos países (una línea por país).&lt;/li&gt;
&lt;li&gt;Crear una función que reciba un país y una lista de tipos de deuda y dibuje un diagrama de líneas con la evolución de esos tipos de deuda de ese país (una línea por tipo de deuda).&lt;/li&gt;
&lt;li&gt;Crear una función que reciba una lista de países y una lista de tipos de deuda, y dibuje un diagrama de cajas con las deudas de esos tipos de esos países (una caja por país y tipo de deuda).&lt;/li&gt;
&lt;li&gt;Preprocesar el fichero del PIB crear un data frame con el país, la fecha y el PIB.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba un país y dibuje la evolución de la deuda pública total como porcentaje del PIB.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba un país devuelva un diccionario con los años y si el endeudamiento en esa fecha era insostenible. Se considera un endeudamiento insostenible si durante los tres años anteriores el porcentaje de deuda pública con respecto al PIB es superior al 20%.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;solución&#34;&gt;Solución&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/trabajos/inteligencia-negocios/soluciones/deuda-publica.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Abrir con &lt;a href=&#34;https://repl.it/@asalber/deudapy&#34;&gt;&lt;img src=&#34;/media/logo-replit.png#left&#34; alt=&#34;Abrir con repl.it&#34;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Contratos menores de Madrid</title>
      <link>/docencia/python/trabajos/inteligencia-negocios/contratos-menores-madrid/</link>
      <pubDate>Thu, 01 Jan 1970 01:33:39 +0100</pubDate>
      <guid>/docencia/python/trabajos/inteligencia-negocios/contratos-menores-madrid/</guid>
      <description>&lt;p&gt;El objetivo de este trabajo es hacer un análisis de los contratos menores del Ayuntamiento de Madrid desde 2015 para hacer una comparativa por años y ver qué empresas han resultado más beneficiadas.&lt;/p&gt;
&lt;h3 id=&#34;conjunto-de-datos&#34;&gt;Conjunto de datos&lt;/h3&gt;
&lt;p&gt;Datos abiertos del Ayuntamiento de Madrid: 
&lt;a href=&#34;../datos/contratos-menores-madrid.csv&#34;&gt;Contratos menores&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Deben usarse los datos desde 2015.&lt;/p&gt;
&lt;h3 id=&#34;requisitos-obligatorios&#34;&gt;Requisitos obligatorios&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Crear una función que reciba una empresa y una lista de años y devuelva un diccionario con el número de contratos y el total facturado por la empresa esos años.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba una sección y una lista de años y devuelva un diccionario con el número de contratos y el total facturado a la sección esos años.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba una empresa, una sección y una lista de años y devuelva un diccionario con el número de contratos y el total facturado por la empresa a la sección esos años.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba una rango de años y un número entero n e imprima la lista de las n empresas que más han facturado durante esos años ordenadas de mayor a menor facturación y genere un gráfico con esa información.&lt;/li&gt;
&lt;li&gt;Crear una función reciba una rango de años y un número entero n y genere un gráfico con la evolución anual del total facturado por las n empresas que más han facturado.&lt;/li&gt;
&lt;li&gt;Crear una función reciba una rango de años y genere un gráfico con la evolución anual del total facturado a las secciones.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;solución&#34;&gt;Solución&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/trabajos/inteligencia-negocios/soluciones/contratos-menores-madrid.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Abrir con &lt;a href=&#34;https://repl.it/@asalber/contratos-menores-madrid&#34;&gt;&lt;img src=&#34;/media/logo-replit.png#left&#34; alt=&#34;Abrir con repl.it&#34;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emisiones de Madrid</title>
      <link>/docencia/python/trabajos/inteligencia-negocios/emisiones-madrid/</link>
      <pubDate>Thu, 01 Jan 1970 01:33:39 +0100</pubDate>
      <guid>/docencia/python/trabajos/inteligencia-negocios/emisiones-madrid/</guid>
      <description>&lt;p&gt;El objetivo de este trabajo es comprobar si las restricciones de tráfico establecidas en Madrid Central han servido para reducir significativamente las emisiones de gases contaminantes.&lt;/p&gt;
&lt;h3 id=&#34;conjunto-de-datos&#34;&gt;Conjunto de datos&lt;/h3&gt;
&lt;p&gt;Datos abiertos del Ayuntamiento de Madrid: 
&lt;a href=&#34;../datos/emisiones-madrid.csv&#34;&gt;Calidad del aire. Datos diarios años 2001 a 2019&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;requisitos&#34;&gt;Requisitos&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Crear una función que reciba una estación de medición y una magnitud y devuelva una lista con todas las mediciones de la magnitud en la estación.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba un mes y una estación de medición y devuelva un diccionario con las medias de las magnitudes medidas por la estación durante ese mes.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba un mes y una magnitud y devuelva un diccionario con las medias de las estaciones de medición de la magnitud durante ese mes.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba un rango de fechas y una estación de medición y genere un gráfico con la evolución diaria de las magnitudes de esa estación en las fechas indicadas.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba un rango de fechas y una magnitud y genere un gráfico con la evolución diaria de la magnitud para cada estación de medición en las fechas indicadas.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba una magnitud y genere un gráfico con las medias mensuales para cada estación de medición.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba un mes y una magnitud y devuelva un diccionario con las medias de la magnitud dentro de Madrid Central y fuera de ella.&lt;/li&gt;
&lt;li&gt;Crear una función que reciba una magnitud y genere un gráfico con las medias mensuales dentro de Madrid Central y fuera de ella.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;solución&#34;&gt;Solución&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://colab.research.google.com/github/asalber/aprendeconalf/blob/master/content/es/docencia/python/trabajos/inteligencia-negocios/soluciones/emisiones-madrid.ipynb&#34; class=&#34;btn btn-info&#34; target=&#34;_blank&#34;&gt;Solución&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Abrir con &lt;a href=&#34;https://repl.it/@asalber/emisiones-madrid&#34;&gt;&lt;img src=&#34;/media/logo-replit.png#left&#34; alt=&#34;Abrir con repl.it&#34;&gt;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
